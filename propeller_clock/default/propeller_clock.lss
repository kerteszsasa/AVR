
propeller_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001de  00800060  000002ba  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080023e  0080023e  0000052c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d6  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004e1  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c0  00000000  00000000  00000b03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000446  00000000  00000000  00000cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000016b  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f7  00000000  00000000  00001317  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000140e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	dc c0       	rjmp	.+440    	; 0x1bc <__vector_1>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	40 c0       	rjmp	.+128    	; 0x8a <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	12 e0       	ldi	r17, 0x02	; 2
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea eb       	ldi	r30, 0xBA	; 186
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ae 33       	cpi	r26, 0x3E	; 62
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	12 e0       	ldi	r17, 0x02	; 2
  4a:	ae e3       	ldi	r26, 0x3E	; 62
  4c:	b2 e0       	ldi	r27, 0x02	; 2
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 34       	cpi	r26, 0x48	; 72
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	f6 d0       	rcall	.+492    	; 0x246 <main>
  5a:	2d c1       	rjmp	.+602    	; 0x2b6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <InitINT>:


//*******************
void InitINT(void)
{
	MCUCR=1<<ISC11|1<<ISC01;
  5e:	8a e0       	ldi	r24, 0x0A	; 10
  60:	85 bf       	out	0x35, r24	; 53
	GICR=1<<INT1|1<<INT0;
  62:	80 ec       	ldi	r24, 0xC0	; 192
  64:	8b bf       	out	0x3b, r24	; 59
}
  66:	08 95       	ret

00000068 <__vector_2>:

}

//************************
ISR (INT1_vect)
{
  68:	1f 92       	push	r1
  6a:	0f 92       	push	r0
  6c:	0f b6       	in	r0, 0x3f	; 63
  6e:	0f 92       	push	r0
  70:	11 24       	eor	r1, r1
//	min++;
	//_delay_ms(100);
//	alma++;
//	kirajzol=alma;
	
}
  72:	0f 90       	pop	r0
  74:	0f be       	out	0x3f, r0	; 63
  76:	0f 90       	pop	r0
  78:	1f 90       	pop	r1
  7a:	18 95       	reti

0000007c <RTCInit>:


//*********************************************
void RTCInit(void)
{
   ASSR=1<<AS2;	//ext cristal
  7c:	88 e0       	ldi	r24, 0x08	; 8
  7e:	82 bd       	out	0x22, r24	; 34
   TCCR2= 1<<CS22|1<<CS20; //prescaler 128
  80:	85 e0       	ldi	r24, 0x05	; 5
  82:	85 bd       	out	0x25, r24	; 37
   TIMSK=1<<TOIE2;
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	89 bf       	out	0x39, r24	; 57
}
  88:	08 95       	ret

0000008a <__vector_4>:



//*******************
ISR(TIMER2_OVF_vect )
{
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	8f 93       	push	r24
	alma++;
  96:	80 91 3e 02 	lds	r24, 0x023E
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	80 93 3e 02 	sts	0x023E, r24
}
  a0:	8f 91       	pop	r24
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <disp0>:


//***********************
void disp0(unsigned char data)
{
	if(data & 1)	PORTD|=16;
  ac:	98 2f       	mov	r25, r24
  ae:	80 ff       	sbrs	r24, 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <disp0+0xa>
  b2:	94 9a       	sbi	0x12, 4	; 18
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <disp0+0xc>
	else			PORTD&=~16;
  b6:	94 98       	cbi	0x12, 4	; 18
	if(data & 2)	PORTC|=32;
  b8:	91 ff       	sbrs	r25, 1
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <disp0+0x14>
  bc:	ad 9a       	sbi	0x15, 5	; 21
  be:	01 c0       	rjmp	.+2      	; 0xc2 <disp0+0x16>
	else			PORTC&=~32;
  c0:	ad 98       	cbi	0x15, 5	; 21
	if(data & 4)	PORTC|=16;
  c2:	92 ff       	sbrs	r25, 2
  c4:	02 c0       	rjmp	.+4      	; 0xca <disp0+0x1e>
  c6:	ac 9a       	sbi	0x15, 4	; 21
  c8:	01 c0       	rjmp	.+2      	; 0xcc <disp0+0x20>
	else			PORTC&=~16;
  ca:	ac 98       	cbi	0x15, 4	; 21
	if(data & 8)	PORTC|=8;
  cc:	93 ff       	sbrs	r25, 3
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <disp0+0x28>
  d0:	ab 9a       	sbi	0x15, 3	; 21
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <disp0+0x2a>
	else			PORTC&=~8;
  d4:	ab 98       	cbi	0x15, 3	; 21
	if(data & 16)	PORTC|=4;
  d6:	94 ff       	sbrs	r25, 4
  d8:	02 c0       	rjmp	.+4      	; 0xde <disp0+0x32>
  da:	aa 9a       	sbi	0x15, 2	; 21
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <disp0+0x34>
	else			PORTC&=~4;
  de:	aa 98       	cbi	0x15, 2	; 21
	if(data & 32)	PORTC|=2;
  e0:	95 ff       	sbrs	r25, 5
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <disp0+0x3c>
  e4:	a9 9a       	sbi	0x15, 1	; 21
  e6:	01 c0       	rjmp	.+2      	; 0xea <disp0+0x3e>
	else			PORTC&=~2;
  e8:	a9 98       	cbi	0x15, 1	; 21
	if(data & 64)	PORTC|=1;
  ea:	96 ff       	sbrs	r25, 6
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <disp0+0x46>
  ee:	a8 9a       	sbi	0x15, 0	; 21
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <disp0+0x48>
	else			PORTC&=~1;
  f2:	a8 98       	cbi	0x15, 0	; 21
	if(data & 128)	PORTB|=32;
  f4:	87 ff       	sbrs	r24, 7
  f6:	02 c0       	rjmp	.+4      	; 0xfc <disp0+0x50>
  f8:	c5 9a       	sbi	0x18, 5	; 24
  fa:	08 95       	ret
	else			PORTB&=~32;
  fc:	c5 98       	cbi	0x18, 5	; 24
  fe:	08 95       	ret

00000100 <disp1>:


//***********************
void disp1(unsigned char data)
{
	if(data & 1)	PORTB|=16;
 100:	98 2f       	mov	r25, r24
 102:	80 ff       	sbrs	r24, 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <disp1+0xa>
 106:	c4 9a       	sbi	0x18, 4	; 24
 108:	01 c0       	rjmp	.+2      	; 0x10c <disp1+0xc>
	else			PORTB&=~16;
 10a:	c4 98       	cbi	0x18, 4	; 24
	if(data & 2)	PORTB|=8;
 10c:	91 ff       	sbrs	r25, 1
 10e:	02 c0       	rjmp	.+4      	; 0x114 <disp1+0x14>
 110:	c3 9a       	sbi	0x18, 3	; 24
 112:	01 c0       	rjmp	.+2      	; 0x116 <disp1+0x16>
	else			PORTB&=~8;
 114:	c3 98       	cbi	0x18, 3	; 24
	if(data & 4)	PORTB|=4;
 116:	92 ff       	sbrs	r25, 2
 118:	02 c0       	rjmp	.+4      	; 0x11e <disp1+0x1e>
 11a:	c2 9a       	sbi	0x18, 2	; 24
 11c:	01 c0       	rjmp	.+2      	; 0x120 <disp1+0x20>
	else			PORTB&=~4;
 11e:	c2 98       	cbi	0x18, 2	; 24
	if(data & 8)	PORTB|=2;
 120:	93 ff       	sbrs	r25, 3
 122:	02 c0       	rjmp	.+4      	; 0x128 <disp1+0x28>
 124:	c1 9a       	sbi	0x18, 1	; 24
 126:	01 c0       	rjmp	.+2      	; 0x12a <disp1+0x2a>
	else			PORTB&=~2;
 128:	c1 98       	cbi	0x18, 1	; 24
	if(data & 16)	PORTB|=1;
 12a:	94 ff       	sbrs	r25, 4
 12c:	02 c0       	rjmp	.+4      	; 0x132 <disp1+0x32>
 12e:	c0 9a       	sbi	0x18, 0	; 24
 130:	01 c0       	rjmp	.+2      	; 0x134 <disp1+0x34>
	else			PORTB&=~1;
 132:	c0 98       	cbi	0x18, 0	; 24
	if(data & 32)	PORTD|=128;
 134:	95 ff       	sbrs	r25, 5
 136:	02 c0       	rjmp	.+4      	; 0x13c <disp1+0x3c>
 138:	97 9a       	sbi	0x12, 7	; 18
 13a:	01 c0       	rjmp	.+2      	; 0x13e <disp1+0x3e>
	else			PORTD&=~128;
 13c:	97 98       	cbi	0x12, 7	; 18
	if(data & 64)	PORTD|=64;
 13e:	96 ff       	sbrs	r25, 6
 140:	02 c0       	rjmp	.+4      	; 0x146 <disp1+0x46>
 142:	96 9a       	sbi	0x12, 6	; 18
 144:	01 c0       	rjmp	.+2      	; 0x148 <disp1+0x48>
	else			PORTD&=~64;
 146:	96 98       	cbi	0x12, 6	; 18
	if(data & 128)	PORTD|=32;
 148:	87 ff       	sbrs	r24, 7
 14a:	02 c0       	rjmp	.+4      	; 0x150 <disp1+0x50>
 14c:	95 9a       	sbi	0x12, 5	; 18
 14e:	08 95       	ret
	else			PORTD&=~32;
 150:	95 98       	cbi	0x12, 5	; 18
 152:	08 95       	ret

00000154 <putch>:
		} while(0)
*/
volatile int aaa=5;
//***********************
void putch(unsigned char x)
{
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	28 2f       	mov	r18, r24
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	20 52       	subi	r18, 0x20	; 32
 166:	30 40       	sbci	r19, 0x00	; 0
 168:	e9 01       	movw	r28, r18
 16a:	cc 0f       	add	r28, r28
 16c:	dd 1f       	adc	r29, r29
 16e:	cc 0f       	add	r28, r28
 170:	dd 1f       	adc	r29, r29
 172:	c2 0f       	add	r28, r18
 174:	d3 1f       	adc	r29, r19
 176:	c0 5a       	subi	r28, 0xA0	; 160
 178:	df 4f       	sbci	r29, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17a:	9c e2       	ldi	r25, 0x2C	; 44
 17c:	e9 2e       	mov	r14, r25
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	f9 2e       	mov	r15, r25
unsigned char i=0;
for(i=0;i<5;i++)
 182:	95 e0       	ldi	r25, 0x05	; 5
 184:	89 9f       	mul	r24, r25
 186:	80 01       	movw	r16, r0
 188:	11 24       	eor	r1, r1
 18a:	0b 53       	subi	r16, 0x3B	; 59
 18c:	10 40       	sbci	r17, 0x00	; 0
{
	disp1(font[x-32][i]);
 18e:	89 91       	ld	r24, Y+
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	b6 df       	rcall	.-148    	; 0x100 <disp1>
 194:	c7 01       	movw	r24, r14
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <putch+0x42>
volatile int aaa=5;
//***********************
void putch(unsigned char x)
{
unsigned char i=0;
for(i=0;i<5;i++)
 19a:	c0 17       	cp	r28, r16
 19c:	d1 07       	cpc	r29, r17
 19e:	b9 f7       	brne	.-18     	; 0x18e <putch+0x3a>
{
	disp1(font[x-32][i]);
	_delay_us(FONT_DELAY);
}
disp1(0);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	ad df       	rcall	.-166    	; 0x100 <disp1>
 1a6:	8c e2       	ldi	r24, 0x2C	; 44
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <putch+0x56>
_delay_us(FONT_DELAY);

}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	08 95       	ret

000001bc <__vector_1>:



//**********************SNC
ISR (INT0_vect)
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
		FONT_I(c[j]);
		FONT_O(d[j]);
	}	
	*/

putch('K');
 1de:	8b e4       	ldi	r24, 0x4B	; 75
 1e0:	b9 df       	rcall	.-142    	; 0x154 <putch>
putch('E');
 1e2:	85 e4       	ldi	r24, 0x45	; 69
 1e4:	b7 df       	rcall	.-146    	; 0x154 <putch>
putch('R');
 1e6:	82 e5       	ldi	r24, 0x52	; 82
 1e8:	b5 df       	rcall	.-150    	; 0x154 <putch>
putch('T');
 1ea:	84 e5       	ldi	r24, 0x54	; 84
 1ec:	b3 df       	rcall	.-154    	; 0x154 <putch>
putch('E');
 1ee:	85 e4       	ldi	r24, 0x45	; 69
 1f0:	b1 df       	rcall	.-158    	; 0x154 <putch>
putch('S');
 1f2:	83 e5       	ldi	r24, 0x53	; 83
 1f4:	af df       	rcall	.-162    	; 0x154 <putch>
putch('Z');
 1f6:	8a e5       	ldi	r24, 0x5A	; 90
 1f8:	ad df       	rcall	.-166    	; 0x154 <putch>
putch(' ');
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	ab df       	rcall	.-170    	; 0x154 <putch>
putch('S');
 1fe:	83 e5       	ldi	r24, 0x53	; 83
 200:	a9 df       	rcall	.-174    	; 0x154 <putch>
putch('A');
 202:	81 e4       	ldi	r24, 0x41	; 65
 204:	a7 df       	rcall	.-178    	; 0x154 <putch>
putch('N');
 206:	8e e4       	ldi	r24, 0x4E	; 78
 208:	a5 df       	rcall	.-182    	; 0x154 <putch>
putch('D');
 20a:	84 e4       	ldi	r24, 0x44	; 68
 20c:	a3 df       	rcall	.-186    	; 0x154 <putch>
putch('O');
 20e:	8f e4       	ldi	r24, 0x4F	; 79
 210:	a1 df       	rcall	.-190    	; 0x154 <putch>
putch('R');
 212:	82 e5       	ldi	r24, 0x52	; 82
 214:	9f df       	rcall	.-194    	; 0x154 <putch>
putch(' ');
 216:	80 e2       	ldi	r24, 0x20	; 32
 218:	9d df       	rcall	.-198    	; 0x154 <putch>
putch('!');
 21a:	81 e2       	ldi	r24, 0x21	; 33
 21c:	9b df       	rcall	.-202    	; 0x154 <putch>

//disp1(128);
//_delay_ms(1);
disp1(00);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	6e df       	rcall	.-292    	; 0x100 <disp1>

}
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <main>:

//***********main****************************
void main( void )
{

	DDRC=0xFF;
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	84 bb       	out	0x14, r24	; 20
	DDRB=0x3F;
 24a:	8f e3       	ldi	r24, 0x3F	; 63
 24c:	87 bb       	out	0x17, r24	; 23
	DDRD=0xF0;
 24e:	80 ef       	ldi	r24, 0xF0	; 240
 250:	81 bb       	out	0x11, r24	; 17


//*******************
void InitINT(void)
{
	MCUCR=1<<ISC11|1<<ISC01;
 252:	8a e0       	ldi	r24, 0x0A	; 10
 254:	85 bf       	out	0x35, r24	; 53
	GICR=1<<INT1|1<<INT0;
 256:	80 ec       	ldi	r24, 0xC0	; 192
 258:	8b bf       	out	0x3b, r24	; 59


//*********************************************
void RTCInit(void)
{
   ASSR=1<<AS2;	//ext cristal
 25a:	88 e0       	ldi	r24, 0x08	; 8
 25c:	82 bd       	out	0x22, r24	; 34
   TCCR2= 1<<CS22|1<<CS20; //prescaler 128
 25e:	85 e0       	ldi	r24, 0x05	; 5
 260:	85 bd       	out	0x25, r24	; 37
   TIMSK=1<<TOIE2;
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	89 bf       	out	0x39, r24	; 57





	sei();
 266:	78 94       	sei


	disp1(128);
 268:	80 e8       	ldi	r24, 0x80	; 128
 26a:	4a df       	rcall	.-364    	; 0x100 <disp1>
 26c:	88 e8       	ldi	r24, 0x88	; 136
 26e:	93 e1       	ldi	r25, 0x13	; 19
 270:	28 ec       	ldi	r18, 0xC8	; 200
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	31 97       	sbiw	r30, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 27a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 27c:	d9 f7       	brne	.-10     	; 0x274 <main+0x2e>
 27e:	88 e8       	ldi	r24, 0x88	; 136
 280:	93 e1       	ldi	r25, 0x13	; 19
 282:	28 ec       	ldi	r18, 0xC8	; 200
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	f9 01       	movw	r30, r18
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 28e:	d9 f7       	brne	.-10     	; 0x286 <main+0x40>
 290:	88 e8       	ldi	r24, 0x88	; 136
 292:	93 e1       	ldi	r25, 0x13	; 19
 294:	28 ec       	ldi	r18, 0xC8	; 200
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	f9 01       	movw	r30, r18
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a0:	d9 f7       	brne	.-10     	; 0x298 <main+0x52>
 2a2:	88 e8       	ldi	r24, 0x88	; 136
 2a4:	93 e1       	ldi	r25, 0x13	; 19
 2a6:	28 ec       	ldi	r18, 0xC8	; 200
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	f9 01       	movw	r30, r18
 2ac:	31 97       	sbiw	r30, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b2:	d9 f7       	brne	.-10     	; 0x2aa <main+0x64>
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <main+0x6e>

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
