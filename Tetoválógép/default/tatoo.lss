
tatoo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000004a0  00000534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800086  00800086  0000055a  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001d8  00000000  00000000  000005da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000803  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e2  00000000  00000000  00000fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000811  00000000  00000000  00001397  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020b  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027c  00000000  00000000  00001f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000219f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	d1 c0       	rjmp	.+418    	; 0x1ba <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ea       	ldi	r30, 0xA0	; 160
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a6 38       	cpi	r26, 0x86	; 134
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a6 e8       	ldi	r26, 0x86	; 134
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 3a       	cpi	r26, 0xA3	; 163
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	31 d0       	rcall	.+98     	; 0xbc <main>
  5a:	20 c2       	rjmp	.+1088   	; 0x49c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <led>:
char channel=0;

 
void led(char c)
{
if(c) PORTD|=(1<<4);
  5e:	88 23       	and	r24, r24
  60:	11 f0       	breq	.+4      	; 0x66 <led+0x8>
  62:	94 9a       	sbi	0x12, 4	; 18
  64:	08 95       	ret
else PORTD&=~(1<<4);
  66:	94 98       	cbi	0x12, 4	; 18
  68:	08 95       	ret

0000006a <ledch>:
}

void ledch(char a)
{
	if(a==1) PORTD|=(1<<6);
  6a:	81 30       	cpi	r24, 0x01	; 1
  6c:	11 f4       	brne	.+4      	; 0x72 <ledch+0x8>
  6e:	96 9a       	sbi	0x12, 6	; 18
  70:	05 c0       	rjmp	.+10     	; 0x7c <ledch+0x12>
	else PORTD&=~(1<<6);
  72:	96 98       	cbi	0x12, 6	; 18

	if(a==2) PORTD|=(1<<7);
  74:	82 30       	cpi	r24, 0x02	; 2
  76:	11 f4       	brne	.+4      	; 0x7c <ledch+0x12>
  78:	97 9a       	sbi	0x12, 7	; 18
  7a:	08 95       	ret
	else PORTD&=~(1<<7);
  7c:	97 98       	cbi	0x12, 7	; 18
  7e:	08 95       	ret

00000080 <button>:
}


char button() {
	return !(PINB&1);
  80:	86 b3       	in	r24, 0x16	; 22
  82:	80 95       	com	r24
}
  84:	81 70       	andi	r24, 0x01	; 1
  86:	08 95       	ret

00000088 <input_handler>:

char input_handler() {
	if(button() && out_enable==0) {
  88:	b0 99       	sbic	0x16, 0	; 22
  8a:	0a c0       	rjmp	.+20     	; 0xa0 <input_handler+0x18>
  8c:	80 91 86 00 	lds	r24, 0x0086
  90:	88 23       	and	r24, r24
  92:	31 f4       	brne	.+12     	; 0xa0 <input_handler+0x18>
			putstring("<ON>");
  94:	80 e6       	ldi	r24, 0x60	; 96
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	94 d1       	rcall	.+808    	; 0x3c2 <putstring>
			out_enable=1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 86 00 	sts	0x0086, r24
	}

	if( !button() && out_enable==1) {
  a0:	b0 9b       	sbis	0x16, 0	; 22
  a2:	09 c0       	rjmp	.+18     	; 0xb6 <input_handler+0x2e>
  a4:	80 91 86 00 	lds	r24, 0x0086
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	29 f4       	brne	.+10     	; 0xb6 <input_handler+0x2e>
		putstring("<OFF>");
  ac:	85 e6       	ldi	r24, 0x65	; 101
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	88 d1       	rcall	.+784    	; 0x3c2 <putstring>
		out_enable=0;
  b2:	10 92 86 00 	sts	0x0086, r1
	}

	return out_enable;
}
  b6:	80 91 86 00 	lds	r24, 0x0086
  ba:	08 95       	ret

000000bc <main>:
}


//////////////////////////////////////////////////////   
void main(void)
{
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
DDRD|=(1<<4) | (1<<6) | (1<<7);
  c4:	81 b3       	in	r24, 0x11	; 17
  c6:	80 6d       	ori	r24, 0xD0	; 208
  c8:	81 bb       	out	0x11, r24	; 17

SoftI2CInit();	
  ca:	b4 d0       	rcall	.+360    	; 0x234 <SoftI2CInit>
USART_Init ( MYUBRR );
  cc:	83 e3       	ldi	r24, 0x33	; 51
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	69 d1       	rcall	.+722    	; 0x3a4 <USART_Init>
Konfig8bitADC();
  d2:	40 d1       	rcall	.+640    	; 0x354 <Konfig8bitADC>

sei();
  d4:	78 94       	sei
//while(0){ putnum( Beolvas8bitADC(2)); USART_Transmit(  '\n' );
//USART_Transmit(  '\r' );  _delay_ms(1000); }

/////// i2c prog

 putnum(Setpot (20));
  d6:	84 e1       	ldi	r24, 0x14	; 20
  d8:	4f d1       	rcall	.+670    	; 0x378 <Setpot>
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	7c d1       	rcall	.+760    	; 0x3d6 <putnum>

//while(1);putstring("Tattoo firmware: 0.1");


// innentõl jó
USART_Transmit(  '\n' );
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	68 d1       	rcall	.+720    	; 0x3b2 <USART_Transmit>
USART_Transmit(  '\r' );
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	66 d1       	rcall	.+716    	; 0x3b2 <USART_Transmit>
putstring("Tattoo firmware: 0.1");
  e6:	8b e6       	ldi	r24, 0x6B	; 107
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	6b d1       	rcall	.+726    	; 0x3c2 <putstring>
USART_Transmit(  '\n' );
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	61 d1       	rcall	.+706    	; 0x3b2 <USART_Transmit>
USART_Transmit(  '\r' );
  f0:	8d e0       	ldi	r24, 0x0D	; 13
  f2:	5f d1       	rcall	.+702    	; 0x3b2 <USART_Transmit>
			channel = tomb[5] -48;

			volt_1=tomb[0] -48;
			volt_2=tomb[1] -48;
			volt_3=tomb[2] -48;
			voltage= 100*volt_1 + 10*volt_2 + volt_3;
  f4:	04 e6       	ldi	r16, 0x64	; 100
  f6:	1a e0       	ldi	r17, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  f8:	c0 e2       	ldi	r28, 0x20	; 32
  fa:	de e4       	ldi	r29, 0x4E	; 78
USART_Transmit(  '\n' );
USART_Transmit(  '\r' );

while(1){

	if (ready==1) {
  fc:	80 91 89 00 	lds	r24, 0x0089
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	f1 f5       	brne	.+124    	; 0x180 <main+0xc4>
		
		if ( (tomb[3]=='C') && (tomb[4]=='H') )	{	
 104:	80 91 95 00 	lds	r24, 0x0095
 108:	90 91 96 00 	lds	r25, 0x0096
 10c:	83 34       	cpi	r24, 0x43	; 67
 10e:	91 05       	cpc	r25, r1
 110:	a9 f5       	brne	.+106    	; 0x17c <main+0xc0>
 112:	80 91 97 00 	lds	r24, 0x0097
 116:	90 91 98 00 	lds	r25, 0x0098
 11a:	88 34       	cpi	r24, 0x48	; 72
 11c:	91 05       	cpc	r25, r1
 11e:	71 f5       	brne	.+92     	; 0x17c <main+0xc0>
			channel = tomb[5] -48;
 120:	80 91 99 00 	lds	r24, 0x0099
 124:	90 91 9a 00 	lds	r25, 0x009A
 128:	c0 97       	sbiw	r24, 0x30	; 48
 12a:	80 93 8e 00 	sts	0x008E, r24

			volt_1=tomb[0] -48;
 12e:	80 91 8f 00 	lds	r24, 0x008F
 132:	90 91 90 00 	lds	r25, 0x0090
 136:	c0 97       	sbiw	r24, 0x30	; 48
 138:	80 93 8a 00 	sts	0x008A, r24
			volt_2=tomb[1] -48;
 13c:	20 91 91 00 	lds	r18, 0x0091
 140:	30 91 92 00 	lds	r19, 0x0092
 144:	20 53       	subi	r18, 0x30	; 48
 146:	30 40       	sbci	r19, 0x00	; 0
 148:	20 93 8b 00 	sts	0x008B, r18
			volt_3=tomb[2] -48;
 14c:	40 91 93 00 	lds	r20, 0x0093
 150:	50 91 94 00 	lds	r21, 0x0094
 154:	40 53       	subi	r20, 0x30	; 48
 156:	50 40       	sbci	r21, 0x00	; 0
 158:	40 93 8c 00 	sts	0x008C, r20
			voltage= 100*volt_1 + 10*volt_2 + volt_3;
 15c:	80 9f       	mul	r24, r16
 15e:	c0 01       	movw	r24, r0
 160:	11 24       	eor	r1, r1
 162:	21 9f       	mul	r18, r17
 164:	90 01       	movw	r18, r0
 166:	11 24       	eor	r1, r1
 168:	82 0f       	add	r24, r18
 16a:	84 0f       	add	r24, r20
 16c:	80 93 8d 00 	sts	0x008D, r24

			//putnum(voltage);putnum(channel); // itt állítom majd be a potit
			putnum(Setpot (voltage));
 170:	03 d1       	rcall	.+518    	; 0x378 <Setpot>
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	30 d1       	rcall	.+608    	; 0x3d6 <putnum>
			putstring("<ACK>");
 176:	80 e8       	ldi	r24, 0x80	; 128
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	23 d1       	rcall	.+582    	; 0x3c2 <putstring>
		}
		ready=0;
 17c:	10 92 89 00 	sts	0x0089, r1
	}

	input_handler();
 180:	83 df       	rcall	.-250    	; 0x88 <input_handler>

	if (out_enable==1) {
 182:	80 91 86 00 	lds	r24, 0x0086
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	19 f4       	brne	.+6      	; 0x190 <main+0xd4>
		ledch(channel);
 18a:	80 91 8e 00 	lds	r24, 0x008E
 18e:	6d df       	rcall	.-294    	; 0x6a <ledch>
		}
	if (out_enable==0) {
 190:	80 91 86 00 	lds	r24, 0x0086
 194:	88 23       	and	r24, r24
 196:	09 f4       	brne	.+2      	; 0x19a <main+0xde>
		ledch(0);
 198:	68 df       	rcall	.-304    	; 0x6a <ledch>
		}


	if(out_enable){ USART_Transmit(  '<' ); putnum( Beolvas8bitADC(2)); USART_Transmit(  '>' ); }
 19a:	80 91 86 00 	lds	r24, 0x0086
 19e:	88 23       	and	r24, r24
 1a0:	41 f0       	breq	.+16     	; 0x1b2 <main+0xf6>
 1a2:	8c e3       	ldi	r24, 0x3C	; 60
 1a4:	06 d1       	rcall	.+524    	; 0x3b2 <USART_Transmit>
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	db d0       	rcall	.+438    	; 0x360 <Beolvas8bitADC>
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	14 d1       	rcall	.+552    	; 0x3d6 <putnum>
 1ae:	8e e3       	ldi	r24, 0x3E	; 62
 1b0:	00 d1       	rcall	.+512    	; 0x3b2 <USART_Transmit>
 1b2:	ce 01       	movw	r24, r28
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0xf8>
 1b8:	a1 cf       	rjmp	.-190    	; 0xfc <main+0x40>

000001ba <__vector_11>:



//******uart_int**********************************************
ISR(USART_RXC_vect)
{
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	2f 93       	push	r18
 1c6:	3f 93       	push	r19
 1c8:	4f 93       	push	r20
 1ca:	5f 93       	push	r21
 1cc:	6f 93       	push	r22
 1ce:	7f 93       	push	r23
 1d0:	8f 93       	push	r24
 1d2:	9f 93       	push	r25
 1d4:	af 93       	push	r26
 1d6:	bf 93       	push	r27
 1d8:	ef 93       	push	r30
 1da:	ff 93       	push	r31

	char x;
	x=UART_Receive();
 1dc:	ee d0       	rcall	.+476    	; 0x3ba <UART_Receive>
 1de:	98 2f       	mov	r25, r24

	if(x=='>') ready=1;
 1e0:	8e 33       	cpi	r24, 0x3E	; 62
 1e2:	21 f4       	brne	.+8      	; 0x1ec <__vector_11+0x32>
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 89 00 	sts	0x0089, r24
 1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <__vector_11+0x3c>
	if(x=='<') { index=0; return; }
 1ec:	8c 33       	cpi	r24, 0x3C	; 60
 1ee:	19 f4       	brne	.+6      	; 0x1f6 <__vector_11+0x3c>
 1f0:	10 92 88 00 	sts	0x0088, r1
 1f4:	0e c0       	rjmp	.+28     	; 0x212 <__vector_11+0x58>

	tomb[index]=x;
 1f6:	e0 91 88 00 	lds	r30, 0x0088
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	ee 0f       	add	r30, r30
 1fe:	ff 1f       	adc	r31, r31
 200:	e1 57       	subi	r30, 0x71	; 113
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	90 83       	st	Z, r25
 206:	11 82       	std	Z+1, r1	; 0x01
	index++;
 208:	80 91 88 00 	lds	r24, 0x0088
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	80 93 88 00 	sts	0x0088, r24
}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <SoftI2CInit>:
#define Q_DEL _delay_loop_2(3)
#define H_DEL _delay_loop_2(5)

void SoftI2CInit()
{
	SDAPORT&=(1<<SDA);
 234:	85 b3       	in	r24, 0x15	; 21
 236:	80 71       	andi	r24, 0x10	; 16
 238:	85 bb       	out	0x15, r24	; 21
	SCLPORT&=(1<<SCL);
 23a:	85 b3       	in	r24, 0x15	; 21
 23c:	80 72       	andi	r24, 0x20	; 32
 23e:	85 bb       	out	0x15, r24	; 21
	
	SOFT_I2C_SDA_HIGH;	
 240:	a4 98       	cbi	0x14, 4	; 20
	SOFT_I2C_SCL_HIGH;	
 242:	a5 98       	cbi	0x14, 5	; 20
		
}
 244:	08 95       	ret

00000246 <SoftI2CStart>:
void SoftI2CStart()
{
	SOFT_I2C_SCL_HIGH;
 246:	a5 98       	cbi	0x14, 5	; 20
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <SoftI2CStart+0x8>
	H_DEL;
	
	SOFT_I2C_SDA_LOW;	
 252:	a4 9a       	sbi	0x14, 4	; 20
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <SoftI2CStart+0xe>
	H_DEL;  	
}
 258:	08 95       	ret

0000025a <SoftI2CStop>:

void SoftI2CStop()
{
	 SOFT_I2C_SDA_LOW;
 25a:	a4 9a       	sbi	0x14, 4	; 20
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	fc 01       	movw	r30, r24
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <SoftI2CStop+0x8>
	 H_DEL;
	 SOFT_I2C_SCL_HIGH;
 266:	a5 98       	cbi	0x14, 5	; 20
 268:	e3 e0       	ldi	r30, 0x03	; 3
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <SoftI2CStop+0x12>
	 Q_DEL;
	 SOFT_I2C_SDA_HIGH;
 270:	a4 98       	cbi	0x14, 4	; 20
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <SoftI2CStop+0x18>
	 H_DEL;
}
 276:	08 95       	ret

00000278 <SoftI2CWriteByte>:

uint8_t SoftI2CWriteByte(uint8_t data)
{
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	43 e0       	ldi	r20, 0x03	; 3
 27c:	50 e0       	ldi	r21, 0x00	; 0
	 
	 uint8_t i;
	 	
	 for(i=0;i<8;i++)
	 {
		SOFT_I2C_SCL_LOW;
 27e:	25 e0       	ldi	r18, 0x05	; 5
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	a5 9a       	sbi	0x14, 5	; 20
 284:	fa 01       	movw	r30, r20
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <SoftI2CWriteByte+0xe>
		Q_DEL;
		
		if(data & 0x80)
 28a:	87 ff       	sbrs	r24, 7
 28c:	02 c0       	rjmp	.+4      	; 0x292 <SoftI2CWriteByte+0x1a>
			SOFT_I2C_SDA_HIGH;
 28e:	a4 98       	cbi	0x14, 4	; 20
 290:	01 c0       	rjmp	.+2      	; 0x294 <SoftI2CWriteByte+0x1c>
		else
			SOFT_I2C_SDA_LOW;	
 292:	a4 9a       	sbi	0x14, 4	; 20
 294:	f9 01       	movw	r30, r18
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <SoftI2CWriteByte+0x1e>
		
		H_DEL;
		
		SOFT_I2C_SCL_HIGH;
 29a:	a5 98       	cbi	0x14, 5	; 20
 29c:	f9 01       	movw	r30, r18
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <SoftI2CWriteByte+0x26>
		H_DEL;
		
		while((SCLPIN & (1<<SCL))==0);
 2a2:	9d 9b       	sbis	0x13, 5	; 19
 2a4:	fe cf       	rjmp	.-4      	; 0x2a2 <SoftI2CWriteByte+0x2a>
uint8_t SoftI2CWriteByte(uint8_t data)
{
	 
	 uint8_t i;
	 	
	 for(i=0;i<8;i++)
 2a6:	9f 5f       	subi	r25, 0xFF	; 255
 2a8:	98 30       	cpi	r25, 0x08	; 8
 2aa:	11 f0       	breq	.+4      	; 0x2b0 <SoftI2CWriteByte+0x38>
		SOFT_I2C_SCL_HIGH;
		H_DEL;
		
		while((SCLPIN & (1<<SCL))==0);
			
		data=data<<1;
 2ac:	88 0f       	add	r24, r24
 2ae:	e9 cf       	rjmp	.-46     	; 0x282 <SoftI2CWriteByte+0xa>
	}
	 
	//The 9th clock (ACK Phase)
	SOFT_I2C_SCL_LOW;
 2b0:	a5 9a       	sbi	0x14, 5	; 20
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <SoftI2CWriteByte+0x3e>
	Q_DEL;
		
	SOFT_I2C_SDA_HIGH;		
 2ba:	a4 98       	cbi	0x14, 4	; 20
 2bc:	25 e0       	ldi	r18, 0x05	; 5
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	c9 01       	movw	r24, r18
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <SoftI2CWriteByte+0x4a>
	H_DEL;
		
	SOFT_I2C_SCL_HIGH;
 2c6:	a5 98       	cbi	0x14, 5	; 20
 2c8:	c9 01       	movw	r24, r18
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <SoftI2CWriteByte+0x52>
	H_DEL;	
	
	uint8_t ack=!(SDAPIN & (1<<SDA));
 2ce:	83 b3       	in	r24, 0x13	; 19
	
	SOFT_I2C_SCL_LOW;
 2d0:	a5 9a       	sbi	0x14, 5	; 20
 2d2:	f9 01       	movw	r30, r18
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <SoftI2CWriteByte+0x5c>
 2d8:	82 95       	swap	r24
 2da:	8f 70       	andi	r24, 0x0F	; 15
 2dc:	80 95       	com	r24
	H_DEL;
	
	return ack;
	 
}
 2de:	81 70       	andi	r24, 0x01	; 1
 2e0:	08 95       	ret

000002e2 <SoftI2CReadByte>:
 
 
uint8_t SoftI2CReadByte(uint8_t ack)
{
 2e2:	58 2f       	mov	r21, r24
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	65 e0       	ldi	r22, 0x05	; 5
 2ec:	70 e0       	ldi	r23, 0x00	; 0
		H_DEL;
			
		while((SCLPIN & (1<<SCL))==0);
		
		if(SDAPIN &(1<<SDA))
			data|=(0x80>>i);
 2ee:	e0 e8       	ldi	r30, 0x80	; 128
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t i;
			
	for(i=0;i<8;i++)
	{
			
		SOFT_I2C_SCL_LOW;
 2f2:	a5 9a       	sbi	0x14, 5	; 20
 2f4:	cb 01       	movw	r24, r22
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <SoftI2CReadByte+0x14>
		H_DEL;
		SOFT_I2C_SCL_HIGH;
 2fa:	a5 98       	cbi	0x14, 5	; 20
 2fc:	cb 01       	movw	r24, r22
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <SoftI2CReadByte+0x1c>
		H_DEL;
			
		while((SCLPIN & (1<<SCL))==0);
 302:	9d 9b       	sbis	0x13, 5	; 19
 304:	fe cf       	rjmp	.-4      	; 0x302 <SoftI2CReadByte+0x20>
		
		if(SDAPIN &(1<<SDA))
 306:	9c 9b       	sbis	0x13, 4	; 19
 308:	08 c0       	rjmp	.+16     	; 0x31a <SoftI2CReadByte+0x38>
			data|=(0x80>>i);
 30a:	cf 01       	movw	r24, r30
 30c:	02 2e       	mov	r0, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <SoftI2CReadByte+0x32>
 310:	95 95       	asr	r25
 312:	87 95       	ror	r24
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <SoftI2CReadByte+0x2e>
 318:	48 2b       	or	r20, r24
 31a:	2f 5f       	subi	r18, 0xFF	; 255
 31c:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t SoftI2CReadByte(uint8_t ack)
{
	uint8_t data=0x00;
	uint8_t i;
			
	for(i=0;i<8;i++)
 31e:	28 30       	cpi	r18, 0x08	; 8
 320:	31 05       	cpc	r19, r1
 322:	39 f7       	brne	.-50     	; 0x2f2 <SoftI2CReadByte+0x10>
		if(SDAPIN &(1<<SDA))
			data|=(0x80>>i);
			
	}
		
	SOFT_I2C_SCL_LOW;
 324:	a5 9a       	sbi	0x14, 5	; 20
 326:	83 e0       	ldi	r24, 0x03	; 3
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <SoftI2CReadByte+0x48>
	Q_DEL;						//Soft_I2C_Put_Ack
	
	if(ack)
 32e:	55 23       	and	r21, r21
 330:	11 f0       	breq	.+4      	; 0x336 <SoftI2CReadByte+0x54>
	{
		SOFT_I2C_SDA_LOW;	
 332:	a4 9a       	sbi	0x14, 4	; 20
 334:	01 c0       	rjmp	.+2      	; 0x338 <SoftI2CReadByte+0x56>
	}
	else
	{
		SOFT_I2C_SDA_HIGH;
 336:	a4 98       	cbi	0x14, 4	; 20
 338:	85 e0       	ldi	r24, 0x05	; 5
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	fc 01       	movw	r30, r24
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <SoftI2CReadByte+0x5c>
	}	
	H_DEL;
	
	SOFT_I2C_SCL_HIGH;
 342:	a5 98       	cbi	0x14, 5	; 20
 344:	fc 01       	movw	r30, r24
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <SoftI2CReadByte+0x64>
	H_DEL;
	
	SOFT_I2C_SCL_LOW;
 34a:	a5 9a       	sbi	0x14, 5	; 20
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <SoftI2CReadByte+0x6a>
	H_DEL;
			
	return data;
	
}
 350:	84 2f       	mov	r24, r20
 352:	08 95       	ret

00000354 <Konfig8bitADC>:
}

void Konfig8bitADC()        // ADC konfiguralas (beallitas)
{
//    ADMUX = 0b01100000;    // Vcc mint referencia, balra rendezett ADC eredmeny
           ADMUX |= (1<<REFS0)|(1<<ADLAR);    // Vcc mint referencia, balra rendezett ADC eredmeny
 354:	87 b1       	in	r24, 0x07	; 7
 356:	80 66       	ori	r24, 0x60	; 96
 358:	87 b9       	out	0x07, r24	; 7
//    ADCSRA = 0b10000011;    // ADC engedelyezese, ADC eloosztas = 8 (125 KHz)
           ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);    // ADC engedelyezese, ADC eloosztas = 8 (125 KHz)
 35a:	83 e8       	ldi	r24, 0x83	; 131
 35c:	86 b9       	out	0x06, r24	; 6
}
 35e:	08 95       	ret

00000360 <Beolvas8bitADC>:
 
unsigned char Beolvas8bitADC(unsigned char csatorna)
{
           ADMUX = (ADMUX & 0b11110000) | csatorna;
 360:	97 b1       	in	r25, 0x07	; 7
 362:	90 7f       	andi	r25, 0xF0	; 240
 364:	98 2b       	or	r25, r24
 366:	97 b9       	out	0x07, r25	; 7
           ADCSRA |= (1<<ADSC);    // ADC konverzio elinditasa
 368:	36 9a       	sbi	0x06, 6	; 6
           while (ADCSRA & (1<<ADSC));        // varas az atalakitasra
 36a:	36 99       	sbic	0x06, 6	; 6
 36c:	fe cf       	rjmp	.-4      	; 0x36a <Beolvas8bitADC+0xa>
           ADCSRA |= (1<<ADSC);          // konverzió elindítás
 36e:	36 9a       	sbi	0x06, 6	; 6
           while (ADCSRA & (1<<ADSC));        // varas az atalakitasra
 370:	36 99       	sbic	0x06, 6	; 6
 372:	fe cf       	rjmp	.-4      	; 0x370 <Beolvas8bitADC+0x10>
           return (ADCH);        // ADC ertek visszaadasa (csak a felso 8 bit (ADCH), az also 2 zajos bit elhagyasa)
 374:	85 b1       	in	r24, 0x05	; 5
}
 376:	08 95       	ret

00000378 <Setpot>:
#include "routines.h"



char Setpot (char value) {
 378:	ff 92       	push	r15
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	08 2f       	mov	r16, r24
	char test=0;
	SoftI2CStart();
 380:	62 df       	rcall	.-316    	; 0x246 <SoftI2CStart>
	test+= SoftI2CWriteByte( 0b01011000);//address bytes
 382:	88 e5       	ldi	r24, 0x58	; 88
 384:	79 df       	rcall	.-270    	; 0x278 <SoftI2CWriteByte>
 386:	f8 2e       	mov	r15, r24
	test+= SoftI2CWriteByte( 0b00000000);//address bytes
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	76 df       	rcall	.-276    	; 0x278 <SoftI2CWriteByte>
 38c:	18 2f       	mov	r17, r24
	test+= SoftI2CWriteByte( value);
 38e:	80 2f       	mov	r24, r16
 390:	73 df       	rcall	.-282    	; 0x278 <SoftI2CWriteByte>
 392:	08 2f       	mov	r16, r24

char Setpot (char value) {
	char test=0;
	SoftI2CStart();
	test+= SoftI2CWriteByte( 0b01011000);//address bytes
	test+= SoftI2CWriteByte( 0b00000000);//address bytes
 394:	1f 0d       	add	r17, r15
	test+= SoftI2CWriteByte( value);
	SoftI2CStop();
 396:	61 df       	rcall	.-318    	; 0x25a <SoftI2CStop>
	return test;
}
 398:	81 2f       	mov	r24, r17
 39a:	80 0f       	add	r24, r16
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	08 95       	ret

000003a4 <USART_Init>:

//*******uart_init******************************************************
void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
 3a4:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
 3a6:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN)| (1 << RXCIE) ;
 3a8:	88 e9       	ldi	r24, 0x98	; 152
 3aa:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
 3ac:	86 e8       	ldi	r24, 0x86	; 134
 3ae:	80 bd       	out	0x20, r24	; 32
}
 3b0:	08 95       	ret

000003b2 <USART_Transmit>:

//********uart_transmit************************
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
 3b2:	5d 9b       	sbis	0x0b, 5	; 11
 3b4:	fe cf       	rjmp	.-4      	; 0x3b2 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR = data;
 3b6:	8c b9       	out	0x0c, r24	; 12
}
 3b8:	08 95       	ret

000003ba <UART_Receive>:

//**********uart_receive**********************************************
char UART_Receive() // Ez a fuggveny a beerkezo adatokat kiolvassa az UDR regiszter bejovo pufferebol
{
  while(!(UCSRA & (1<<RXC)))  // Varakozas amig nincs uj bejovo adat
 3ba:	5f 9b       	sbis	0x0b, 7	; 11
 3bc:	fe cf       	rjmp	.-4      	; 0x3ba <UART_Receive>
  {
     //  Varakozas
  }
  //Most mar van beerkezett adat, amit kiolvasunk a pufferbol
  return UDR;
 3be:	8c b1       	in	r24, 0x0c	; 12
}
 3c0:	08 95       	ret

000003c2 <putstring>:



//***********uart_string************************** putstring("hello");
void putstring(const char *ptr)
{
 3c2:	fc 01       	movw	r30, r24
 3c4:	04 c0       	rjmp	.+8      	; 0x3ce <putstring+0xc>

//********uart_transmit************************
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
 3c6:	5d 9b       	sbis	0x0b, 5	; 11
 3c8:	fe cf       	rjmp	.-4      	; 0x3c6 <putstring+0x4>
//***********uart_string************************** putstring("hello");
void putstring(const char *ptr)
{
	  while(*ptr)
	  {
	   USART_Transmit( *(ptr++));  
 3ca:	31 96       	adiw	r30, 0x01	; 1
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
	/* Put data into buffer, sends the data */
	UDR = data;
 3cc:	8c b9       	out	0x0c, r24	; 12


//***********uart_string************************** putstring("hello");
void putstring(const char *ptr)
{
	  while(*ptr)
 3ce:	80 81       	ld	r24, Z
 3d0:	88 23       	and	r24, r24
 3d2:	c9 f7       	brne	.-14     	; 0x3c6 <putstring+0x4>
	  {
	   USART_Transmit( *(ptr++));  
	  }
}
 3d4:	08 95       	ret

000003d6 <putnum>:

//***********uart_num****************** putnum(1023)
void putnum(unsigned int i)
{
 3d6:	0f 93       	push	r16
 3d8:	1f 93       	push	r17
 3da:	df 93       	push	r29
 3dc:	cf 93       	push	r28
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	27 97       	sbiw	r28, 0x07	; 7
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
	unsigned char c[7]; 
	itoa(i, c, 10); 
 3ee:	8e 01       	movw	r16, r28
 3f0:	0f 5f       	subi	r16, 0xFF	; 255
 3f2:	1f 4f       	sbci	r17, 0xFF	; 255
 3f4:	b8 01       	movw	r22, r16
 3f6:	4a e0       	ldi	r20, 0x0A	; 10
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	0d d0       	rcall	.+26     	; 0x416 <itoa>
	putstring(c);
 3fc:	c8 01       	movw	r24, r16
 3fe:	e1 df       	rcall	.-62     	; 0x3c2 <putstring>
}
 400:	27 96       	adiw	r28, 0x07	; 7
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
 40c:	cf 91       	pop	r28
 40e:	df 91       	pop	r29
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	08 95       	ret

00000416 <itoa>:
 416:	fb 01       	movw	r30, r22
 418:	9f 01       	movw	r18, r30
 41a:	e8 94       	clt
 41c:	42 30       	cpi	r20, 0x02	; 2
 41e:	bc f0       	brlt	.+46     	; 0x44e <itoa+0x38>
 420:	45 32       	cpi	r20, 0x25	; 37
 422:	ac f4       	brge	.+42     	; 0x44e <itoa+0x38>
 424:	4a 30       	cpi	r20, 0x0A	; 10
 426:	29 f4       	brne	.+10     	; 0x432 <itoa+0x1c>
 428:	97 fb       	bst	r25, 7
 42a:	1e f4       	brtc	.+6      	; 0x432 <itoa+0x1c>
 42c:	90 95       	com	r25
 42e:	81 95       	neg	r24
 430:	9f 4f       	sbci	r25, 0xFF	; 255
 432:	64 2f       	mov	r22, r20
 434:	77 27       	eor	r23, r23
 436:	1e d0       	rcall	.+60     	; 0x474 <__udivmodhi4>
 438:	80 5d       	subi	r24, 0xD0	; 208
 43a:	8a 33       	cpi	r24, 0x3A	; 58
 43c:	0c f0       	brlt	.+2      	; 0x440 <itoa+0x2a>
 43e:	89 5d       	subi	r24, 0xD9	; 217
 440:	81 93       	st	Z+, r24
 442:	cb 01       	movw	r24, r22
 444:	00 97       	sbiw	r24, 0x00	; 0
 446:	a9 f7       	brne	.-22     	; 0x432 <itoa+0x1c>
 448:	16 f4       	brtc	.+4      	; 0x44e <itoa+0x38>
 44a:	5d e2       	ldi	r21, 0x2D	; 45
 44c:	51 93       	st	Z+, r21
 44e:	10 82       	st	Z, r1
 450:	c9 01       	movw	r24, r18
 452:	00 c0       	rjmp	.+0      	; 0x454 <strrev>

00000454 <strrev>:
 454:	dc 01       	movw	r26, r24
 456:	fc 01       	movw	r30, r24
 458:	67 2f       	mov	r22, r23
 45a:	71 91       	ld	r23, Z+
 45c:	77 23       	and	r23, r23
 45e:	e1 f7       	brne	.-8      	; 0x458 <strrev+0x4>
 460:	32 97       	sbiw	r30, 0x02	; 2
 462:	04 c0       	rjmp	.+8      	; 0x46c <__stack+0xd>
 464:	7c 91       	ld	r23, X
 466:	6d 93       	st	X+, r22
 468:	70 83       	st	Z, r23
 46a:	62 91       	ld	r22, -Z
 46c:	ae 17       	cp	r26, r30
 46e:	bf 07       	cpc	r27, r31
 470:	c8 f3       	brcs	.-14     	; 0x464 <__stack+0x5>
 472:	08 95       	ret

00000474 <__udivmodhi4>:
 474:	aa 1b       	sub	r26, r26
 476:	bb 1b       	sub	r27, r27
 478:	51 e1       	ldi	r21, 0x11	; 17
 47a:	07 c0       	rjmp	.+14     	; 0x48a <__udivmodhi4_ep>

0000047c <__udivmodhi4_loop>:
 47c:	aa 1f       	adc	r26, r26
 47e:	bb 1f       	adc	r27, r27
 480:	a6 17       	cp	r26, r22
 482:	b7 07       	cpc	r27, r23
 484:	10 f0       	brcs	.+4      	; 0x48a <__udivmodhi4_ep>
 486:	a6 1b       	sub	r26, r22
 488:	b7 0b       	sbc	r27, r23

0000048a <__udivmodhi4_ep>:
 48a:	88 1f       	adc	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	5a 95       	dec	r21
 490:	a9 f7       	brne	.-22     	; 0x47c <__udivmodhi4_loop>
 492:	80 95       	com	r24
 494:	90 95       	com	r25
 496:	bc 01       	movw	r22, r24
 498:	cd 01       	movw	r24, r26
 49a:	08 95       	ret

0000049c <_exit>:
 49c:	f8 94       	cli

0000049e <__stop_program>:
 49e:	ff cf       	rjmp	.-2      	; 0x49e <__stop_program>
