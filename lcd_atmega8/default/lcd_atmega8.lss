
lcd_atmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000372  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800062  00800062  00000408  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f1  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f7  00000000  00000000  00000539  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000031e  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000656  00000000  00000000  0000114e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  000017a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001a2  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ee  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	3c c0       	rjmp	.+120    	; 0x8c <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e7       	ldi	r30, 0x72	; 114
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 36       	cpi	r26, 0x6A	; 106
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	42 d0       	rcall	.+132    	; 0xde <main>
  5a:	89 c1       	rjmp	.+786    	; 0x36e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <Beolvas8bitADC>:
//***************************************************
unsigned char Beolvas8bitADC(unsigned char csatorna)
   
      {
  
      ADMUX = (ADMUX & 0b11110000) | csatorna;   // ADC csatorna kivalasztasa
  5e:	97 b1       	in	r25, 0x07	; 7
  60:	90 7f       	andi	r25, 0xF0	; 240
  62:	98 2b       	or	r25, r24
  64:	97 b9       	out	0x07, r25	; 7
      ADCSRA |= (1<<ADSC);    // ADC konverzio elinditasa
  66:	36 9a       	sbi	0x06, 6	; 6
      while (ADCSRA & (1<<ADSC));    // varas az atalakitasra
  68:	36 99       	sbic	0x06, 6	; 6
  6a:	fe cf       	rjmp	.-4      	; 0x68 <Beolvas8bitADC+0xa>
      ADCSRA |= (1<<ADSC);         // konverzió elindítás
  6c:	36 9a       	sbi	0x06, 6	; 6
      while (ADCSRA & (1<<ADSC));    // varas az atalakitasra
  6e:	36 99       	sbic	0x06, 6	; 6
  70:	fe cf       	rjmp	.-4      	; 0x6e <Beolvas8bitADC+0x10>
      return (ADCH);     // ADC ertek visszaadasa (csak a felso 8 bit (ADCH), az also 2 zajos bit elhagyasa)
  72:	85 b1       	in	r24, 0x05	; 5
  
      }
  74:	08 95       	ret

00000076 <InitADC>:

//*********************************************
void InitADC(void)
{
ADMUX |= (1<<REFS0)|(1<<ADLAR);  
  76:	87 b1       	in	r24, 0x07	; 7
  78:	80 66       	ori	r24, 0x60	; 96
  7a:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
  7c:	83 e8       	ldi	r24, 0x83	; 131
  7e:	86 b9       	out	0x06, r24	; 6
}
  80:	08 95       	ret

00000082 <InitTIMER>:


void InitTIMER(void)
{
TCCR0=1<<CS01|1<<CS00;	//órajel 64-es elõosztás
  82:	83 e0       	ldi	r24, 0x03	; 3
  84:	83 bf       	out	0x33, r24	; 51
TIMSK=1<<TOIE0;	//timer enable
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	89 bf       	out	0x39, r24	; 57
}
  8a:	08 95       	ret

0000008c <__vector_9>:



//**************************************
ISR(TIMER0_OVF_vect){
  8c:	1f 92       	push	r1
  8e:	0f 92       	push	r0
  90:	0f b6       	in	r0, 0x3f	; 63
  92:	0f 92       	push	r0
  94:	11 24       	eor	r1, r1
  96:	2f 93       	push	r18
  98:	8f 93       	push	r24
  9a:	9f 93       	push	r25
timer++;
  9c:	80 91 62 00 	lds	r24, 0x0062
  a0:	90 91 63 00 	lds	r25, 0x0063
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	90 93 63 00 	sts	0x0063, r25
  aa:	80 93 62 00 	sts	0x0062, r24
if(timer==450){timer=0; sec++;}
  ae:	80 91 62 00 	lds	r24, 0x0062
  b2:	90 91 63 00 	lds	r25, 0x0063
  b6:	82 5c       	subi	r24, 0xC2	; 194
  b8:	91 40       	sbci	r25, 0x01	; 1
  ba:	49 f4       	brne	.+18     	; 0xce <__vector_9+0x42>
  bc:	10 92 63 00 	sts	0x0063, r1
  c0:	10 92 62 00 	sts	0x0062, r1
  c4:	80 91 64 00 	lds	r24, 0x0064
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 64 00 	sts	0x0064, r24

//7372800/64/256/450=1s !!!
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	2f 91       	pop	r18
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <main>:
}


void InitTIMER(void)
{
TCCR0=1<<CS01|1<<CS00;	//órajel 64-es elõosztás
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	83 bf       	out	0x33, r24	; 51
TIMSK=1<<TOIE0;	//timer enable
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	89 bf       	out	0x39, r24	; 57
      }

//*********************************************
void InitADC(void)
{
ADMUX |= (1<<REFS0)|(1<<ADLAR);  
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	80 66       	ori	r24, 0x60	; 96
  ea:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
  ec:	83 e8       	ldi	r24, 0x83	; 131
  ee:	86 b9       	out	0x06, r24	; 6
InitTIMER();

InitADC();


InitLCD(LS_BLINK|LS_ULINE);	//Initialize LCD module
  f0:	83 e0       	ldi	r24, 0x03	; 3
  f2:	7e d0       	rcall	.+252    	; 0x1f0 <InitLCD>


LCDClear();	//Clear the screen
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	54 d0       	rcall	.+168    	; 0x1a2 <LCDByte>
		

	}
	*/

DDRD=255;
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	81 bb       	out	0x11, r24	; 17

	while(1)
	{
	PORTD=0b00001001;
  fe:	79 e0       	ldi	r23, 0x09	; 9
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 100:	28 ec       	ldi	r18, 0xC8	; 200
 102:	30 e0       	ldi	r19, 0x00	; 0
	_delay_ms(100);
		PORTD=0b00001010;
 104:	6a e0       	ldi	r22, 0x0A	; 10
	_delay_ms(100);
		PORTD=0b00000110;
 106:	56 e0       	ldi	r21, 0x06	; 6
	_delay_ms(100);
		PORTD=0b00000101;
 108:	45 e0       	ldi	r20, 0x05	; 5

DDRD=255;

	while(1)
	{
	PORTD=0b00001001;
 10a:	72 bb       	out	0x12, r23	; 18
 10c:	88 ee       	ldi	r24, 0xE8	; 232
 10e:	93 e0       	ldi	r25, 0x03	; 3
 110:	f9 01       	movw	r30, r18
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 116:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 118:	d9 f7       	brne	.-10     	; 0x110 <main+0x32>
	_delay_ms(100);
		PORTD=0b00001010;
 11a:	62 bb       	out	0x12, r22	; 18
 11c:	88 ee       	ldi	r24, 0xE8	; 232
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	f9 01       	movw	r30, r18
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 126:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 128:	d9 f7       	brne	.-10     	; 0x120 <main+0x42>
	_delay_ms(100);
		PORTD=0b00000110;
 12a:	52 bb       	out	0x12, r21	; 18
 12c:	88 ee       	ldi	r24, 0xE8	; 232
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	f9 01       	movw	r30, r18
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 136:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 138:	d9 f7       	brne	.-10     	; 0x130 <main+0x52>
	_delay_ms(100);
		PORTD=0b00000101;
 13a:	42 bb       	out	0x12, r20	; 18
 13c:	88 ee       	ldi	r24, 0xE8	; 232
 13e:	93 e0       	ldi	r25, 0x03	; 3
 140:	f9 01       	movw	r30, r18
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 146:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 148:	d9 f7       	brne	.-10     	; 0x140 <main+0x62>
 14a:	df cf       	rjmp	.-66     	; 0x10a <main+0x2c>

0000014c <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 14c:	87 b3       	in	r24, 0x17	; 23
 14e:	80 7f       	andi	r24, 0xF0	; 240
 150:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
 152:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
 154:	95 98       	cbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	32 e0       	ldi	r19, 0x02	; 2
 160:	97 9a       	sbi	0x12, 7	; 18
 162:	82 2f       	mov	r24, r18
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 168:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 16a:	82 95       	swap	r24
 16c:	80 7f       	andi	r24, 0xF0	; 240
 16e:	92 2f       	mov	r25, r18
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 174:	97 98       	cbi	0x12, 7	; 18
 176:	93 2f       	mov	r25, r19
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
 17c:	97 9a       	sbi	0x12, 7	; 18
 17e:	92 2f       	mov	r25, r18
 180:	9a 95       	dec	r25
 182:	f1 f7       	brne	.-4      	; 0x180 <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 184:	96 b3       	in	r25, 0x16	; 22
 186:	92 2f       	mov	r25, r18
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 18c:	97 98       	cbi	0x12, 7	; 18
 18e:	93 2f       	mov	r25, r19
 190:	9a 95       	dec	r25
 192:	f1 f7       	brne	.-4      	; 0x190 <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 194:	87 fd       	sbrc	r24, 7
 196:	e4 cf       	rjmp	.-56     	; 0x160 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 198:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 19a:	87 b3       	in	r24, 0x17	; 23
 19c:	8f 60       	ori	r24, 0x0F	; 15
 19e:	87 bb       	out	0x17, r24	; 23

}
 1a0:	08 95       	ret

000001a2 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 1a2:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 1a4:	66 23       	and	r22, r22
 1a6:	11 f4       	brne	.+4      	; 0x1ac <LCDByte+0xa>
	CLEAR_RS();
 1a8:	95 98       	cbi	0x12, 5	; 18
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <LCDByte+0xc>
else
	SET_RS();
 1ac:	95 9a       	sbi	0x12, 5	; 18
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
 1b4:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1b6:	88 b3       	in	r24, 0x18	; 24
 1b8:	92 2f       	mov	r25, r18
 1ba:	92 95       	swap	r25
 1bc:	9f 70       	andi	r25, 0x0F	; 15
 1be:	80 7f       	andi	r24, 0xF0	; 240
 1c0:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 1c2:	98 bb       	out	0x18, r25	; 24
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	89 2f       	mov	r24, r25
 1c8:	8a 95       	dec	r24
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 1cc:	97 98       	cbi	0x12, 7	; 18
 1ce:	89 2f       	mov	r24, r25
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 1d4:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	2f 70       	andi	r18, 0x0F	; 15
 1da:	80 7f       	andi	r24, 0xF0	; 240
 1dc:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	89 2f       	mov	r24, r25
 1e2:	8a 95       	dec	r24
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 1e6:	97 98       	cbi	0x12, 7	; 18
 1e8:	9a 95       	dec	r25
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 1ec:	af df       	rcall	.-162    	; 0x14c <LCDBusyLoop>
}
 1ee:	08 95       	ret

000001f0 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1f0:	1f 93       	push	r17
 1f2:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1f4:	80 e6       	ldi	r24, 0x60	; 96
 1f6:	9a ee       	ldi	r25, 0xEA	; 234
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1fc:	87 b3       	in	r24, 0x17	; 23
 1fe:	8f 60       	ori	r24, 0x0F	; 15
 200:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 202:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 204:	8d 9a       	sbi	0x11, 5	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 206:	8e 9a       	sbi	0x11, 6	; 17

	LCD_DATA_PORT&=0XF0;
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	80 7f       	andi	r24, 0xF0	; 240
 20c:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 20e:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 210:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 212:	95 98       	cbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	8a 95       	dec	r24
 218:	f1 f7       	brne	.-4      	; 0x216 <InitLCD+0x26>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 21a:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 21c:	c1 9a       	sbi	0x18, 1	; 24
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	98 2f       	mov	r25, r24
 222:	9a 95       	dec	r25
 224:	f1 f7       	brne	.-4      	; 0x222 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 226:	97 98       	cbi	0x12, 7	; 18
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 22c:	8f df       	rcall	.-226    	; 0x14c <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 22e:	81 2f       	mov	r24, r17
 230:	8c 60       	ori	r24, 0x0C	; 12
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	b6 df       	rcall	.-148    	; 0x1a2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 236:	88 e2       	ldi	r24, 0x28	; 40
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	b3 df       	rcall	.-154    	; 0x1a2 <LCDByte>
}
 23c:	1f 91       	pop	r17
 23e:	08 95       	ret

00000240 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
 246:	03 c0       	rjmp	.+6      	; 0x24e <LCDWriteString+0xe>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	ab df       	rcall	.-170    	; 0x1a2 <LCDByte>
	msg++;
 24c:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 24e:	88 81       	ld	r24, Y
 250:	88 23       	and	r24, r24
 252:	d1 f7       	brne	.-12     	; 0x248 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	df 93       	push	r29
 264:	cf 93       	push	r28
 266:	00 d0       	rcall	.+0      	; 0x268 <LCDWriteInt+0xe>
 268:	00 d0       	rcall	.+0      	; 0x26a <LCDWriteInt+0x10>
 26a:	0f 92       	push	r0
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	9c 01       	movw	r18, r24
 272:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 274:	fe 01       	movw	r30, r28
 276:	31 96       	adiw	r30, 0x01	; 1
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	df 01       	movw	r26, r30
 27c:	1d 92       	st	X+, r1
 27e:	8a 95       	dec	r24
 280:	e9 f7       	brne	.-6      	; 0x27c <LCDWriteInt+0x22>
 282:	fe 01       	movw	r30, r28
 284:	35 96       	adiw	r30, 0x05	; 5
 286:	0b c0       	rjmp	.+22     	; 0x29e <LCDWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 288:	c9 01       	movw	r24, r18
 28a:	6a e0       	ldi	r22, 0x0A	; 10
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	48 d0       	rcall	.+144    	; 0x320 <__divmodhi4>
 290:	80 83       	st	Z, r24
	val=val/10;
 292:	c9 01       	movw	r24, r18
 294:	6a e0       	ldi	r22, 0x0A	; 10
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	43 d0       	rcall	.+134    	; 0x320 <__divmodhi4>
 29a:	9b 01       	movw	r18, r22
 29c:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 29e:	21 15       	cp	r18, r1
 2a0:	31 05       	cpc	r19, r1
 2a2:	91 f7       	brne	.-28     	; 0x288 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 2a4:	bf ef       	ldi	r27, 0xFF	; 255
 2a6:	0f 3f       	cpi	r16, 0xFF	; 255
 2a8:	1b 07       	cpc	r17, r27
 2aa:	79 f4       	brne	.+30     	; 0x2ca <LCDWriteInt+0x70>
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 2b0:	ae 01       	movw	r20, r28
 2b2:	4f 5f       	subi	r20, 0xFF	; 255
 2b4:	5f 4f       	sbci	r21, 0xFF	; 255
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <LCDWriteInt+0x62>
 2b8:	2f 5f       	subi	r18, 0xFF	; 255
 2ba:	3f 4f       	sbci	r19, 0xFF	; 255
 2bc:	fa 01       	movw	r30, r20
 2be:	e2 0f       	add	r30, r18
 2c0:	f3 1f       	adc	r31, r19
 2c2:	80 81       	ld	r24, Z
 2c4:	88 23       	and	r24, r24
 2c6:	c1 f3       	breq	.-16     	; 0x2b8 <LCDWriteInt+0x5e>
 2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <LCDWriteInt+0x78>
	else
		j=5-field_length;
 2ca:	25 e0       	ldi	r18, 0x05	; 5
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	20 1b       	sub	r18, r16
 2d0:	31 0b       	sbc	r19, r17
 2d2:	7e 01       	movw	r14, r28
 2d4:	08 94       	sec
 2d6:	e1 1c       	adc	r14, r1
 2d8:	f1 1c       	adc	r15, r1
 2da:	e2 0e       	add	r14, r18
 2dc:	f3 1e       	adc	r15, r19
 2de:	89 01       	movw	r16, r18
 2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <LCDWriteInt+0x98>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2e2:	f7 01       	movw	r30, r14
 2e4:	81 91       	ld	r24, Z+
 2e6:	7f 01       	movw	r14, r30
 2e8:	80 5d       	subi	r24, 0xD0	; 208
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	5a df       	rcall	.-332    	; 0x1a2 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2ee:	0f 5f       	subi	r16, 0xFF	; 255
 2f0:	1f 4f       	sbci	r17, 0xFF	; 255
 2f2:	05 30       	cpi	r16, 0x05	; 5
 2f4:	11 05       	cpc	r17, r1
 2f6:	ac f3       	brlt	.-22     	; 0x2e2 <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	cf 91       	pop	r28
 304:	df 91       	pop	r29
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	08 95       	ret

00000310 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 310:	88 32       	cpi	r24, 0x28	; 40
 312:	28 f4       	brcc	.+10     	; 0x31e <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 314:	61 11       	cpse	r22, r1
 316:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	42 df       	rcall	.-380    	; 0x1a2 <LCDByte>
 31e:	08 95       	ret

00000320 <__divmodhi4>:
 320:	97 fb       	bst	r25, 7
 322:	09 2e       	mov	r0, r25
 324:	07 26       	eor	r0, r23
 326:	0a d0       	rcall	.+20     	; 0x33c <__divmodhi4_neg1>
 328:	77 fd       	sbrc	r23, 7
 32a:	04 d0       	rcall	.+8      	; 0x334 <__divmodhi4_neg2>
 32c:	0c d0       	rcall	.+24     	; 0x346 <__udivmodhi4>
 32e:	06 d0       	rcall	.+12     	; 0x33c <__divmodhi4_neg1>
 330:	00 20       	and	r0, r0
 332:	1a f4       	brpl	.+6      	; 0x33a <__divmodhi4_exit>

00000334 <__divmodhi4_neg2>:
 334:	70 95       	com	r23
 336:	61 95       	neg	r22
 338:	7f 4f       	sbci	r23, 0xFF	; 255

0000033a <__divmodhi4_exit>:
 33a:	08 95       	ret

0000033c <__divmodhi4_neg1>:
 33c:	f6 f7       	brtc	.-4      	; 0x33a <__divmodhi4_exit>
 33e:	90 95       	com	r25
 340:	81 95       	neg	r24
 342:	9f 4f       	sbci	r25, 0xFF	; 255
 344:	08 95       	ret

00000346 <__udivmodhi4>:
 346:	aa 1b       	sub	r26, r26
 348:	bb 1b       	sub	r27, r27
 34a:	51 e1       	ldi	r21, 0x11	; 17
 34c:	07 c0       	rjmp	.+14     	; 0x35c <__udivmodhi4_ep>

0000034e <__udivmodhi4_loop>:
 34e:	aa 1f       	adc	r26, r26
 350:	bb 1f       	adc	r27, r27
 352:	a6 17       	cp	r26, r22
 354:	b7 07       	cpc	r27, r23
 356:	10 f0       	brcs	.+4      	; 0x35c <__udivmodhi4_ep>
 358:	a6 1b       	sub	r26, r22
 35a:	b7 0b       	sbc	r27, r23

0000035c <__udivmodhi4_ep>:
 35c:	88 1f       	adc	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	5a 95       	dec	r21
 362:	a9 f7       	brne	.-22     	; 0x34e <__udivmodhi4_loop>
 364:	80 95       	com	r24
 366:	90 95       	com	r25
 368:	bc 01       	movw	r22, r24
 36a:	cd 01       	movw	r24, r26
 36c:	08 95       	ret

0000036e <_exit>:
 36e:	f8 94       	cli

00000370 <__stop_program>:
 370:	ff cf       	rjmp	.-2      	; 0x370 <__stop_program>
