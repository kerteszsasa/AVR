
kezdo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000148  000001dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  000001de  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000066  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001b4  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f4  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000199  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000ed  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  000007d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	77 c0       	rjmp	.+238    	; 0xf2 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	47 c0       	rjmp	.+142    	; 0xa2 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e4       	ldi	r30, 0x48	; 72
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 36       	cpi	r26, 0x66	; 102
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	74 c0       	rjmp	.+232    	; 0x144 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
int main() //Main fõprogram
{

//EXint0************************
//exint
MCUCR=1<<ISC01; //lefutó él
  5e:	82 e0       	ldi	r24, 0x02	; 2
  60:	85 bf       	out	0x35, r24	; 53
GICR=1<<INT0;	//int0 engedélyezése
  62:	80 e4       	ldi	r24, 0x40	; 64
  64:	8b bf       	out	0x3b, r24	; 59


//timer0*********************
 TCCR0= 1;//<<CS02 | 1<<CS00 ; //timer0 enable ,prescaler 1024
  66:	81 e0       	ldi	r24, 0x01	; 1
  68:	83 bf       	out	0x33, r24	; 51
   TIMSK=1<<TOIE0;	//timer0 interrupt enable
  6a:	89 bf       	out	0x39, r24	; 57
  

sei ( );
  6c:	78 94       	sei

DDRC=255;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20



GREEN=60;
  72:	8c e3       	ldi	r24, 0x3C	; 60
  74:	80 93 64 00 	sts	0x0064, r24
  78:	20 e1       	ldi	r18, 0x10	; 16
  7a:	37 e2       	ldi	r19, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7c:	49 e1       	ldi	r20, 0x19	; 25
  7e:	50 e0       	ldi	r21, 0x00	; 0
  80:	05 c0       	rjmp	.+10     	; 0x8c <main+0x2e>
  82:	ca 01       	movw	r24, r20
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <main+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  8c:	21 15       	cp	r18, r1
  8e:	31 05       	cpc	r19, r1
  90:	c1 f7       	brne	.-16     	; 0x82 <main+0x24>

while(1)	//a proramnak sosem szabad véget érnie
	{
_delay_ms(1000);
RED+=10;
  92:	80 91 65 00 	lds	r24, 0x0065
  96:	86 5f       	subi	r24, 0xF6	; 246
  98:	80 93 65 00 	sts	0x0065, r24
  9c:	20 e1       	ldi	r18, 0x10	; 16
  9e:	37 e2       	ldi	r19, 0x27	; 39
  a0:	f0 cf       	rjmp	.-32     	; 0x82 <main+0x24>

000000a2 <__vector_9>:




ISR(TIMER0_OVF_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25

	if(RED>szamlal)ron; else roff;
  b0:	80 91 65 00 	lds	r24, 0x0065
  b4:	90 91 63 00 	lds	r25, 0x0063
  b8:	98 17       	cp	r25, r24
  ba:	10 f4       	brcc	.+4      	; 0xc0 <__vector_9+0x1e>
  bc:	ad 9a       	sbi	0x15, 5	; 21
  be:	01 c0       	rjmp	.+2      	; 0xc2 <__vector_9+0x20>
  c0:	ad 98       	cbi	0x15, 5	; 21
	if(GREEN>szamlal)gon; else goff;
  c2:	80 91 64 00 	lds	r24, 0x0064
  c6:	98 17       	cp	r25, r24
  c8:	10 f4       	brcc	.+4      	; 0xce <__vector_9+0x2c>
  ca:	ab 9a       	sbi	0x15, 3	; 21
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <__vector_9+0x2e>
  ce:	ab 98       	cbi	0x15, 3	; 21
	if(BLUE>szamlal)bon; else boff;
  d0:	80 91 62 00 	lds	r24, 0x0062
  d4:	98 17       	cp	r25, r24
  d6:	10 f4       	brcc	.+4      	; 0xdc <__vector_9+0x3a>
  d8:	ac 9a       	sbi	0x15, 4	; 21
  da:	01 c0       	rjmp	.+2      	; 0xde <__vector_9+0x3c>
  dc:	ac 98       	cbi	0x15, 4	; 21
	szamlal++;
  de:	9f 5f       	subi	r25, 0xFF	; 255
  e0:	90 93 63 00 	sts	0x0063, r25



}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_1>:





ISR (INT0_vect) {
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25




if(i==1){GREEN=100;BLUE=0;i=0;}
 100:	80 91 60 00 	lds	r24, 0x0060
 104:	90 91 61 00 	lds	r25, 0x0061
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	51 f4       	brne	.+20     	; 0x120 <__vector_1+0x2e>
 10c:	84 e6       	ldi	r24, 0x64	; 100
 10e:	80 93 64 00 	sts	0x0064, r24
 112:	10 92 62 00 	sts	0x0062, r1
 116:	10 92 61 00 	sts	0x0061, r1
 11a:	10 92 60 00 	sts	0x0060, r1
 11e:	0b c0       	rjmp	.+22     	; 0x136 <__vector_1+0x44>
else{GREEN=0;BLUE=100;i=1;}
 120:	10 92 64 00 	sts	0x0064, r1
 124:	84 e6       	ldi	r24, 0x64	; 100
 126:	80 93 62 00 	sts	0x0062, r24
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 61 00 	sts	0x0061, r25
 132:	80 93 60 00 	sts	0x0060, r24



}
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
