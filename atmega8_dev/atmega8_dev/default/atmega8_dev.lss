
atmega8_dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  00000272  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000009a  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001c5  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000137  00000000  00000000  000004f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a0  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  000008c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011c  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000046  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	98 c0       	rjmp	.+304    	; 0x134 <__vector_1>
   4:	eb c0       	rjmp	.+470    	; 0x1dc <__vector_2>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	33 c0       	rjmp	.+102    	; 0x70 <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	31 c0       	rjmp	.+98     	; 0x70 <__bad_interrupt>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	9f c0       	rjmp	.+318    	; 0x152 <__vector_9>
  14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
  16:	2c c0       	rjmp	.+88     	; 0x70 <__bad_interrupt>
  18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
  1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
  1c:	29 c0       	rjmp	.+82     	; 0x70 <__bad_interrupt>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
  20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
  22:	26 c0       	rjmp	.+76     	; 0x70 <__bad_interrupt>
  24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
  26:	60 c0       	rjmp	.+192    	; 0xe8 <sevensegment+0x10>
  28:	63 c0       	rjmp	.+198    	; 0xf0 <sevensegment+0x18>
  2a:	65 c0       	rjmp	.+202    	; 0xf6 <sevensegment+0x1e>
  2c:	68 c0       	rjmp	.+208    	; 0xfe <sevensegment+0x26>
  2e:	69 c0       	rjmp	.+210    	; 0x102 <sevensegment+0x2a>
  30:	6c c0       	rjmp	.+216    	; 0x10a <sevensegment+0x32>
  32:	6f c0       	rjmp	.+222    	; 0x112 <sevensegment+0x3a>
  34:	72 c0       	rjmp	.+228    	; 0x11a <sevensegment+0x42>
  36:	74 c0       	rjmp	.+232    	; 0x120 <sevensegment+0x48>
  38:	78 c0       	rjmp	.+240    	; 0x12a <sevensegment+0x52>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	ee ef       	ldi	r30, 0xFE	; 254
  4e:	f1 e0       	ldi	r31, 0x01	; 1
  50:	02 c0       	rjmp	.+4      	; 0x56 <.do_copy_data_start>

00000052 <.do_copy_data_loop>:
  52:	05 90       	lpm	r0, Z+
  54:	0d 92       	st	X+, r0

00000056 <.do_copy_data_start>:
  56:	a0 36       	cpi	r26, 0x60	; 96
  58:	b1 07       	cpc	r27, r17
  5a:	d9 f7       	brne	.-10     	; 0x52 <.do_copy_data_loop>

0000005c <__do_clear_bss>:
  5c:	10 e0       	ldi	r17, 0x00	; 0
  5e:	a0 e6       	ldi	r26, 0x60	; 96
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	a2 36       	cpi	r26, 0x62	; 98
  68:	b1 07       	cpc	r27, r17
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	18 d0       	rcall	.+48     	; 0x9e <main>
  6e:	c5 c0       	rjmp	.+394    	; 0x1fa <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <Beolvas8bitADC>:

 unsigned char Beolvas8bitADC(unsigned char csatorna)
   
      {
  
      ADMUX = (ADMUX & 0b11110000) | csatorna;   // ADC csatorna kivalasztasa
  72:	97 b1       	in	r25, 0x07	; 7
  74:	90 7f       	andi	r25, 0xF0	; 240
  76:	98 2b       	or	r25, r24
  78:	97 b9       	out	0x07, r25	; 7
  
      ADCSRA |= (1<<ADSC);    // ADC konverzio elinditasa
  7a:	36 9a       	sbi	0x06, 6	; 6
  
      while (ADCSRA & (1<<ADSC));    // varas az atalakitasra
  7c:	36 99       	sbic	0x06, 6	; 6
  7e:	fe cf       	rjmp	.-4      	; 0x7c <Beolvas8bitADC+0xa>
  
      ADCSRA |= (1<<ADSC);         // konverzió elindítás
  80:	36 9a       	sbi	0x06, 6	; 6
  
      while (ADCSRA & (1<<ADSC));    // varas az atalakitasra
  82:	36 99       	sbic	0x06, 6	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <Beolvas8bitADC+0x10>
  
      return (ADCH);     // ADC ertek visszaadasa (csak a felso 8 bit (ADCH), az also 2 zajos bit elhagyasa)
  86:	85 b1       	in	r24, 0x05	; 5
  
      }
  88:	08 95       	ret

0000008a <Wait>:




void Wait()
{
  8a:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	ca 01       	movw	r24, r20
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <Wait+0x8>
   uint8_t i=0;
   for(;i<20;i++)
  96:	2f 5f       	subi	r18, 0xFF	; 255
  98:	24 31       	cpi	r18, 0x14	; 20
  9a:	d1 f7       	brne	.-12     	; 0x90 <Wait+0x6>
      _delay_loop_2(0);
}
  9c:	08 95       	ret

0000009e <main>:
void main()
{
   //Set PORTC0 as output

	//external interrupt
	GICR |= (1<<INT0); // 4-es labat (PD2) hasznaljuk ebben a peldaban //gicr=0 tiltja
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1<<ISC01) ; // megszakitas az INT0 labon, lefuto el eseten
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	85 bf       	out	0x35, r24	; 53

//int1
	GICR |= (1<<INT1); // 4-es labat (PD2) hasznaljuk ebben a peldaban //gicr=0 tiltja
  a8:	8b b7       	in	r24, 0x3b	; 59
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1<<ISC11) ; // megszakitas az INT0 labon, lefuto el eseten
  ae:	88 e0       	ldi	r24, 0x08	; 8
  b0:	85 bf       	out	0x35, r24	; 53





   DDRD=0b11000000;
  b2:	80 ec       	ldi	r24, 0xC0	; 192
  b4:	81 bb       	out	0x11, r24	; 17
   DDRB=0b000011111;
  b6:	8f e1       	ldi	r24, 0x1F	; 31
  b8:	87 bb       	out	0x17, r24	; 23


  alma=0;
  ba:	10 92 61 00 	sts	0x0061, r1
  valt1=0;
  be:	10 92 60 00 	sts	0x0060, r1
   
      void Konfig8bitADC()    // ADC konfiguralas (beallitas)
  
      {
   
                 ADMUX |= (1<<REFS0)|(1<<ADLAR);    // Vcc mint referencia, balra rendezett ADC eredmeny
  c2:	87 b1       	in	r24, 0x07	; 7
  c4:	80 66       	ori	r24, 0x60	; 96
  c6:	87 b9       	out	0x07, r24	; 7
   
                 ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);  // ADC engedelyezese, ADC eloosztas = 8 (125 KHz)
  c8:	83 e8       	ldi	r24, 0x83	; 131
  ca:	86 b9       	out	0x06, r24	; 6
  alma=0;
  valt1=0;
  //valt2=0;
  Konfig8bitADC() ;

   TCCR0=5; //timer0 enable prescaler 1024
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	83 bf       	out	0x33, r24	; 51
   TIMSK=1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	89 bf       	out	0x39, r24	; 57
   sei ( );
  d4:	78 94       	sei
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x38>

000000d8 <sevensegment>:
}

//7segment***********************************
void sevensegment(uint8_t num)
	{
		switch(num)
  d8:	e8 2f       	mov	r30, r24
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	ea 30       	cpi	r30, 0x0A	; 10
  de:	f1 05       	cpc	r31, r1
  e0:	40 f5       	brcc	.+80     	; 0x132 <sevensegment+0x5a>
  e2:	ed 5e       	subi	r30, 0xED	; 237
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	09 94       	ijmp
			{
			// DDRD=0b11000000;
		    //DDRB=0b000011111;
			case 0 :{PORTD=0b11000000;PORTB=0b000011011;break;}//
  e8:	80 ec       	ldi	r24, 0xC0	; 192
  ea:	82 bb       	out	0x12, r24	; 18
  ec:	8b e1       	ldi	r24, 0x1B	; 27
  ee:	1b c0       	rjmp	.+54     	; 0x126 <sevensegment+0x4e>
			case 1 :{PORTD=0b00000000;PORTB=0b000001010;break;}//
  f0:	12 ba       	out	0x12, r1	; 18
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	18 c0       	rjmp	.+48     	; 0x126 <sevensegment+0x4e>
			case 2 :{PORTD=0b01000000;PORTB=0b000010111;break;}//
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	82 bb       	out	0x12, r24	; 18
  fa:	87 e1       	ldi	r24, 0x17	; 23
  fc:	14 c0       	rjmp	.+40     	; 0x126 <sevensegment+0x4e>
			case 3 :{PORTD=0b00000000;PORTB=0b000011111;break;}//
  fe:	12 ba       	out	0x12, r1	; 18
 100:	11 c0       	rjmp	.+34     	; 0x124 <sevensegment+0x4c>
			case 4 :{PORTD=0b10000000;PORTB=0b000001110;break;}//
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	82 bb       	out	0x12, r24	; 18
 106:	8e e0       	ldi	r24, 0x0E	; 14
 108:	0e c0       	rjmp	.+28     	; 0x126 <sevensegment+0x4e>
			case 5 :{PORTD=0b10000000;PORTB=0b000011101;break;}//
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	82 bb       	out	0x12, r24	; 18
 10e:	8d e1       	ldi	r24, 0x1D	; 29
 110:	0a c0       	rjmp	.+20     	; 0x126 <sevensegment+0x4e>
			case 6 :{PORTD=0b11000000;PORTB=0b000011100;break;}//
 112:	80 ec       	ldi	r24, 0xC0	; 192
 114:	82 bb       	out	0x12, r24	; 18
 116:	8c e1       	ldi	r24, 0x1C	; 28
 118:	06 c0       	rjmp	.+12     	; 0x126 <sevensegment+0x4e>
			case 7 :{PORTD=0b00000000;PORTB=0b000001011;break;}//
 11a:	12 ba       	out	0x12, r1	; 18
 11c:	8b e0       	ldi	r24, 0x0B	; 11
 11e:	03 c0       	rjmp	.+6      	; 0x126 <sevensegment+0x4e>
			case 8 :{PORTD=0b11000000;PORTB=0b000011111;break;}//
 120:	80 ec       	ldi	r24, 0xC0	; 192
 122:	82 bb       	out	0x12, r24	; 18
 124:	8f e1       	ldi	r24, 0x1F	; 31
 126:	88 bb       	out	0x18, r24	; 24
 128:	08 95       	ret
			case 9 :{PORTD=0b10000000;PORTB=0b000011111;break;}//
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	82 bb       	out	0x12, r24	; 18
 12e:	8f e1       	ldi	r24, 0x1F	; 31
 130:	88 bb       	out	0x18, r24	; 24
 132:	08 95       	ret

00000134 <__vector_1>:
//**************************************************



//**************************************************
ISR (INT0_vect) {
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	8f 93       	push	r24


//alma++;
//	 sevensegment(alma);

valt1=5;
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	80 93 60 00 	sts	0x0060, r24

//Wait();



}
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_9>:
//**************************************************

//*****************************************

ISR (TIMER0_OVF_vect) {
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31


alma++;
 174:	80 91 61 00 	lds	r24, 0x0061
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	80 93 61 00 	sts	0x0061, r24
	
if(alma==4)valt1++;
 17e:	80 91 61 00 	lds	r24, 0x0061
 182:	84 30       	cpi	r24, 0x04	; 4
 184:	29 f4       	brne	.+10     	; 0x190 <__vector_9+0x3e>
 186:	80 91 60 00 	lds	r24, 0x0060
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 93 60 00 	sts	0x0060, r24
if(alma==5)alma=0;
 190:	80 91 61 00 	lds	r24, 0x0061
 194:	85 30       	cpi	r24, 0x05	; 5
 196:	11 f4       	brne	.+4      	; 0x19c <__vector_9+0x4a>
 198:	10 92 61 00 	sts	0x0061, r1
 sevensegment(valt1);
 19c:	80 91 60 00 	lds	r24, 0x0060
 1a0:	9b df       	rcall	.-202    	; 0xd8 <sevensegment>
 if(valt1==10)valt1=0;
 1a2:	80 91 60 00 	lds	r24, 0x0060
 1a6:	8a 30       	cpi	r24, 0x0A	; 10
 1a8:	11 f4       	brne	.+4      	; 0x1ae <__vector_9+0x5c>
 1aa:	10 92 60 00 	sts	0x0060, r1

//Wait();


}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <Konfig8bitADC>:
   
      void Konfig8bitADC()    // ADC konfiguralas (beallitas)
  
      {
   
                 ADMUX |= (1<<REFS0)|(1<<ADLAR);    // Vcc mint referencia, balra rendezett ADC eredmeny
 1d0:	87 b1       	in	r24, 0x07	; 7
 1d2:	80 66       	ori	r24, 0x60	; 96
 1d4:	87 b9       	out	0x07, r24	; 7
   
                 ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);  // ADC engedelyezese, ADC eloosztas = 8 (125 KHz)
 1d6:	83 e8       	ldi	r24, 0x83	; 131
 1d8:	86 b9       	out	0x06, r24	; 6
  
      }
 1da:	08 95       	ret

000001dc <__vector_2>:





ISR (INT1_vect) {
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	8f 93       	push	r24


//alma++;
//	 sevensegment(alma);

valt1=3;
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	80 93 60 00 	sts	0x0060, r24

//Wait();



}
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
