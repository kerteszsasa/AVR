
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000022a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000024  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000031e  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f2  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002bc  00000000  00000000  0000067e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000bb  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000280  00000000  00000000  00000a27  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 6f 00 	call	0xde	; 0xde <main>
  b6:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <Wait>:

#include <util/delay.h>

//Simple Wait Function
void Wait()
{
  be:	40 e0       	ldi	r20, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	c9 01       	movw	r24, r18
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <Wait+0x8>
   uint8_t i;
   for(i=0;i<50;i++)
  ca:	c9 01       	movw	r24, r18
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <Wait+0xe>
  d0:	c9 01       	movw	r24, r18
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <Wait+0x14>
  d6:	4f 5f       	subi	r20, 0xFF	; 255
  d8:	42 33       	cpi	r20, 0x32	; 50
  da:	a1 f7       	brne	.-24     	; 0xc4 <Wait+0x6>
      _delay_loop_2(0);
      _delay_loop_2(0);
      _delay_loop_2(0);
   }

}
  dc:	08 95       	ret

000000de <main>:

int main()
{
   //servo settings
   TCCR1A = (1<<COM1A1) | (1<<WGM11) ;
  de:	82 e8       	ldi	r24, 0x82	; 130
  e0:	8f bd       	out	0x2f, r24	; 47
   TCCR1B =(1<<WGM13) |(1<<WGM12) |(1<<CS10) | (1<<CS11);
  e2:	8b e1       	ldi	r24, 0x1B	; 27
  e4:	8e bd       	out	0x2e, r24	; 46
   ICR1=2499; //50 hz 
  e6:	83 ec       	ldi	r24, 0xC3	; 195
  e8:	99 e0       	ldi	r25, 0x09	; 9
  ea:	97 bd       	out	0x27, r25	; 39
  ec:	86 bd       	out	0x26, r24	; 38
   OCR1A = 188; // servo 1.5 ms
  ee:	8c eb       	ldi	r24, 0xBC	; 188
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	9b bd       	out	0x2b, r25	; 43
  f4:	8a bd       	out	0x2a, r24	; 42

   DDRB|=(1<<PB1);   //PWM Pin as Out
  f6:	b9 9a       	sbi	0x17, 1	; 23
   DDRB|=(1<<PB0);   //YELLOW LED Pin as Out
  f8:	b8 9a       	sbi	0x17, 0	; 23

   //TODO: analóg bemenet olvasása

	DDRC=0; // c port bemenet
  fa:	14 ba       	out	0x14, r1	; 20
*/


	if((PINC&(32+16+8)) ==(16+8)) { // felsõ jumper

      OCR1A=200;  //default state
  fc:	48 ec       	ldi	r20, 0xC8	; 200
  fe:	50 e0       	ldi	r21, 0x00	; 0
	  PORTB&=~(1<<PB0);
      
	  for(i=0 ; i<40 ; i++) _delay_ms(1000);
	  
	  OCR1A=183;   //fényképezõ exponál
 100:	67 eb       	ldi	r22, 0xB7	; 183
 102:	70 e0       	ldi	r23, 0x00	; 0
	if ((PINC&(32+16+8)) ==(32+16))	PORTB|=(1<<PB0); //8 pin3 jp3
	else PORTB&=~(1<<PB0);
*/


	if((PINC&(32+16+8)) ==(16+8)) { // felsõ jumper
 104:	83 b3       	in	r24, 0x13	; 19
 106:	88 73       	andi	r24, 0x38	; 56
 108:	88 31       	cpi	r24, 0x18	; 24
 10a:	e9 f4       	brne	.+58     	; 0x146 <main+0x68>

      OCR1A=200;  //default state
 10c:	5b bd       	out	0x2b, r21	; 43
 10e:	4a bd       	out	0x2a, r20	; 42
	  PORTB&=~(1<<PB0);
 110:	c0 98       	cbi	0x18, 0	; 24
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	0a c0       	rjmp	.+20     	; 0x12c <main+0x4e>
 118:	fa 01       	movw	r30, r20
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <main+0x3c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 120:	d9 f7       	brne	.-10     	; 0x118 <main+0x3a>
      
	  for(i=0 ; i<40 ; i++) _delay_ms(1000);
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	3f 4f       	sbci	r19, 0xFF	; 255
 126:	28 32       	cpi	r18, 0x28	; 40
 128:	31 05       	cpc	r19, r1
 12a:	19 f0       	breq	.+6      	; 0x132 <main+0x54>
 12c:	80 e1       	ldi	r24, 0x10	; 16
 12e:	97 e2       	ldi	r25, 0x27	; 39
 130:	f3 cf       	rjmp	.-26     	; 0x118 <main+0x3a>
	  
	  OCR1A=183;   //fényképezõ exponál
 132:	7b bd       	out	0x2b, r23	; 43
 134:	6a bd       	out	0x2a, r22	; 42
	  PORTB|=(1<<PB0);
 136:	c0 9a       	sbi	0x18, 0	; 24
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	9f e1       	ldi	r25, 0x1F	; 31
 13c:	fa 01       	movw	r30, r20
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	d9 f7       	brne	.-10     	; 0x13c <main+0x5e>
      _delay_ms(800);
	  }

	  if((PINC&(32+16+8)) ==(32+8)) { // középsõ jumper
 146:	83 b3       	in	r24, 0x13	; 19
 148:	88 73       	andi	r24, 0x38	; 56
 14a:	88 32       	cpi	r24, 0x28	; 40
 14c:	e9 f4       	brne	.+58     	; 0x188 <main+0xaa>

      OCR1A=200;  //default state
 14e:	5b bd       	out	0x2b, r21	; 43
 150:	4a bd       	out	0x2a, r20	; 42
	  PORTB&=~(1<<PB0);
 152:	c0 98       	cbi	0x18, 0	; 24
 154:	20 e0       	ldi	r18, 0x00	; 0
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	0a c0       	rjmp	.+20     	; 0x16e <main+0x90>
 15a:	fa 01       	movw	r30, r20
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 160:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 162:	d9 f7       	brne	.-10     	; 0x15a <main+0x7c>
      
	  for(i=0 ; i<70 ; i++) _delay_ms(1000);
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	26 34       	cpi	r18, 0x46	; 70
 16a:	31 05       	cpc	r19, r1
 16c:	19 f0       	breq	.+6      	; 0x174 <main+0x96>
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	97 e2       	ldi	r25, 0x27	; 39
 172:	f3 cf       	rjmp	.-26     	; 0x15a <main+0x7c>
	  
	  OCR1A=183;   //fényképezõ exponál
 174:	7b bd       	out	0x2b, r23	; 43
 176:	6a bd       	out	0x2a, r22	; 42
	  PORTB|=(1<<PB0);
 178:	c0 9a       	sbi	0x18, 0	; 24
 17a:	80 e4       	ldi	r24, 0x40	; 64
 17c:	9f e1       	ldi	r25, 0x1F	; 31
 17e:	fa 01       	movw	r30, r20
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0xa2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 184:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 186:	d9 f7       	brne	.-10     	; 0x17e <main+0xa0>
      _delay_ms(800);
	  }

	  if((PINC&(32+16+8)) ==(32+16)) { // alsó jumper
 188:	83 b3       	in	r24, 0x13	; 19
 18a:	88 73       	andi	r24, 0x38	; 56
 18c:	80 33       	cpi	r24, 0x30	; 48
 18e:	e9 f4       	brne	.+58     	; 0x1ca <main+0xec>

      OCR1A=200;  //default state
 190:	5b bd       	out	0x2b, r21	; 43
 192:	4a bd       	out	0x2a, r20	; 42
	  PORTB&=~(1<<PB0);
 194:	c0 98       	cbi	0x18, 0	; 24
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	0a c0       	rjmp	.+20     	; 0x1b0 <main+0xd2>
 19c:	fa 01       	movw	r30, r20
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <main+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a4:	d9 f7       	brne	.-10     	; 0x19c <main+0xbe>
      
	  for(i=0 ; i<3 ; i++) _delay_ms(1000);
 1a6:	2f 5f       	subi	r18, 0xFF	; 255
 1a8:	3f 4f       	sbci	r19, 0xFF	; 255
 1aa:	23 30       	cpi	r18, 0x03	; 3
 1ac:	31 05       	cpc	r19, r1
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <main+0xd8>
 1b0:	80 e1       	ldi	r24, 0x10	; 16
 1b2:	97 e2       	ldi	r25, 0x27	; 39
 1b4:	f3 cf       	rjmp	.-26     	; 0x19c <main+0xbe>
	  
	  OCR1A=183;   //fényképezõ exponál
 1b6:	7b bd       	out	0x2b, r23	; 43
 1b8:	6a bd       	out	0x2a, r22	; 42
	  PORTB|=(1<<PB0);
 1ba:	c0 9a       	sbi	0x18, 0	; 24
 1bc:	80 e4       	ldi	r24, 0x40	; 64
 1be:	9f e1       	ldi	r25, 0x1F	; 31
 1c0:	fa 01       	movw	r30, r20
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <main+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c8:	d9 f7       	brne	.-10     	; 0x1c0 <main+0xe2>
      _delay_ms(800);
	  }


	  OCR1A=200;  //default state
 1ca:	5b bd       	out	0x2b, r21	; 43
 1cc:	4a bd       	out	0x2a, r20	; 42
	  PORTB&=~(1<<PB0);
 1ce:	c0 98       	cbi	0x18, 0	; 24
 1d0:	99 cf       	rjmp	.-206    	; 0x104 <main+0x26>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
