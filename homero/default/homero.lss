
homero.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000444  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000004f  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000008e6  00000000  00000000  00000507  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001d2  00000000  00000000  00000ded  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000063b  00000000  00000000  00000fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  000015fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f3  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000005a5  00000000  00000000  0000176f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	22 c0       	rjmp	.+68     	; 0x46 <__ctors_end>
   2:	3c c0       	rjmp	.+120    	; 0x7c <__bad_interrupt>
   4:	3b c0       	rjmp	.+118    	; 0x7c <__bad_interrupt>
   6:	3a c0       	rjmp	.+116    	; 0x7c <__bad_interrupt>
   8:	39 c0       	rjmp	.+114    	; 0x7c <__bad_interrupt>
   a:	38 c0       	rjmp	.+112    	; 0x7c <__bad_interrupt>
   c:	37 c0       	rjmp	.+110    	; 0x7c <__bad_interrupt>
   e:	36 c0       	rjmp	.+108    	; 0x7c <__bad_interrupt>
  10:	35 c0       	rjmp	.+106    	; 0x7c <__bad_interrupt>
  12:	34 c0       	rjmp	.+104    	; 0x7c <__bad_interrupt>
  14:	33 c0       	rjmp	.+102    	; 0x7c <__bad_interrupt>
  16:	32 c0       	rjmp	.+100    	; 0x7c <__bad_interrupt>
  18:	31 c0       	rjmp	.+98     	; 0x7c <__bad_interrupt>
  1a:	30 c0       	rjmp	.+96     	; 0x7c <__bad_interrupt>
  1c:	2f c0       	rjmp	.+94     	; 0x7c <__bad_interrupt>
  1e:	59 c0       	rjmp	.+178    	; 0xd2 <led1+0x18>
  20:	66 c0       	rjmp	.+204    	; 0xee <led1+0x34>
  22:	73 c0       	rjmp	.+230    	; 0x10a <led1+0x50>
  24:	80 c0       	rjmp	.+256    	; 0x126 <led1+0x6c>
  26:	8d c0       	rjmp	.+282    	; 0x142 <led1+0x88>
  28:	9a c0       	rjmp	.+308    	; 0x15e <led1+0xa4>
  2a:	a7 c0       	rjmp	.+334    	; 0x17a <__stack+0x1b>
  2c:	b4 c0       	rjmp	.+360    	; 0x196 <__stack+0x37>
  2e:	c1 c0       	rjmp	.+386    	; 0x1b2 <__stack+0x53>
  30:	ce c0       	rjmp	.+412    	; 0x1ce <__stack+0x6f>
  32:	f5 c0       	rjmp	.+490    	; 0x21e <led2+0x18>
  34:	02 c1       	rjmp	.+516    	; 0x23a <led2+0x34>
  36:	0f c1       	rjmp	.+542    	; 0x256 <led2+0x50>
  38:	1c c1       	rjmp	.+568    	; 0x272 <led2+0x6c>
  3a:	29 c1       	rjmp	.+594    	; 0x28e <led2+0x88>
  3c:	36 c1       	rjmp	.+620    	; 0x2aa <led2+0xa4>
  3e:	43 c1       	rjmp	.+646    	; 0x2c6 <led2+0xc0>
  40:	50 c1       	rjmp	.+672    	; 0x2e2 <led2+0xdc>
  42:	5d c1       	rjmp	.+698    	; 0x2fe <led2+0xf8>
  44:	6a c1       	rjmp	.+724    	; 0x31a <led2+0x114>

00000046 <__ctors_end>:
  46:	11 24       	eor	r1, r1
  48:	1f be       	out	0x3f, r1	; 63
  4a:	cf e5       	ldi	r28, 0x5F	; 95
  4c:	d1 e0       	ldi	r29, 0x01	; 1
  4e:	de bf       	out	0x3e, r29	; 62
  50:	cd bf       	out	0x3d, r28	; 61

00000052 <__do_copy_data>:
  52:	10 e0       	ldi	r17, 0x00	; 0
  54:	a0 e6       	ldi	r26, 0x60	; 96
  56:	b0 e0       	ldi	r27, 0x00	; 0
  58:	e4 e4       	ldi	r30, 0x44	; 68
  5a:	f4 e0       	ldi	r31, 0x04	; 4
  5c:	02 c0       	rjmp	.+4      	; 0x62 <.do_copy_data_start>

0000005e <.do_copy_data_loop>:
  5e:	05 90       	lpm	r0, Z+
  60:	0d 92       	st	X+, r0

00000062 <.do_copy_data_start>:
  62:	a0 36       	cpi	r26, 0x60	; 96
  64:	b1 07       	cpc	r27, r17
  66:	d9 f7       	brne	.-10     	; 0x5e <.do_copy_data_loop>

00000068 <__do_clear_bss>:
  68:	10 e0       	ldi	r17, 0x00	; 0
  6a:	a0 e6       	ldi	r26, 0x60	; 96
  6c:	b0 e0       	ldi	r27, 0x00	; 0
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
  72:	a0 36       	cpi	r26, 0x60	; 96
  74:	b1 07       	cpc	r27, r17
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
  78:	97 d1       	rcall	.+814    	; 0x3a8 <main>
  7a:	e2 c1       	rjmp	.+964    	; 0x440 <_exit>

0000007c <__bad_interrupt>:
  7c:	c1 cf       	rjmp	.-126    	; 0x0 <__vectors>

0000007e <adc>:



int adc(void)
{
DIDR0=1<<ADC1D;
  7e:	84 e0       	ldi	r24, 0x04	; 4
  80:	84 bb       	out	0x14, r24	; 20
ADMUX=0b00100001;
  82:	81 e2       	ldi	r24, 0x21	; 33
  84:	87 b9       	out	0x07, r24	; 7
ADCSRA=0b10000100;
  86:	84 e8       	ldi	r24, 0x84	; 132
  88:	86 b9       	out	0x06, r24	; 6
ADCSRA|=1<<ADSC;
  8a:	36 9a       	sbi	0x06, 6	; 6
while(!(ADCSRA&1<<ADIF));
  8c:	34 9b       	sbis	0x06, 4	; 6
  8e:	fe cf       	rjmp	.-4      	; 0x8c <adc+0xe>
ADCSRA&=~(1<<ADIF);
  90:	34 98       	cbi	0x06, 4	; 6

return (ADCH);
  92:	85 b1       	in	r24, 0x05	; 5
}
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	08 95       	ret

00000098 <shift>:



//********************************
char shift(uint8_t n)
{
  98:	28 2f       	mov	r18, r24
  9a:	90 e0       	ldi	r25, 0x00	; 0
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
  9c:	82 2f       	mov	r24, r18
  9e:	81 70       	andi	r24, 0x01	; 1
  a0:	82 95       	swap	r24
  a2:	80 7f       	andi	r24, 0xF0	; 240
  a4:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
  a6:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
  a8:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
  aa:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
  ac:	9f 5f       	subi	r25, 0xFF	; 255
  ae:	98 30       	cpi	r25, 0x08	; 8
  b0:	a9 f7       	brne	.-22     	; 0x9c <shift+0x4>
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
	}
}//*******************************
  b2:	08 95       	ret

000000b4 <clk>:


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
  b4:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
  b6:	c3 98       	cbi	0x18, 3	; 24
}//********************************
  b8:	08 95       	ret

000000ba <led1>:

//***********************************
void led1(char n)
{
	if(n<10)	
  ba:	8a 30       	cpi	r24, 0x0A	; 10
  bc:	08 f0       	brcs	.+2      	; 0xc0 <led1+0x6>
  be:	95 c0       	rjmp	.+298    	; 0x1ea <__stack+0x8b>
   {
      switch (n)
  c0:	e8 2f       	mov	r30, r24
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	ea 30       	cpi	r30, 0x0A	; 10
  c6:	f1 05       	cpc	r31, r1
  c8:	08 f0       	brcs	.+2      	; 0xcc <led1+0x12>
  ca:	9a c0       	rjmp	.+308    	; 0x200 <__stack+0xa1>
  cc:	e1 5f       	subi	r30, 0xF1	; 241
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	09 94       	ijmp
  d2:	2e eb       	ldi	r18, 0xBE	; 190
  d4:	90 e0       	ldi	r25, 0x00	; 0
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
  d6:	82 2f       	mov	r24, r18
  d8:	81 70       	andi	r24, 0x01	; 1
  da:	82 95       	swap	r24
  dc:	80 7f       	andi	r24, 0xF0	; 240
  de:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
  e0:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
  e2:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
  e4:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
  e6:	9f 5f       	subi	r25, 0xFF	; 255
  e8:	98 30       	cpi	r25, 0x08	; 8
  ea:	a9 f7       	brne	.-22     	; 0xd6 <led1+0x1c>
  ec:	89 c0       	rjmp	.+274    	; 0x200 <__stack+0xa1>
  ee:	28 e1       	ldi	r18, 0x18	; 24
  f0:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
  f2:	82 2f       	mov	r24, r18
  f4:	81 70       	andi	r24, 0x01	; 1
  f6:	82 95       	swap	r24
  f8:	80 7f       	andi	r24, 0xF0	; 240
  fa:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
  fc:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
  fe:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 100:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 102:	9f 5f       	subi	r25, 0xFF	; 255
 104:	98 30       	cpi	r25, 0x08	; 8
 106:	a9 f7       	brne	.-22     	; 0xf2 <led1+0x38>
 108:	7b c0       	rjmp	.+246    	; 0x200 <__stack+0xa1>
 10a:	2b ea       	ldi	r18, 0xAB	; 171
 10c:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 10e:	82 2f       	mov	r24, r18
 110:	81 70       	andi	r24, 0x01	; 1
 112:	82 95       	swap	r24
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 118:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 11a:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 11c:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 11e:	9f 5f       	subi	r25, 0xFF	; 255
 120:	98 30       	cpi	r25, 0x08	; 8
 122:	a9 f7       	brne	.-22     	; 0x10e <led1+0x54>
 124:	6d c0       	rjmp	.+218    	; 0x200 <__stack+0xa1>
 126:	2b e9       	ldi	r18, 0x9B	; 155
 128:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 12a:	82 2f       	mov	r24, r18
 12c:	81 70       	andi	r24, 0x01	; 1
 12e:	82 95       	swap	r24
 130:	80 7f       	andi	r24, 0xF0	; 240
 132:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 134:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 136:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 138:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 13a:	9f 5f       	subi	r25, 0xFF	; 255
 13c:	98 30       	cpi	r25, 0x08	; 8
 13e:	a9 f7       	brne	.-22     	; 0x12a <led1+0x70>
 140:	5f c0       	rjmp	.+190    	; 0x200 <__stack+0xa1>
 142:	2d e1       	ldi	r18, 0x1D	; 29
 144:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 146:	82 2f       	mov	r24, r18
 148:	81 70       	andi	r24, 0x01	; 1
 14a:	82 95       	swap	r24
 14c:	80 7f       	andi	r24, 0xF0	; 240
 14e:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 150:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 152:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 154:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 156:	9f 5f       	subi	r25, 0xFF	; 255
 158:	98 30       	cpi	r25, 0x08	; 8
 15a:	a9 f7       	brne	.-22     	; 0x146 <led1+0x8c>
 15c:	51 c0       	rjmp	.+162    	; 0x200 <__stack+0xa1>
 15e:	27 e9       	ldi	r18, 0x97	; 151
 160:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 162:	82 2f       	mov	r24, r18
 164:	81 70       	andi	r24, 0x01	; 1
 166:	82 95       	swap	r24
 168:	80 7f       	andi	r24, 0xF0	; 240
 16a:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 16c:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 16e:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 170:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 172:	9f 5f       	subi	r25, 0xFF	; 255
 174:	98 30       	cpi	r25, 0x08	; 8
 176:	a9 f7       	brne	.-22     	; 0x162 <__stack+0x3>
 178:	43 c0       	rjmp	.+134    	; 0x200 <__stack+0xa1>
 17a:	27 eb       	ldi	r18, 0xB7	; 183
 17c:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 17e:	82 2f       	mov	r24, r18
 180:	81 70       	andi	r24, 0x01	; 1
 182:	82 95       	swap	r24
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 188:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 18a:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 18c:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 18e:	9f 5f       	subi	r25, 0xFF	; 255
 190:	98 30       	cpi	r25, 0x08	; 8
 192:	a9 f7       	brne	.-22     	; 0x17e <__stack+0x1f>
 194:	35 c0       	rjmp	.+106    	; 0x200 <__stack+0xa1>
 196:	2a e1       	ldi	r18, 0x1A	; 26
 198:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 19a:	82 2f       	mov	r24, r18
 19c:	81 70       	andi	r24, 0x01	; 1
 19e:	82 95       	swap	r24
 1a0:	80 7f       	andi	r24, 0xF0	; 240
 1a2:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 1a4:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 1a6:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 1a8:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 1aa:	9f 5f       	subi	r25, 0xFF	; 255
 1ac:	98 30       	cpi	r25, 0x08	; 8
 1ae:	a9 f7       	brne	.-22     	; 0x19a <__stack+0x3b>
 1b0:	27 c0       	rjmp	.+78     	; 0x200 <__stack+0xa1>
 1b2:	2f eb       	ldi	r18, 0xBF	; 191
 1b4:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 1b6:	82 2f       	mov	r24, r18
 1b8:	81 70       	andi	r24, 0x01	; 1
 1ba:	82 95       	swap	r24
 1bc:	80 7f       	andi	r24, 0xF0	; 240
 1be:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 1c0:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 1c2:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 1c4:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 1c6:	9f 5f       	subi	r25, 0xFF	; 255
 1c8:	98 30       	cpi	r25, 0x08	; 8
 1ca:	a9 f7       	brne	.-22     	; 0x1b6 <__stack+0x57>
 1cc:	19 c0       	rjmp	.+50     	; 0x200 <__stack+0xa1>
 1ce:	2f e9       	ldi	r18, 0x9F	; 159
 1d0:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 1d2:	82 2f       	mov	r24, r18
 1d4:	81 70       	andi	r24, 0x01	; 1
 1d6:	82 95       	swap	r24
 1d8:	80 7f       	andi	r24, 0xF0	; 240
 1da:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 1dc:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 1de:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 1e0:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 1e2:	9f 5f       	subi	r25, 0xFF	; 255
 1e4:	98 30       	cpi	r25, 0x08	; 8
 1e6:	a9 f7       	brne	.-22     	; 0x1d2 <__stack+0x73>
 1e8:	0b c0       	rjmp	.+22     	; 0x200 <__stack+0xa1>
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 1ee:	82 95       	swap	r24
 1f0:	80 7f       	andi	r24, 0xF0	; 240
 1f2:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 1f4:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 1f6:	c3 98       	cbi	0x18, 3	; 24
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 1f8:	9f 5f       	subi	r25, 0xFF	; 255
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	98 30       	cpi	r25, 0x08	; 8
 1fe:	b9 f7       	brne	.-18     	; 0x1ee <__stack+0x8f>
         shift(0b10011111);
         break;
      }
	}
	else shift(0b00000001);
	PORTB=(1<<PB0);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	88 bb       	out	0x18, r24	; 24
	


}//**********************************
 204:	08 95       	ret

00000206 <led2>:

//***********************************
void led2(char n)
{
	if(n<10)	
 206:	8a 30       	cpi	r24, 0x0A	; 10
 208:	08 f0       	brcs	.+2      	; 0x20c <led2+0x6>
 20a:	95 c0       	rjmp	.+298    	; 0x336 <led2+0x130>
   {
      switch (n)
 20c:	e8 2f       	mov	r30, r24
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	ea 30       	cpi	r30, 0x0A	; 10
 212:	f1 05       	cpc	r31, r1
 214:	08 f0       	brcs	.+2      	; 0x218 <led2+0x12>
 216:	9a c0       	rjmp	.+308    	; 0x34c <led2+0x146>
 218:	e7 5e       	subi	r30, 0xE7	; 231
 21a:	ff 4f       	sbci	r31, 0xFF	; 255
 21c:	09 94       	ijmp
 21e:	2e eb       	ldi	r18, 0xBE	; 190
 220:	90 e0       	ldi	r25, 0x00	; 0
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 222:	82 2f       	mov	r24, r18
 224:	81 70       	andi	r24, 0x01	; 1
 226:	82 95       	swap	r24
 228:	80 7f       	andi	r24, 0xF0	; 240
 22a:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 22c:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 22e:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 230:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 232:	9f 5f       	subi	r25, 0xFF	; 255
 234:	98 30       	cpi	r25, 0x08	; 8
 236:	a9 f7       	brne	.-22     	; 0x222 <led2+0x1c>
 238:	89 c0       	rjmp	.+274    	; 0x34c <led2+0x146>
 23a:	28 e1       	ldi	r18, 0x18	; 24
 23c:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 23e:	82 2f       	mov	r24, r18
 240:	81 70       	andi	r24, 0x01	; 1
 242:	82 95       	swap	r24
 244:	80 7f       	andi	r24, 0xF0	; 240
 246:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 248:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 24a:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 24c:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 24e:	9f 5f       	subi	r25, 0xFF	; 255
 250:	98 30       	cpi	r25, 0x08	; 8
 252:	a9 f7       	brne	.-22     	; 0x23e <led2+0x38>
 254:	7b c0       	rjmp	.+246    	; 0x34c <led2+0x146>
 256:	2b ea       	ldi	r18, 0xAB	; 171
 258:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 25a:	82 2f       	mov	r24, r18
 25c:	81 70       	andi	r24, 0x01	; 1
 25e:	82 95       	swap	r24
 260:	80 7f       	andi	r24, 0xF0	; 240
 262:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 264:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 266:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 268:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 26a:	9f 5f       	subi	r25, 0xFF	; 255
 26c:	98 30       	cpi	r25, 0x08	; 8
 26e:	a9 f7       	brne	.-22     	; 0x25a <led2+0x54>
 270:	6d c0       	rjmp	.+218    	; 0x34c <led2+0x146>
 272:	2b e9       	ldi	r18, 0x9B	; 155
 274:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 276:	82 2f       	mov	r24, r18
 278:	81 70       	andi	r24, 0x01	; 1
 27a:	82 95       	swap	r24
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 280:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 282:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 284:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 286:	9f 5f       	subi	r25, 0xFF	; 255
 288:	98 30       	cpi	r25, 0x08	; 8
 28a:	a9 f7       	brne	.-22     	; 0x276 <led2+0x70>
 28c:	5f c0       	rjmp	.+190    	; 0x34c <led2+0x146>
 28e:	2d e1       	ldi	r18, 0x1D	; 29
 290:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 292:	82 2f       	mov	r24, r18
 294:	81 70       	andi	r24, 0x01	; 1
 296:	82 95       	swap	r24
 298:	80 7f       	andi	r24, 0xF0	; 240
 29a:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 29c:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 29e:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 2a0:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 2a2:	9f 5f       	subi	r25, 0xFF	; 255
 2a4:	98 30       	cpi	r25, 0x08	; 8
 2a6:	a9 f7       	brne	.-22     	; 0x292 <led2+0x8c>
 2a8:	51 c0       	rjmp	.+162    	; 0x34c <led2+0x146>
 2aa:	27 e9       	ldi	r18, 0x97	; 151
 2ac:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 2ae:	82 2f       	mov	r24, r18
 2b0:	81 70       	andi	r24, 0x01	; 1
 2b2:	82 95       	swap	r24
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 2b8:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 2ba:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 2bc:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 2be:	9f 5f       	subi	r25, 0xFF	; 255
 2c0:	98 30       	cpi	r25, 0x08	; 8
 2c2:	a9 f7       	brne	.-22     	; 0x2ae <led2+0xa8>
 2c4:	43 c0       	rjmp	.+134    	; 0x34c <led2+0x146>
 2c6:	27 eb       	ldi	r18, 0xB7	; 183
 2c8:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 2ca:	82 2f       	mov	r24, r18
 2cc:	81 70       	andi	r24, 0x01	; 1
 2ce:	82 95       	swap	r24
 2d0:	80 7f       	andi	r24, 0xF0	; 240
 2d2:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 2d4:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 2d6:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 2d8:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 2da:	9f 5f       	subi	r25, 0xFF	; 255
 2dc:	98 30       	cpi	r25, 0x08	; 8
 2de:	a9 f7       	brne	.-22     	; 0x2ca <led2+0xc4>
 2e0:	35 c0       	rjmp	.+106    	; 0x34c <led2+0x146>
 2e2:	2a e1       	ldi	r18, 0x1A	; 26
 2e4:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 2e6:	82 2f       	mov	r24, r18
 2e8:	81 70       	andi	r24, 0x01	; 1
 2ea:	82 95       	swap	r24
 2ec:	80 7f       	andi	r24, 0xF0	; 240
 2ee:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 2f0:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 2f2:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 2f4:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 2f6:	9f 5f       	subi	r25, 0xFF	; 255
 2f8:	98 30       	cpi	r25, 0x08	; 8
 2fa:	a9 f7       	brne	.-22     	; 0x2e6 <led2+0xe0>
 2fc:	27 c0       	rjmp	.+78     	; 0x34c <led2+0x146>
 2fe:	2f eb       	ldi	r18, 0xBF	; 191
 300:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 302:	82 2f       	mov	r24, r18
 304:	81 70       	andi	r24, 0x01	; 1
 306:	82 95       	swap	r24
 308:	80 7f       	andi	r24, 0xF0	; 240
 30a:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 30c:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 30e:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 310:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 312:	9f 5f       	subi	r25, 0xFF	; 255
 314:	98 30       	cpi	r25, 0x08	; 8
 316:	a9 f7       	brne	.-22     	; 0x302 <led2+0xfc>
 318:	19 c0       	rjmp	.+50     	; 0x34c <led2+0x146>
 31a:	2f e9       	ldi	r18, 0x9F	; 159
 31c:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 31e:	82 2f       	mov	r24, r18
 320:	81 70       	andi	r24, 0x01	; 1
 322:	82 95       	swap	r24
 324:	80 7f       	andi	r24, 0xF0	; 240
 326:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 328:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 32a:	c3 98       	cbi	0x18, 3	; 24
uint8_t a=n;
for(i=0;i<8;i++)
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
	clk();
	a=a>>1;	//na értékét jobbra tolom egyel
 32c:	26 95       	lsr	r18
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 32e:	9f 5f       	subi	r25, 0xFF	; 255
 330:	98 30       	cpi	r25, 0x08	; 8
 332:	a9 f7       	brne	.-22     	; 0x31e <led2+0x118>
 334:	0b c0       	rjmp	.+22     	; 0x34c <led2+0x146>
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
	{
	PORTB=(a&0b00000001)<<4;  //n legalsó bitjét kiíratom
 33a:	82 95       	swap	r24
 33c:	80 7f       	andi	r24, 0xF0	; 240
 33e:	88 bb       	out	0x18, r24	; 24


//********************************
void clk(void)
{
PORTB=PORTB|(1<<PB3);
 340:	c3 9a       	sbi	0x18, 3	; 24
PORTB=PORTB&~(1<<PB3);
 342:	c3 98       	cbi	0x18, 3	; 24
//********************************
char shift(uint8_t n)
{
uint8_t i;
uint8_t a=n;
for(i=0;i<8;i++)
 344:	9f 5f       	subi	r25, 0xFF	; 255
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	98 30       	cpi	r25, 0x08	; 8
 34a:	b9 f7       	brne	.-18     	; 0x33a <led2+0x134>
         shift(0b10011111);
         break;
      }
	}
	else shift(0b00000001);
	PORTB=(1<<PB1);
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	88 bb       	out	0x18, r24	; 24
	


}//**********************************
 350:	08 95       	ret

00000352 <led>:
}



void led(int i)
{
 352:	df 92       	push	r13
 354:	ef 92       	push	r14
 356:	ff 92       	push	r15
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
 360:	9c 01       	movw	r18, r24
//if(i>99){_delay_ms(111);return;}
long int k;
for(k=0;k<255;k++){
led1(i/10);_delay_us(800);
 362:	6a e0       	ldi	r22, 0x0A	; 10
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	45 d0       	rcall	.+138    	; 0x3f2 <__divmodhi4>
 368:	d6 2e       	mov	r13, r22
led2(i%10);_delay_us(800);}
 36a:	c9 01       	movw	r24, r18
 36c:	6a e0       	ldi	r22, 0x0A	; 10
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	40 d0       	rcall	.+128    	; 0x3f2 <__divmodhi4>
 372:	7c 01       	movw	r14, r24
 374:	c0 e0       	ldi	r28, 0x00	; 0
 376:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 378:	08 ec       	ldi	r16, 0xC8	; 200
 37a:	10 e0       	ldi	r17, 0x00	; 0
void led(int i)
{
//if(i>99){_delay_ms(111);return;}
long int k;
for(k=0;k<255;k++){
led1(i/10);_delay_us(800);
 37c:	8d 2d       	mov	r24, r13
 37e:	9d de       	rcall	.-710    	; 0xba <led1>
 380:	c8 01       	movw	r24, r16
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <led+0x30>
led2(i%10);_delay_us(800);}
 386:	c7 01       	movw	r24, r14
 388:	3e df       	rcall	.-388    	; 0x206 <led2>
 38a:	c8 01       	movw	r24, r16
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <led+0x3a>
 390:	21 96       	adiw	r28, 0x01	; 1

void led(int i)
{
//if(i>99){_delay_ms(111);return;}
long int k;
for(k=0;k<255;k++){
 392:	cf 3f       	cpi	r28, 0xFF	; 255
 394:	d1 05       	cpc	r29, r1
 396:	91 f7       	brne	.-28     	; 0x37c <led+0x2a>
led1(i/10);_delay_us(800);
led2(i%10);_delay_us(800);}
}
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	08 95       	ret

000003a8 <main>:




//main******************************************************************
int main(void) {
 3a8:	ff 92       	push	r15
 3aa:	0f 93       	push	r16
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 DDRB =0xFF;
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	87 bb       	out	0x17, r24	; 23

DIDR0=1<<ADC1D;
 3b6:	94 e0       	ldi	r25, 0x04	; 4
 3b8:	94 bb       	out	0x14, r25	; 20
ADMUX=0b00000001;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	87 b9       	out	0x07, r24	; 7

ADCSRA=0b10000100;
 3be:	84 e8       	ldi	r24, 0x84	; 132
 3c0:	86 b9       	out	0x06, r24	; 6
PORTB=1<<PB2;
 3c2:	98 bb       	out	0x18, r25	; 24
 3c4:	c0 e0       	ldi	r28, 0x00	; 0
 3c6:	d0 e0       	ldi	r29, 0x00	; 0



int adc(void)
{
DIDR0=1<<ADC1D;
 3c8:	84 e0       	ldi	r24, 0x04	; 4
 3ca:	f8 2e       	mov	r15, r24
ADMUX=0b00100001;
 3cc:	01 e2       	ldi	r16, 0x21	; 33
ADCSRA=0b10000100;
 3ce:	14 e8       	ldi	r17, 0x84	; 132



int adc(void)
{
DIDR0=1<<ADC1D;
 3d0:	f4 ba       	out	0x14, r15	; 20
ADMUX=0b00100001;
 3d2:	07 b9       	out	0x07, r16	; 7
ADCSRA=0b10000100;
 3d4:	16 b9       	out	0x06, r17	; 6
ADCSRA|=1<<ADSC;
 3d6:	36 9a       	sbi	0x06, 6	; 6
while(!(ADCSRA&1<<ADIF));
 3d8:	34 9b       	sbis	0x06, 4	; 6
 3da:	fe cf       	rjmp	.-4      	; 0x3d8 <main+0x30>
ADCSRA&=~(1<<ADIF);
 3dc:	34 98       	cbi	0x06, 4	; 6

return (ADCH);
 3de:	85 b1       	in	r24, 0x05	; 5
int k=0;
for(k=0;k<200;k++)
{
//led(k);

led(adc());
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	b7 df       	rcall	.-146    	; 0x352 <led>


while(8){

int k=0;
for(k=0;k<200;k++)
 3e4:	21 96       	adiw	r28, 0x01	; 1
 3e6:	c8 3c       	cpi	r28, 0xC8	; 200
 3e8:	d1 05       	cpc	r29, r1
 3ea:	94 f3       	brlt	.-28     	; 0x3d0 <main+0x28>
 3ec:	c0 e0       	ldi	r28, 0x00	; 0
 3ee:	d0 e0       	ldi	r29, 0x00	; 0
 3f0:	ef cf       	rjmp	.-34     	; 0x3d0 <main+0x28>

000003f2 <__divmodhi4>:
 3f2:	97 fb       	bst	r25, 7
 3f4:	09 2e       	mov	r0, r25
 3f6:	07 26       	eor	r0, r23
 3f8:	0a d0       	rcall	.+20     	; 0x40e <__divmodhi4_neg1>
 3fa:	77 fd       	sbrc	r23, 7
 3fc:	04 d0       	rcall	.+8      	; 0x406 <__divmodhi4_neg2>
 3fe:	0c d0       	rcall	.+24     	; 0x418 <__udivmodhi4>
 400:	06 d0       	rcall	.+12     	; 0x40e <__divmodhi4_neg1>
 402:	00 20       	and	r0, r0
 404:	1a f4       	brpl	.+6      	; 0x40c <__divmodhi4_exit>

00000406 <__divmodhi4_neg2>:
 406:	70 95       	com	r23
 408:	61 95       	neg	r22
 40a:	7f 4f       	sbci	r23, 0xFF	; 255

0000040c <__divmodhi4_exit>:
 40c:	08 95       	ret

0000040e <__divmodhi4_neg1>:
 40e:	f6 f7       	brtc	.-4      	; 0x40c <__divmodhi4_exit>
 410:	90 95       	com	r25
 412:	81 95       	neg	r24
 414:	9f 4f       	sbci	r25, 0xFF	; 255
 416:	08 95       	ret

00000418 <__udivmodhi4>:
 418:	aa 1b       	sub	r26, r26
 41a:	bb 1b       	sub	r27, r27
 41c:	51 e1       	ldi	r21, 0x11	; 17
 41e:	07 c0       	rjmp	.+14     	; 0x42e <__udivmodhi4_ep>

00000420 <__udivmodhi4_loop>:
 420:	aa 1f       	adc	r26, r26
 422:	bb 1f       	adc	r27, r27
 424:	a6 17       	cp	r26, r22
 426:	b7 07       	cpc	r27, r23
 428:	10 f0       	brcs	.+4      	; 0x42e <__udivmodhi4_ep>
 42a:	a6 1b       	sub	r26, r22
 42c:	b7 0b       	sbc	r27, r23

0000042e <__udivmodhi4_ep>:
 42e:	88 1f       	adc	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	5a 95       	dec	r21
 434:	a9 f7       	brne	.-22     	; 0x420 <__udivmodhi4_loop>
 436:	80 95       	com	r24
 438:	90 95       	com	r25
 43a:	bc 01       	movw	r22, r24
 43c:	cd 01       	movw	r24, r26
 43e:	08 95       	ret

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
