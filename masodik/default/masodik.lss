
masodik.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  000001d2  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000063  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a3  00000000  00000000  00000255  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f0  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001c2  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ee  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000028  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000802  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	4c c0       	rjmp	.+152    	; 0x9c <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	6f c0       	rjmp	.+222    	; 0xf2 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e5       	ldi	r30, 0x5E	; 94
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 36       	cpi	r26, 0x65	; 101
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	7f c0       	rjmp	.+254    	; 0x15a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
volatile uint8_t RED, GREEN, BLUE, szam=0, i=0;

int main() //Main fõprogram
{
//DDRD=0;	//DDR: data direction register itt állítom h ki=1 / be=0 menet legyenen  a láb
DDRC=1<<3|1<<4|1<<5;
  5e:	88 e3       	ldi	r24, 0x38	; 56
  60:	84 bb       	out	0x14, r24	; 20

MCUCR=1<<ISC01; //int0 enable
  62:	82 e0       	ldi	r24, 0x02	; 2
  64:	85 bf       	out	0x35, r24	; 53
GICR=1<<INT0;	// minterrupt enable
  66:	80 e4       	ldi	r24, 0x40	; 64
  68:	8b bf       	out	0x3b, r24	; 59

///////////////////
TCCR0=1;
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	83 bf       	out	0x33, r24	; 51
TIMSK=1;
  6e:	89 bf       	out	0x39, r24	; 57


RED=0;
  70:	10 92 64 00 	sts	0x0064, r1
GREEN=0;
  74:	10 92 63 00 	sts	0x0063, r1
BLUE=0;
  78:	10 92 62 00 	sts	0x0062, r1

sei();
  7c:	78 94       	sei
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	29 e1       	ldi	r18, 0x19	; 25
  80:	30 e0       	ldi	r19, 0x00	; 0

while(1)	//a proramnak sosem szabad véet érnie
	{
//	PORTC=16;
	RED+=10;
  82:	80 91 64 00 	lds	r24, 0x0064
  86:	86 5f       	subi	r24, 0xF6	; 246
  88:	80 93 64 00 	sts	0x0064, r24
  8c:	80 e1       	ldi	r24, 0x10	; 16
  8e:	97 e2       	ldi	r25, 0x27	; 39
  90:	f9 01       	movw	r30, r18
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <main+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  98:	d9 f7       	brne	.-10     	; 0x90 <main+0x32>
  9a:	f3 cf       	rjmp	.-26     	; 0x82 <main+0x24>

0000009c <__vector_1>:
	_delay_ms(1000);
	}
return 0;
}

ISR (INT0_vect) {
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24


if(i==0){GREEN=150;BLUE=0;i=1;}
  a8:	80 91 61 00 	lds	r24, 0x0061
  ac:	88 23       	and	r24, r24
  ae:	39 f4       	brne	.+14     	; 0xbe <__vector_1+0x22>
  b0:	86 e9       	ldi	r24, 0x96	; 150
  b2:	80 93 63 00 	sts	0x0063, r24
  b6:	10 92 62 00 	sts	0x0062, r1
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0a c0       	rjmp	.+20     	; 0xd2 <__vector_1+0x36>

else if(i==1){GREEN=0;BLUE=105;i=2;}
  be:	80 91 61 00 	lds	r24, 0x0061
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	49 f4       	brne	.+18     	; 0xd8 <__vector_1+0x3c>
  c6:	10 92 63 00 	sts	0x0063, r1
  ca:	89 e6       	ldi	r24, 0x69	; 105
  cc:	80 93 62 00 	sts	0x0062, r24
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	80 93 61 00 	sts	0x0061, r24
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <__vector_1+0x4a>

else{GREEN=50;BLUE=50;i=0;}
  d8:	82 e3       	ldi	r24, 0x32	; 50
  da:	80 93 63 00 	sts	0x0063, r24
  de:	80 93 62 00 	sts	0x0062, r24
  e2:	10 92 61 00 	sts	0x0061, r1





}
  e6:	8f 91       	pop	r24
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <__vector_9>:



ISR(TIMER0_OVF_vect){
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25

	if(RED>szam){Ron;}else{Roff;}
 100:	90 91 64 00 	lds	r25, 0x0064
 104:	80 91 60 00 	lds	r24, 0x0060
 108:	89 17       	cp	r24, r25
 10a:	10 f4       	brcc	.+4      	; 0x110 <__vector_9+0x1e>
 10c:	ad 9a       	sbi	0x15, 5	; 21
 10e:	03 c0       	rjmp	.+6      	; 0x116 <__vector_9+0x24>
 110:	85 b3       	in	r24, 0x15	; 21
 112:	80 7c       	andi	r24, 0xC0	; 192
 114:	85 bb       	out	0x15, r24	; 21
	if(GREEN>szam){Gon;}else{Goff;}
 116:	90 91 63 00 	lds	r25, 0x0063
 11a:	80 91 60 00 	lds	r24, 0x0060
 11e:	89 17       	cp	r24, r25
 120:	10 f4       	brcc	.+4      	; 0x126 <__vector_9+0x34>
 122:	ab 9a       	sbi	0x15, 3	; 21
 124:	03 c0       	rjmp	.+6      	; 0x12c <__vector_9+0x3a>
 126:	85 b3       	in	r24, 0x15	; 21
 128:	80 7f       	andi	r24, 0xF0	; 240
 12a:	85 bb       	out	0x15, r24	; 21
	if(BLUE>szam){Bon;}else{Boff;}
 12c:	90 91 62 00 	lds	r25, 0x0062
 130:	80 91 60 00 	lds	r24, 0x0060
 134:	89 17       	cp	r24, r25
 136:	10 f4       	brcc	.+4      	; 0x13c <__vector_9+0x4a>
 138:	ac 9a       	sbi	0x15, 4	; 21
 13a:	03 c0       	rjmp	.+6      	; 0x142 <__vector_9+0x50>
 13c:	85 b3       	in	r24, 0x15	; 21
 13e:	80 7e       	andi	r24, 0xE0	; 224
 140:	85 bb       	out	0x15, r24	; 21
	szam++;
 142:	80 91 60 00 	lds	r24, 0x0060
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 60 00 	sts	0x0060, r24

}
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
