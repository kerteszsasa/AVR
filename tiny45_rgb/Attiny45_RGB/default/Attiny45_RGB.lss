
Attiny45_RGB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003e  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000034e  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000180  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000298  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  00000a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f8  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001bb  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000090  00000000  00000000  00000da7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a0 30       	cpi	r26, 0x00	; 0
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
  c8:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <Init>:
#define button (PINB & 0b00001000)


//---------------------------------------------
void Init(void) {
	DDRB     |= (1<<PINB0)		//kimenet
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	87 60       	ori	r24, 0x07	; 7
  d4:	87 bb       	out	0x17, r24	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d6:	84 ec       	ldi	r24, 0xC4	; 196
  d8:	99 e0       	ldi	r25, 0x09	; 9
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <Init+0xa>
             |  (1<<PINB2)		//kimenet
			 |  (0<<PINB3);		//bemenet

			 _delay_ms(10);

			 PORTB|=0b00000111;
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	87 60       	ori	r24, 0x07	; 7
  e2:	88 bb       	out	0x18, r24	; 24

}
  e4:	08 95       	ret

000000e6 <RGB>:
//................................................


//-----------------------------------------------
void RGB(unsigned char  red,unsigned char  green,unsigned char  blue) {
  e6:	10 c0       	rjmp	.+32     	; 0x108 <RGB+0x22>
	while(red ||green||blue) {
		if(red){
			redon;
  e8:	c1 98       	cbi	0x18, 1	; 24
			red--;
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <RGB+0xa>
		}
		else redoff;
  ee:	c1 9a       	sbi	0x18, 1	; 24

		if(green){
  f0:	66 23       	and	r22, r22
  f2:	19 f0       	breq	.+6      	; 0xfa <RGB+0x14>
			greenon;
  f4:	c2 98       	cbi	0x18, 2	; 24
			green--;
  f6:	61 50       	subi	r22, 0x01	; 1
  f8:	01 c0       	rjmp	.+2      	; 0xfc <RGB+0x16>
		}
		else greenoff;
  fa:	c2 9a       	sbi	0x18, 2	; 24

		if(blue){
  fc:	44 23       	and	r20, r20
  fe:	19 f0       	breq	.+6      	; 0x106 <RGB+0x20>
			blueon;
 100:	c0 98       	cbi	0x18, 0	; 24
			blue--;
 102:	41 50       	subi	r20, 0x01	; 1
 104:	01 c0       	rjmp	.+2      	; 0x108 <RGB+0x22>
		}
		else blueoff;
 106:	c0 9a       	sbi	0x18, 0	; 24
//................................................


//-----------------------------------------------
void RGB(unsigned char  red,unsigned char  green,unsigned char  blue) {
	while(red ||green||blue) {
 108:	88 23       	and	r24, r24
 10a:	71 f7       	brne	.-36     	; 0xe8 <RGB+0x2>
 10c:	66 23       	and	r22, r22
 10e:	79 f7       	brne	.-34     	; 0xee <RGB+0x8>
 110:	44 23       	and	r20, r20
 112:	69 f7       	brne	.-38     	; 0xee <RGB+0x8>
		}
		else blueoff;

	
	}
}
 114:	08 95       	ret

00000116 <Led>:
//.....................................................................


//------------------------------------------------------
void Led(unsigned char  red,unsigned char  green,unsigned char  blue){
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	18 2f       	mov	r17, r24
 11e:	06 2f       	mov	r16, r22
 120:	f4 2e       	mov	r15, r20
	int count=0;				//fade sebesség
	for(count=2;count>0;count--){
		RGB(red,green,blue);
 122:	0e 94 73 00 	call	0xe6	; 0xe6 <RGB>
 126:	81 2f       	mov	r24, r17
 128:	60 2f       	mov	r22, r16
 12a:	4f 2d       	mov	r20, r15
 12c:	0e 94 73 00 	call	0xe6	; 0xe6 <RGB>
	}
}
 130:	1f 91       	pop	r17
 132:	0f 91       	pop	r16
 134:	ff 90       	pop	r15
 136:	08 95       	ret

00000138 <Kever>:
//........................................................................


//-----------------------------------------------------------------------------
void Kever(){
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	df 93       	push	r29
 144:	cf 93       	push	r28
 146:	0f 92       	push	r0
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	90 e8       	ldi	r25, 0x80	; 128
 152:	f9 2e       	mov	r15, r25
 154:	0e e1       	ldi	r16, 0x1E	; 30
 156:	18 ec       	ldi	r17, 0xC8	; 200
 158:	80 e5       	ldi	r24, 0x50	; 80
 15a:	c8 2e       	mov	r12, r24
 15c:	83 ec       	ldi	r24, 0xC3	; 195
 15e:	d8 2e       	mov	r13, r24
 160:	52 c0       	rjmp	.+164    	; 0x206 <Kever+0xce>
  
                 for(;!button;) {     // vegtelen ciklus , amíg gombot nem nyomok
  
                     
  
                    if(!(R_duty||G_duty||(!B_duty))) {blueon; _delay_ms(200);}		//ez csak azért kell h a tiszta színek is sokáig látszódjanak, itt egy pillanatra megáll a fade
 162:	ff 20       	and	r15, r15
 164:	51 f4       	brne	.+20     	; 0x17a <Kever+0x42>
 166:	00 23       	and	r16, r16
 168:	21 f4       	brne	.+8      	; 0x172 <Kever+0x3a>
 16a:	11 23       	and	r17, r17
 16c:	71 f0       	breq	.+28     	; 0x18a <Kever+0x52>
 16e:	c0 98       	cbi	0x18, 0	; 24
 170:	09 c0       	rjmp	.+18     	; 0x184 <Kever+0x4c>
					if(!(R_duty||B_duty||(!G_duty))) {greenon; _delay_ms(200);}
 172:	11 23       	and	r17, r17
 174:	51 f4       	brne	.+20     	; 0x18a <Kever+0x52>
 176:	c2 98       	cbi	0x18, 2	; 24
 178:	05 c0       	rjmp	.+10     	; 0x184 <Kever+0x4c>
					 if(!(B_duty||G_duty||(!R_duty))) {redon; _delay_ms(200);}
 17a:	11 23       	and	r17, r17
 17c:	31 f4       	brne	.+12     	; 0x18a <Kever+0x52>
 17e:	00 23       	and	r16, r16
 180:	21 f4       	brne	.+8      	; 0x18a <Kever+0x52>
 182:	c1 98       	cbi	0x18, 1	; 24
 184:	c6 01       	movw	r24, r12
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <Kever+0x4e>
				
					 switch(val) {                    // színek fadelése
 18a:	e9 81       	ldd	r30, Y+1	; 0x01
 18c:	e3 30       	cpi	r30, 0x03	; 3
 18e:	e1 f0       	breq	.+56     	; 0x1c8 <Kever+0x90>
 190:	e4 30       	cpi	r30, 0x04	; 4
 192:	28 f4       	brcc	.+10     	; 0x19e <Kever+0x66>
 194:	e1 30       	cpi	r30, 0x01	; 1
 196:	59 f0       	breq	.+22     	; 0x1ae <Kever+0x76>
 198:	e2 30       	cpi	r30, 0x02	; 2
 19a:	a9 f5       	brne	.+106    	; 0x206 <Kever+0xce>
 19c:	0f c0       	rjmp	.+30     	; 0x1bc <Kever+0x84>
 19e:	f9 81       	ldd	r31, Y+1	; 0x01
 1a0:	f5 30       	cpi	r31, 0x05	; 5
 1a2:	f9 f0       	breq	.+62     	; 0x1e2 <Kever+0xaa>
 1a4:	f5 30       	cpi	r31, 0x05	; 5
 1a6:	b0 f0       	brcs	.+44     	; 0x1d4 <Kever+0x9c>
 1a8:	f6 30       	cpi	r31, 0x06	; 6
 1aa:	69 f5       	brne	.+90     	; 0x206 <Kever+0xce>
 1ac:	21 c0       	rjmp	.+66     	; 0x1f0 <Kever+0xb8>
  
                         case 1:    if(R_duty<0xFF) {R_duty++; Led(R_duty,G_duty,B_duty);}
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	f8 16       	cp	r15, r24
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <Kever+0x80>
 1b4:	e2 e0       	ldi	r30, 0x02	; 2
 1b6:	11 c0       	rjmp	.+34     	; 0x1da <Kever+0xa2>
 1b8:	f3 94       	inc	r15
 1ba:	20 c0       	rjmp	.+64     	; 0x1fc <Kever+0xc4>
  
                                 else val = 2;
  
                                 break;
  
                        case 2:    if(B_duty) {B_duty--;Led(R_duty,G_duty,B_duty);}
 1bc:	11 23       	and	r17, r17
 1be:	11 f4       	brne	.+4      	; 0x1c4 <Kever+0x8c>
 1c0:	f3 e0       	ldi	r31, 0x03	; 3
 1c2:	12 c0       	rjmp	.+36     	; 0x1e8 <Kever+0xb0>
 1c4:	11 50       	subi	r17, 0x01	; 1
 1c6:	1a c0       	rjmp	.+52     	; 0x1fc <Kever+0xc4>
  
                                 else val = 3;
  
                                 break;
  
                         case 3:    if(G_duty<0xFF){ G_duty++;Led(R_duty,G_duty,B_duty);}
 1c8:	0f 3f       	cpi	r16, 0xFF	; 255
 1ca:	11 f4       	brne	.+4      	; 0x1d0 <Kever+0x98>
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	13 c0       	rjmp	.+38     	; 0x1f6 <Kever+0xbe>
 1d0:	0f 5f       	subi	r16, 0xFF	; 255
 1d2:	14 c0       	rjmp	.+40     	; 0x1fc <Kever+0xc4>
  
                                 else val = 4;
  
                                 break;           // break!! Különben továbbmegy..
  
                         case 4:    if(R_duty) {R_duty--;Led(R_duty,G_duty,B_duty);}
 1d4:	ff 20       	and	r15, r15
 1d6:	19 f4       	brne	.+6      	; 0x1de <Kever+0xa6>
 1d8:	e5 e0       	ldi	r30, 0x05	; 5
 1da:	e9 83       	std	Y+1, r30	; 0x01
 1dc:	14 c0       	rjmp	.+40     	; 0x206 <Kever+0xce>
 1de:	fa 94       	dec	r15
 1e0:	0d c0       	rjmp	.+26     	; 0x1fc <Kever+0xc4>
  
                                 else val = 5;
  
                                 break;
  
                         case 5:    if(B_duty<0xFF) {B_duty++;Led(R_duty,G_duty,B_duty);}
 1e2:	1f 3f       	cpi	r17, 0xFF	; 255
 1e4:	19 f4       	brne	.+6      	; 0x1ec <Kever+0xb4>
 1e6:	f6 e0       	ldi	r31, 0x06	; 6
 1e8:	f9 83       	std	Y+1, r31	; 0x01
 1ea:	0d c0       	rjmp	.+26     	; 0x206 <Kever+0xce>
 1ec:	1f 5f       	subi	r17, 0xFF	; 255
 1ee:	06 c0       	rjmp	.+12     	; 0x1fc <Kever+0xc4>
  
                                 else val = 6;
  
                                 break;
  
                         case 6:    if(G_duty) {G_duty--;Led(R_duty,G_duty,B_duty);}
 1f0:	00 23       	and	r16, r16
 1f2:	19 f4       	brne	.+6      	; 0x1fa <Kever+0xc2>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	89 83       	std	Y+1, r24	; 0x01
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <Kever+0xce>
 1fa:	01 50       	subi	r16, 0x01	; 1
 1fc:	8f 2d       	mov	r24, r15
 1fe:	60 2f       	mov	r22, r16
 200:	41 2f       	mov	r20, r17
 202:	0e 94 8b 00 	call	0x116	; 0x116 <Led>
  
 unsigned char B_duty = 200;
  
       
  
                 for(;!button;) {     // vegtelen ciklus , amíg gombot nem nyomok
 206:	b3 9b       	sbis	0x16, 3	; 22
 208:	ac cf       	rjmp	.-168    	; 0x162 <Kever+0x2a>
  
                   
  
                 }

}
 20a:	0f 90       	pop	r0
 20c:	cf 91       	pop	r28
 20e:	df 91       	pop	r29
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	df 90       	pop	r13
 218:	cf 90       	pop	r12
 21a:	08 95       	ret

0000021c <main>:
//...........................................................................



//---------------------------------------------------------------------------
int main(void) {
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
#define button (PINB & 0b00001000)


//---------------------------------------------
void Init(void) {
	DDRB     |= (1<<PINB0)		//kimenet
 220:	87 b3       	in	r24, 0x17	; 23
 222:	87 60       	ori	r24, 0x07	; 7
 224:	87 bb       	out	0x17, r24	; 23
 226:	84 ec       	ldi	r24, 0xC4	; 196
 228:	99 e0       	ldi	r25, 0x09	; 9
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <main+0xe>
             |  (1<<PINB2)		//kimenet
			 |  (0<<PINB3);		//bemenet

			 _delay_ms(10);

			 PORTB|=0b00000111;
 22e:	88 b3       	in	r24, 0x18	; 24
 230:	87 60       	ori	r24, 0x07	; 7
 232:	88 bb       	out	0x18, r24	; 24
 234:	8a ef       	ldi	r24, 0xFA	; 250
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x1c>
//---------------------------------------------------------------------------
int main(void) {
	Init();
	_delay_ms(1);
	while(1){
		for(;!button;){RGB(0,255,0);}
 23c:	c0 e5       	ldi	r28, 0x50	; 80
 23e:	d3 ec       	ldi	r29, 0xC3	; 195
 240:	05 c0       	rjmp	.+10     	; 0x24c <main+0x30>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	6f ef       	ldi	r22, 0xFF	; 255
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	0e 94 73 00 	call	0xe6	; 0xe6 <RGB>
 24c:	b3 9b       	sbis	0x16, 3	; 22
 24e:	f9 cf       	rjmp	.-14     	; 0x242 <main+0x26>
 250:	ce 01       	movw	r24, r28
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <main+0x36>
 256:	05 c0       	rjmp	.+10     	; 0x262 <main+0x46>
		_delay_ms(200);

		for(;!button;){RGB(255,255,0);}
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	6f ef       	ldi	r22, 0xFF	; 255
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	0e 94 73 00 	call	0xe6	; 0xe6 <RGB>
 262:	b3 9b       	sbis	0x16, 3	; 22
 264:	f9 cf       	rjmp	.-14     	; 0x258 <main+0x3c>
 266:	ce 01       	movw	r24, r28
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <main+0x4c>
		_delay_ms(200);
 	
		Kever();
 26c:	0e 94 9c 00 	call	0x138	; 0x138 <Kever>
 270:	ce 01       	movw	r24, r28
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <main+0x56>
 276:	ea cf       	rjmp	.-44     	; 0x24c <main+0x30>

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
