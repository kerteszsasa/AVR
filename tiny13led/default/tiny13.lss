
tiny13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000036  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000191  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000eb  00000000  00000000  000002ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000017f  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c8  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	20 c0       	rjmp	.+64     	; 0x48 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e2 eb       	ldi	r30, 0xB2	; 178
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	02 c0       	rjmp	.+4      	; 0x2c <.do_copy_data_start>

00000028 <.do_copy_data_loop>:
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0

0000002c <.do_copy_data_start>:
  2c:	a0 36       	cpi	r26, 0x60	; 96
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <.do_copy_data_loop>

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 36       	cpi	r26, 0x60	; 96
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	25 d0       	rcall	.+74     	; 0x8e <main>
  44:	34 c0       	rjmp	.+104    	; 0xae <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_3>:
#define off PORTB=0


//*******************
ISR(TIM0_OVF_vect )
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  56:	84 ec       	ldi	r24, 0xC4	; 196
  58:	99 e0       	ldi	r25, 0x09	; 9
  5a:	01 97       	sbiw	r24, 0x01	; 1
  5c:	f1 f7       	brne	.-4      	; 0x5a <__vector_3+0x12>
	//on;
	_delay_ms(10);
}
  5e:	9f 91       	pop	r25
  60:	8f 91       	pop	r24
  62:	0f 90       	pop	r0
  64:	0f be       	out	0x3f, r0	; 63
  66:	0f 90       	pop	r0
  68:	1f 90       	pop	r1
  6a:	18 95       	reti

0000006c <GetData>:

//////////////////////////////////
uint16_t GetData(){
	uint16_t clk =0;
	DDRB |= 8; //set output
  6c:	bb 9a       	sbi	0x17, 3	; 23
	PORTB |= 8; //set high
  6e:	c3 9a       	sbi	0x18, 3	; 24
  70:	88 e8       	ldi	r24, 0x88	; 136
  72:	93 e1       	ldi	r25, 0x13	; 19
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <GetData+0x8>
	_delay_ms(20);
		DDRB &= ~8; //set input
  78:	bb 98       	cbi	0x17, 3	; 23
	PORTB &= ~8; //set tri state
  7a:	c3 98       	cbi	0x18, 3	; 24
  7c:	20 e0       	ldi	r18, 0x00	; 0
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	02 c0       	rjmp	.+4      	; 0x86 <GetData+0x1a>
	while((PINB&8) ){
		clk++;
  82:	2f 5f       	subi	r18, 0xFF	; 255
  84:	3f 4f       	sbci	r19, 0xFF	; 255
	DDRB |= 8; //set output
	PORTB |= 8; //set high
	_delay_ms(20);
		DDRB &= ~8; //set input
	PORTB &= ~8; //set tri state
	while((PINB&8) ){
  86:	b3 99       	sbic	0x16, 3	; 22
  88:	fc cf       	rjmp	.-8      	; 0x82 <GetData+0x16>
		clk++;
	//	_delay_us(1);
		}
	return clk;
	}
  8a:	c9 01       	movw	r24, r18
  8c:	08 95       	ret

0000008e <main>:




int main(void)
{
  8e:	1f 93       	push	r17
char i=0;

TCCR0B =  (1<<CS02) |(1<<CS00); //clock prescaler
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	83 bf       	out	0x33, r24	; 51
TIMSK0 = 1<<TOIE0; //int enable
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	89 bf       	out	0x39, r24	; 57





DDRB=0b00010000;
  98:	80 e1       	ldi	r24, 0x10	; 16
  9a:	87 bb       	out	0x17, r24	; 23
while(1){
	
	if(GetData() >100)on;
  9c:	10 e1       	ldi	r17, 0x10	; 16
  9e:	e6 df       	rcall	.-52     	; 0x6c <GetData>
  a0:	85 36       	cpi	r24, 0x65	; 101
  a2:	91 05       	cpc	r25, r1
  a4:	10 f0       	brcs	.+4      	; 0xaa <__stack+0xb>
  a6:	18 bb       	out	0x18, r17	; 24
  a8:	fa cf       	rjmp	.-12     	; 0x9e <main+0x10>
	else off;
  aa:	18 ba       	out	0x18, r1	; 24
  ac:	f8 cf       	rjmp	.-16     	; 0x9e <main+0x10>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
