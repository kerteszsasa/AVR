
DDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  000012ee  00001382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000033  00800194  00800194  000014b6  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000014b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000300  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d3a  00000000  00000000  00001856  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004af  00000000  00000000  00003590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001573  00000000  00000000  00003a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  00004fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  00005194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012dc  00000000  00000000  000054f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000067d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1e c0       	rjmp	.+60     	; 0x3e <__ctors_end>
       2:	81 c0       	rjmp	.+258    	; 0x106 <__vector_1>
       4:	37 c0       	rjmp	.+110    	; 0x74 <__bad_interrupt>
       6:	36 c0       	rjmp	.+108    	; 0x74 <__bad_interrupt>
       8:	35 c0       	rjmp	.+106    	; 0x74 <__bad_interrupt>
       a:	34 c0       	rjmp	.+104    	; 0x74 <__bad_interrupt>
       c:	33 c0       	rjmp	.+102    	; 0x74 <__bad_interrupt>
       e:	32 c0       	rjmp	.+100    	; 0x74 <__bad_interrupt>
      10:	31 c0       	rjmp	.+98     	; 0x74 <__bad_interrupt>
      12:	36 c0       	rjmp	.+108    	; 0x80 <__vector_9>
      14:	2f c0       	rjmp	.+94     	; 0x74 <__bad_interrupt>
      16:	ac c4       	rjmp	.+2392   	; 0x970 <__vector_11>
      18:	2d c0       	rjmp	.+90     	; 0x74 <__bad_interrupt>
      1a:	2c c0       	rjmp	.+88     	; 0x74 <__bad_interrupt>
      1c:	2b c0       	rjmp	.+86     	; 0x74 <__bad_interrupt>
      1e:	2a c0       	rjmp	.+84     	; 0x74 <__bad_interrupt>
      20:	29 c0       	rjmp	.+82     	; 0x74 <__bad_interrupt>
      22:	28 c0       	rjmp	.+80     	; 0x74 <__bad_interrupt>
      24:	27 c0       	rjmp	.+78     	; 0x74 <__bad_interrupt>
      26:	6d c5       	rjmp	.+2778   	; 0xb02 <Console_SetFreq+0x18>
      28:	77 c5       	rjmp	.+2798   	; 0xb18 <Console_SetFreq+0x2e>
      2a:	81 c5       	rjmp	.+2818   	; 0xb2e <Console_SetFreq+0x44>
      2c:	8b c5       	rjmp	.+2838   	; 0xb44 <Console_SetFreq+0x5a>
      2e:	95 c5       	rjmp	.+2858   	; 0xb5a <Console_SetFreq+0x70>
      30:	a8 c5       	rjmp	.+2896   	; 0xb82 <Console_SetFreq+0x98>
      32:	bb c5       	rjmp	.+2934   	; 0xbaa <Console_SetFreq+0xc0>
      34:	ce c5       	rjmp	.+2972   	; 0xbd2 <Console_SetFreq+0xe8>
      36:	e1 c5       	rjmp	.+3010   	; 0xbfa <Console_SetFreq+0x110>
      38:	f4 c5       	rjmp	.+3048   	; 0xc22 <Console_SetFreq+0x138>
      3a:	07 c6       	rjmp	.+3086   	; 0xc4a <Console_SetFreq+0x160>
      3c:	1a c6       	rjmp	.+3124   	; 0xc72 <Console_SetFreq+0x188>

0000003e <__ctors_end>:
      3e:	11 24       	eor	r1, r1
      40:	1f be       	out	0x3f, r1	; 63
      42:	cf e5       	ldi	r28, 0x5F	; 95
      44:	d4 e0       	ldi	r29, 0x04	; 4
      46:	de bf       	out	0x3e, r29	; 62
      48:	cd bf       	out	0x3d, r28	; 61

0000004a <__do_copy_data>:
      4a:	11 e0       	ldi	r17, 0x01	; 1
      4c:	a0 e6       	ldi	r26, 0x60	; 96
      4e:	b0 e0       	ldi	r27, 0x00	; 0
      50:	ee ee       	ldi	r30, 0xEE	; 238
      52:	f2 e1       	ldi	r31, 0x12	; 18
      54:	02 c0       	rjmp	.+4      	; 0x5a <.do_copy_data_start>

00000056 <.do_copy_data_loop>:
      56:	05 90       	lpm	r0, Z+
      58:	0d 92       	st	X+, r0

0000005a <.do_copy_data_start>:
      5a:	a4 39       	cpi	r26, 0x94	; 148
      5c:	b1 07       	cpc	r27, r17
      5e:	d9 f7       	brne	.-10     	; 0x56 <.do_copy_data_loop>

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a4 e9       	ldi	r26, 0x94	; 148
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a7 3c       	cpi	r26, 0xC7	; 199
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	59 d0       	rcall	.+178    	; 0x124 <main>
      72:	3b c9       	rjmp	.-3466   	; 0xfffff2ea <__eeprom_end+0xff7ef2ea>

00000074 <__bad_interrupt>:
      74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <InitTimer>:


//***********************
void InitTimer(void){
	
	TCCR0= 1<<CS02  | 1<<CS00;  // timer enable 1024 prescaler
      76:	85 e0       	ldi	r24, 0x05	; 5
      78:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1<<TOIE0 ; //tim0 int enable
      7a:	81 e0       	ldi	r24, 0x01	; 1
      7c:	89 bf       	out	0x39, r24	; 57
}
      7e:	08 95       	ret

00000080 <__vector_9>:

//**************************************
ISR(TIMER0_OVF_vect){
      80:	1f 92       	push	r1
      82:	0f 92       	push	r0
      84:	0f b6       	in	r0, 0x3f	; 63
      86:	0f 92       	push	r0
      88:	11 24       	eor	r1, r1
      8a:	2f 93       	push	r18
      8c:	3f 93       	push	r19
      8e:	4f 93       	push	r20
      90:	5f 93       	push	r21
      92:	8f 93       	push	r24
      94:	9f 93       	push	r25

	if(timerdivider>30*runningtime){
      96:	20 91 03 01 	lds	r18, 0x0103
      9a:	30 91 04 01 	lds	r19, 0x0104
      9e:	40 91 94 01 	lds	r20, 0x0194
      a2:	50 91 95 01 	lds	r21, 0x0195
      a6:	c9 01       	movw	r24, r18
      a8:	88 0f       	add	r24, r24
      aa:	99 1f       	adc	r25, r25
      ac:	82 0f       	add	r24, r18
      ae:	93 1f       	adc	r25, r19
      b0:	9c 01       	movw	r18, r24
      b2:	22 0f       	add	r18, r18
      b4:	33 1f       	adc	r19, r19
      b6:	22 0f       	add	r18, r18
      b8:	33 1f       	adc	r19, r19
      ba:	82 0f       	add	r24, r18
      bc:	93 1f       	adc	r25, r19
      be:	88 0f       	add	r24, r24
      c0:	99 1f       	adc	r25, r25
      c2:	84 17       	cp	r24, r20
      c4:	95 07       	cpc	r25, r21
      c6:	34 f4       	brge	.+12     	; 0xd4 <__vector_9+0x54>

		measure_running=0; // leállítjuk a mérést
      c8:	10 92 99 01 	sts	0x0199, r1
		timerdivider=0;
      cc:	10 92 95 01 	sts	0x0195, r1
      d0:	10 92 94 01 	sts	0x0194, r1
	}
	timerdivider++;
      d4:	80 91 94 01 	lds	r24, 0x0194
      d8:	90 91 95 01 	lds	r25, 0x0195
      dc:	01 96       	adiw	r24, 0x01	; 1
      de:	90 93 95 01 	sts	0x0195, r25
      e2:	80 93 94 01 	sts	0x0194, r24


}
      e6:	9f 91       	pop	r25
      e8:	8f 91       	pop	r24
      ea:	5f 91       	pop	r21
      ec:	4f 91       	pop	r20
      ee:	3f 91       	pop	r19
      f0:	2f 91       	pop	r18
      f2:	0f 90       	pop	r0
      f4:	0f be       	out	0x3f, r0	; 63
      f6:	0f 90       	pop	r0
      f8:	1f 90       	pop	r1
      fa:	18 95       	reti

000000fc <InitEXTINT>:

//*******************
void InitEXTINT(void)
{
	MCUCR=1<<ISC11|1<<ISC01;
      fc:	8a e0       	ldi	r24, 0x0A	; 10
      fe:	85 bf       	out	0x35, r24	; 53
	GICR=0<<INT1|1<<INT0; //INT1 disabled //INT0 enabled
     100:	80 e4       	ldi	r24, 0x40	; 64
     102:	8b bf       	out	0x3b, r24	; 59
}
     104:	08 95       	ret

00000106 <__vector_1>:



//**********************
ISR (INT0_vect){
     106:	1f 92       	push	r1
     108:	0f 92       	push	r0
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	0f 92       	push	r0
     10e:	11 24       	eor	r1, r1
     110:	8f 93       	push	r24
	start=1;	//Start button
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	80 93 9c 01 	sts	0x019C, r24
	
}
     118:	8f 91       	pop	r24
     11a:	0f 90       	pop	r0
     11c:	0f be       	out	0x3f, r0	; 63
     11e:	0f 90       	pop	r0
     120:	1f 90       	pop	r1
     122:	18 95       	reti

00000124 <main>:



//***********main****************************
int main( void )
{
     124:	2f 92       	push	r2
     126:	3f 92       	push	r3
     128:	4f 92       	push	r4
     12a:	5f 92       	push	r5
     12c:	6f 92       	push	r6
     12e:	7f 92       	push	r7
     130:	8f 92       	push	r8
     132:	9f 92       	push	r9
     134:	af 92       	push	r10
     136:	bf 92       	push	r11
     138:	cf 92       	push	r12
     13a:	df 92       	push	r13
     13c:	ef 92       	push	r14
     13e:	ff 92       	push	r15
     140:	0f 93       	push	r16
     142:	1f 93       	push	r17
     144:	cf 93       	push	r28
     146:	df 93       	push	r29

	USART_Init ( MYUBRR );
     148:	89 e1       	ldi	r24, 0x19	; 25
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	eb d3       	rcall	.+2006   	; 0x924 <USART_Init>
	Konfig10bitADC();
     14e:	54 d4       	rcall	.+2216   	; 0x9f8 <Konfig10bitADC>
	InitEXTINT();
     150:	d5 df       	rcall	.-86     	; 0xfc <InitEXTINT>
	//InitTimer();
	sei();
     152:	78 94       	sei


	PORTB=0b00000011; 
     154:	83 e0       	ldi	r24, 0x03	; 3
     156:	88 bb       	out	0x18, r24	; 24
	DDRB=0b00000111;
     158:	87 e0       	ldi	r24, 0x07	; 7
     15a:	87 bb       	out	0x17, r24	; 23
	PORTD=0b11111100;
     15c:	8c ef       	ldi	r24, 0xFC	; 252
     15e:	82 bb       	out	0x12, r24	; 18
	DDRD=0b11111000;
     160:	88 ef       	ldi	r24, 0xF8	; 248
     162:	81 bb       	out	0x11, r24	; 17
	DDRC=0b00000001;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	84 bb       	out	0x14, r24	; 20

	InitMessage();
     168:	44 d7       	rcall	.+3720   	; 0xff2 <InitMessage>


		 if(start){

		 	// Futási idõ beállítása
			runningtime=60*( Beolvas10bitADC(4)/100 +1 );
     16a:	0f 2e       	mov	r0, r31
     16c:	fc e3       	ldi	r31, 0x3C	; 60
     16e:	6f 2e       	mov	r6, r31
     170:	77 24       	eor	r7, r7
     172:	f0 2d       	mov	r31, r0
			putnum(runningtime/60);
			putstring(" Perc ");
     174:	0f 2e       	mov	r0, r31
     176:	f0 e6       	ldi	r31, 0x60	; 96
     178:	4f 2e       	mov	r4, r31
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	5f 2e       	mov	r5, r31
     17e:	f0 2d       	mov	r31, r0


			TCNT0=0; //timer nullázása
     180:	0f 2e       	mov	r0, r31
     182:	f2 e5       	ldi	r31, 0x52	; 82
     184:	2f 2e       	mov	r2, r31
     186:	33 24       	eor	r3, r3
     188:	f0 2d       	mov	r31, r0
			if(716 <= ADVALUE && ADVALUE <= 921) sweeptype = 5;
			if(921 <= ADVALUE && ADVALUE <=1024) sweeptype = 6;



			RIGHT_btn();
     18a:	0f 2e       	mov	r0, r31
     18c:	f2 e3       	ldi	r31, 0x32	; 50
     18e:	ef 2e       	mov	r14, r31
     190:	ff 24       	eor	r15, r15
     192:	f0 2d       	mov	r31, r0
     194:	0f 2e       	mov	r0, r31
     196:	f0 ed       	ldi	r31, 0xD0	; 208
     198:	cf 2e       	mov	r12, r31
     19a:	f7 e0       	ldi	r31, 0x07	; 7
     19c:	df 2e       	mov	r13, r31
     19e:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1a0:	c8 ec       	ldi	r28, 0xC8	; 200
     1a2:	d0 e0       	ldi	r29, 0x00	; 0
			RIGHT_btn();
			RIGHT_btn();
			RIGHT_btn();
			RIGHT_btn();
			RIGHT_btn();
			LED_ON();
     1a4:	0f 2e       	mov	r0, r31
     1a6:	f8 e3       	ldi	r31, 0x38	; 56
     1a8:	af 2e       	mov	r10, r31
     1aa:	bb 24       	eor	r11, r11
     1ac:	f0 2d       	mov	r31, r0
     1ae:	00 e2       	ldi	r16, 0x20	; 32
     1b0:	1e e4       	ldi	r17, 0x4E	; 78

			

			LED_OFF();
			start=0;
			BEEP();
     1b2:	0f 2e       	mov	r0, r31
     1b4:	f5 e3       	ldi	r31, 0x35	; 53
     1b6:	8f 2e       	mov	r8, r31
     1b8:	99 24       	eor	r9, r9
     1ba:	f0 2d       	mov	r31, r0

	while(1)
	{


		 if(start){
     1bc:	80 91 9c 01 	lds	r24, 0x019C
     1c0:	88 23       	and	r24, r24
     1c2:	e1 f3       	breq	.-8      	; 0x1bc <main+0x98>

		 	// Futási idõ beállítása
			runningtime=60*( Beolvas10bitADC(4)/100 +1 );
     1c4:	84 e0       	ldi	r24, 0x04	; 4
     1c6:	20 d4       	rcall	.+2112   	; 0xa08 <Beolvas10bitADC>
     1c8:	64 e6       	ldi	r22, 0x64	; 100
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	38 d8       	rcall	.-3984   	; 0xfffff23e <__eeprom_end+0xff7ef23e>
     1ce:	6f 5f       	subi	r22, 0xFF	; 255
     1d0:	7f 4f       	sbci	r23, 0xFF	; 255
     1d2:	66 9d       	mul	r22, r6
     1d4:	c0 01       	movw	r24, r0
     1d6:	67 9d       	mul	r22, r7
     1d8:	90 0d       	add	r25, r0
     1da:	76 9d       	mul	r23, r6
     1dc:	90 0d       	add	r25, r0
     1de:	11 24       	eor	r1, r1
     1e0:	90 93 04 01 	sts	0x0104, r25
     1e4:	80 93 03 01 	sts	0x0103, r24
			putnum(runningtime/60);
     1e8:	80 91 03 01 	lds	r24, 0x0103
     1ec:	90 91 04 01 	lds	r25, 0x0104
     1f0:	b3 01       	movw	r22, r6
     1f2:	39 d8       	rcall	.-3982   	; 0xfffff266 <__eeprom_end+0xff7ef266>
     1f4:	cb 01       	movw	r24, r22
     1f6:	e0 d3       	rcall	.+1984   	; 0x9b8 <putnum>
			putstring(" Perc ");
     1f8:	c2 01       	movw	r24, r4
     1fa:	ac d3       	rcall	.+1880   	; 0x954 <putstring>


			TCNT0=0; //timer nullázása
     1fc:	f1 01       	movw	r30, r2
     1fe:	10 82       	st	Z, r1
			InitTimer(); //timer indítása
     200:	3a df       	rcall	.-396    	; 0x76 <InitTimer>
			measure_running=1;
     202:	f1 e0       	ldi	r31, 0x01	; 1
     204:	f0 93 99 01 	sts	0x0199, r31


			
			
			// Beállított frekvencia beolvasása
			ADVALUE=Beolvas10bitADC(5);
     208:	85 e0       	ldi	r24, 0x05	; 5
     20a:	fe d3       	rcall	.+2044   	; 0xa08 <Beolvas10bitADC>
     20c:	90 93 97 01 	sts	0x0197, r25
     210:	80 93 96 01 	sts	0x0196, r24

			if(0   <= ADVALUE && ADVALUE <= 102) sweeptype = 1;
     214:	87 36       	cpi	r24, 0x67	; 103
     216:	91 05       	cpc	r25, r1
     218:	18 f4       	brcc	.+6      	; 0x220 <main+0xfc>
     21a:	21 e0       	ldi	r18, 0x01	; 1
     21c:	20 93 98 01 	sts	0x0198, r18
			if(102 <= ADVALUE && ADVALUE <= 307) sweeptype = 2;
     220:	80 91 96 01 	lds	r24, 0x0196
     224:	90 91 97 01 	lds	r25, 0x0197
     228:	86 56       	subi	r24, 0x66	; 102
     22a:	90 40       	sbci	r25, 0x00	; 0
     22c:	8e 3c       	cpi	r24, 0xCE	; 206
     22e:	91 05       	cpc	r25, r1
     230:	18 f4       	brcc	.+6      	; 0x238 <main+0x114>
     232:	82 e0       	ldi	r24, 0x02	; 2
     234:	80 93 98 01 	sts	0x0198, r24
			if(307 <= ADVALUE && ADVALUE <= 512) sweeptype = 3;
     238:	80 91 96 01 	lds	r24, 0x0196
     23c:	90 91 97 01 	lds	r25, 0x0197
     240:	83 53       	subi	r24, 0x33	; 51
     242:	91 40       	sbci	r25, 0x01	; 1
     244:	8e 3c       	cpi	r24, 0xCE	; 206
     246:	91 05       	cpc	r25, r1
     248:	18 f4       	brcc	.+6      	; 0x250 <main+0x12c>
     24a:	e3 e0       	ldi	r30, 0x03	; 3
     24c:	e0 93 98 01 	sts	0x0198, r30
			if(512 <= ADVALUE && ADVALUE <= 716) sweeptype = 4;
     250:	80 91 96 01 	lds	r24, 0x0196
     254:	90 91 97 01 	lds	r25, 0x0197
     258:	80 50       	subi	r24, 0x00	; 0
     25a:	92 40       	sbci	r25, 0x02	; 2
     25c:	8d 3c       	cpi	r24, 0xCD	; 205
     25e:	91 05       	cpc	r25, r1
     260:	18 f4       	brcc	.+6      	; 0x268 <main+0x144>
     262:	84 e0       	ldi	r24, 0x04	; 4
     264:	80 93 98 01 	sts	0x0198, r24
			if(716 <= ADVALUE && ADVALUE <= 921) sweeptype = 5;
     268:	80 91 96 01 	lds	r24, 0x0196
     26c:	90 91 97 01 	lds	r25, 0x0197
     270:	8c 5c       	subi	r24, 0xCC	; 204
     272:	92 40       	sbci	r25, 0x02	; 2
     274:	8e 3c       	cpi	r24, 0xCE	; 206
     276:	91 05       	cpc	r25, r1
     278:	18 f4       	brcc	.+6      	; 0x280 <main+0x15c>
     27a:	85 e0       	ldi	r24, 0x05	; 5
     27c:	80 93 98 01 	sts	0x0198, r24
			if(921 <= ADVALUE && ADVALUE <=1024) sweeptype = 6;
     280:	80 91 96 01 	lds	r24, 0x0196
     284:	90 91 97 01 	lds	r25, 0x0197
     288:	89 59       	subi	r24, 0x99	; 153
     28a:	93 40       	sbci	r25, 0x03	; 3
     28c:	88 36       	cpi	r24, 0x68	; 104
     28e:	91 05       	cpc	r25, r1
     290:	18 f4       	brcc	.+6      	; 0x298 <main+0x174>
     292:	f6 e0       	ldi	r31, 0x06	; 6
     294:	f0 93 98 01 	sts	0x0198, r31



			RIGHT_btn();
     298:	f7 01       	movw	r30, r14
     29a:	80 81       	ld	r24, Z
     29c:	87 7f       	andi	r24, 0xF7	; 247
     29e:	80 83       	st	Z, r24
     2a0:	96 01       	movw	r18, r12
     2a2:	ce 01       	movw	r24, r28
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <main+0x180>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2a8:	21 50       	subi	r18, 0x01	; 1
     2aa:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ac:	d1 f7       	brne	.-12     	; 0x2a2 <main+0x17e>
     2ae:	f7 01       	movw	r30, r14
     2b0:	80 81       	ld	r24, Z
     2b2:	88 60       	ori	r24, 0x08	; 8
     2b4:	80 83       	st	Z, r24
     2b6:	96 01       	movw	r18, r12
     2b8:	ce 01       	movw	r24, r28
     2ba:	01 97       	sbiw	r24, 0x01	; 1
     2bc:	f1 f7       	brne	.-4      	; 0x2ba <main+0x196>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2be:	21 50       	subi	r18, 0x01	; 1
     2c0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2c2:	d1 f7       	brne	.-12     	; 0x2b8 <main+0x194>
			RIGHT_btn();
     2c4:	f7 01       	movw	r30, r14
     2c6:	80 81       	ld	r24, Z
     2c8:	87 7f       	andi	r24, 0xF7	; 247
     2ca:	80 83       	st	Z, r24
     2cc:	96 01       	movw	r18, r12
     2ce:	ce 01       	movw	r24, r28
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x1ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2d4:	21 50       	subi	r18, 0x01	; 1
     2d6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2d8:	d1 f7       	brne	.-12     	; 0x2ce <main+0x1aa>
     2da:	f7 01       	movw	r30, r14
     2dc:	80 81       	ld	r24, Z
     2de:	88 60       	ori	r24, 0x08	; 8
     2e0:	80 83       	st	Z, r24
     2e2:	96 01       	movw	r18, r12
     2e4:	ce 01       	movw	r24, r28
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <main+0x1c2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ea:	21 50       	subi	r18, 0x01	; 1
     2ec:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ee:	d1 f7       	brne	.-12     	; 0x2e4 <main+0x1c0>
			RIGHT_btn();
     2f0:	f7 01       	movw	r30, r14
     2f2:	80 81       	ld	r24, Z
     2f4:	87 7f       	andi	r24, 0xF7	; 247
     2f6:	80 83       	st	Z, r24
     2f8:	96 01       	movw	r18, r12
     2fa:	ce 01       	movw	r24, r28
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0x1d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     300:	21 50       	subi	r18, 0x01	; 1
     302:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     304:	d1 f7       	brne	.-12     	; 0x2fa <main+0x1d6>
     306:	f7 01       	movw	r30, r14
     308:	80 81       	ld	r24, Z
     30a:	88 60       	ori	r24, 0x08	; 8
     30c:	80 83       	st	Z, r24
     30e:	96 01       	movw	r18, r12
     310:	ce 01       	movw	r24, r28
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <main+0x1ee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     316:	21 50       	subi	r18, 0x01	; 1
     318:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     31a:	d1 f7       	brne	.-12     	; 0x310 <main+0x1ec>
			RIGHT_btn();
     31c:	f7 01       	movw	r30, r14
     31e:	80 81       	ld	r24, Z
     320:	87 7f       	andi	r24, 0xF7	; 247
     322:	80 83       	st	Z, r24
     324:	96 01       	movw	r18, r12
     326:	ce 01       	movw	r24, r28
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	f1 f7       	brne	.-4      	; 0x328 <main+0x204>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     32c:	21 50       	subi	r18, 0x01	; 1
     32e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     330:	d1 f7       	brne	.-12     	; 0x326 <main+0x202>
     332:	f7 01       	movw	r30, r14
     334:	80 81       	ld	r24, Z
     336:	88 60       	ori	r24, 0x08	; 8
     338:	80 83       	st	Z, r24
     33a:	96 01       	movw	r18, r12
     33c:	ce 01       	movw	r24, r28
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <main+0x21a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     342:	21 50       	subi	r18, 0x01	; 1
     344:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     346:	d1 f7       	brne	.-12     	; 0x33c <main+0x218>
			RIGHT_btn();
     348:	f7 01       	movw	r30, r14
     34a:	80 81       	ld	r24, Z
     34c:	87 7f       	andi	r24, 0xF7	; 247
     34e:	80 83       	st	Z, r24
     350:	96 01       	movw	r18, r12
     352:	ce 01       	movw	r24, r28
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <main+0x230>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     358:	21 50       	subi	r18, 0x01	; 1
     35a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     35c:	d1 f7       	brne	.-12     	; 0x352 <main+0x22e>
     35e:	f7 01       	movw	r30, r14
     360:	80 81       	ld	r24, Z
     362:	88 60       	ori	r24, 0x08	; 8
     364:	80 83       	st	Z, r24
     366:	96 01       	movw	r18, r12
     368:	ce 01       	movw	r24, r28
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <main+0x246>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     36e:	21 50       	subi	r18, 0x01	; 1
     370:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     372:	d1 f7       	brne	.-12     	; 0x368 <main+0x244>
			RIGHT_btn();
     374:	f7 01       	movw	r30, r14
     376:	80 81       	ld	r24, Z
     378:	87 7f       	andi	r24, 0xF7	; 247
     37a:	80 83       	st	Z, r24
     37c:	96 01       	movw	r18, r12
     37e:	ce 01       	movw	r24, r28
     380:	01 97       	sbiw	r24, 0x01	; 1
     382:	f1 f7       	brne	.-4      	; 0x380 <main+0x25c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     384:	21 50       	subi	r18, 0x01	; 1
     386:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     388:	d1 f7       	brne	.-12     	; 0x37e <main+0x25a>
     38a:	f7 01       	movw	r30, r14
     38c:	80 81       	ld	r24, Z
     38e:	88 60       	ori	r24, 0x08	; 8
     390:	80 83       	st	Z, r24
     392:	96 01       	movw	r18, r12
     394:	ce 01       	movw	r24, r28
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <main+0x272>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     39a:	21 50       	subi	r18, 0x01	; 1
     39c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     39e:	d1 f7       	brne	.-12     	; 0x394 <main+0x270>
			RIGHT_btn();
     3a0:	f7 01       	movw	r30, r14
     3a2:	80 81       	ld	r24, Z
     3a4:	87 7f       	andi	r24, 0xF7	; 247
     3a6:	80 83       	st	Z, r24
     3a8:	96 01       	movw	r18, r12
     3aa:	ce 01       	movw	r24, r28
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0x288>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3b0:	21 50       	subi	r18, 0x01	; 1
     3b2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3b4:	d1 f7       	brne	.-12     	; 0x3aa <main+0x286>
     3b6:	f7 01       	movw	r30, r14
     3b8:	80 81       	ld	r24, Z
     3ba:	88 60       	ori	r24, 0x08	; 8
     3bc:	80 83       	st	Z, r24
     3be:	96 01       	movw	r18, r12
     3c0:	ce 01       	movw	r24, r28
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <main+0x29e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3c6:	21 50       	subi	r18, 0x01	; 1
     3c8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ca:	d1 f7       	brne	.-12     	; 0x3c0 <main+0x29c>
			RIGHT_btn();
     3cc:	f7 01       	movw	r30, r14
     3ce:	80 81       	ld	r24, Z
     3d0:	87 7f       	andi	r24, 0xF7	; 247
     3d2:	80 83       	st	Z, r24
     3d4:	96 01       	movw	r18, r12
     3d6:	ce 01       	movw	r24, r28
     3d8:	01 97       	sbiw	r24, 0x01	; 1
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <main+0x2b4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3dc:	21 50       	subi	r18, 0x01	; 1
     3de:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e0:	d1 f7       	brne	.-12     	; 0x3d6 <main+0x2b2>
     3e2:	f7 01       	movw	r30, r14
     3e4:	80 81       	ld	r24, Z
     3e6:	88 60       	ori	r24, 0x08	; 8
     3e8:	80 83       	st	Z, r24
     3ea:	96 01       	movw	r18, r12
     3ec:	ce 01       	movw	r24, r28
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <main+0x2ca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3f2:	21 50       	subi	r18, 0x01	; 1
     3f4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3f6:	d1 f7       	brne	.-12     	; 0x3ec <main+0x2c8>
			LED_ON();
     3f8:	f5 01       	movw	r30, r10
     3fa:	80 81       	ld	r24, Z
     3fc:	84 60       	ori	r24, 0x04	; 4
     3fe:	80 83       	st	Z, r24




			// Lépésköz beállítása, + kiírás
			if(sweeptype==1){
     400:	80 91 98 01 	lds	r24, 0x0198
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	c9 f4       	brne	.+50     	; 0x43a <main+0x316>
				putstring("50Hz sweep 1Hz lépéssel ");
     408:	87 e6       	ldi	r24, 0x67	; 103
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	a3 d2       	rcall	.+1350   	; 0x954 <putstring>
				LEFT_btn();
     40e:	f5 01       	movw	r30, r10
     410:	80 81       	ld	r24, Z
     412:	8d 7f       	andi	r24, 0xFD	; 253
     414:	80 83       	st	Z, r24
     416:	96 01       	movw	r18, r12
     418:	ce 01       	movw	r24, r28
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <main+0x2f6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     41e:	21 50       	subi	r18, 0x01	; 1
     420:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     422:	d1 f7       	brne	.-12     	; 0x418 <main+0x2f4>
     424:	f5 01       	movw	r30, r10
     426:	80 81       	ld	r24, Z
     428:	82 60       	ori	r24, 0x02	; 2
     42a:	80 83       	st	Z, r24
     42c:	96 01       	movw	r18, r12
     42e:	ce 01       	movw	r24, r28
     430:	01 97       	sbiw	r24, 0x01	; 1
     432:	f1 f7       	brne	.-4      	; 0x430 <main+0x30c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     434:	21 50       	subi	r18, 0x01	; 1
     436:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     438:	d1 f7       	brne	.-12     	; 0x42e <main+0x30a>
				}

			if(sweeptype==2){
     43a:	80 91 98 01 	lds	r24, 0x0198
     43e:	82 30       	cpi	r24, 0x02	; 2
     440:	c9 f4       	brne	.+50     	; 0x474 <__stack+0x15>
				putstring("100Hz sweep 1Hz lépéssel ");
     442:	80 e8       	ldi	r24, 0x80	; 128
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	86 d2       	rcall	.+1292   	; 0x954 <putstring>
				LEFT_btn();
     448:	f5 01       	movw	r30, r10
     44a:	80 81       	ld	r24, Z
     44c:	8d 7f       	andi	r24, 0xFD	; 253
     44e:	80 83       	st	Z, r24
     450:	96 01       	movw	r18, r12
     452:	ce 01       	movw	r24, r28
     454:	01 97       	sbiw	r24, 0x01	; 1
     456:	f1 f7       	brne	.-4      	; 0x454 <main+0x330>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     458:	21 50       	subi	r18, 0x01	; 1
     45a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     45c:	d1 f7       	brne	.-12     	; 0x452 <main+0x32e>
     45e:	f5 01       	movw	r30, r10
     460:	80 81       	ld	r24, Z
     462:	82 60       	ori	r24, 0x02	; 2
     464:	80 83       	st	Z, r24
     466:	96 01       	movw	r18, r12
     468:	ce 01       	movw	r24, r28
     46a:	01 97       	sbiw	r24, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__stack+0xb>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     46e:	21 50       	subi	r18, 0x01	; 1
     470:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     472:	d1 f7       	brne	.-12     	; 0x468 <__stack+0x9>
				}

			if(sweeptype==3){
     474:	80 91 98 01 	lds	r24, 0x0198
     478:	83 30       	cpi	r24, 0x03	; 3
     47a:	c9 f4       	brne	.+50     	; 0x4ae <__stack+0x4f>
				putstring("250Hz sweep 1Hz lépéssel ");
     47c:	8a e9       	ldi	r24, 0x9A	; 154
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	69 d2       	rcall	.+1234   	; 0x954 <putstring>
				LEFT_btn();
     482:	f5 01       	movw	r30, r10
     484:	80 81       	ld	r24, Z
     486:	8d 7f       	andi	r24, 0xFD	; 253
     488:	80 83       	st	Z, r24
     48a:	96 01       	movw	r18, r12
     48c:	ce 01       	movw	r24, r28
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <__stack+0x2f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     492:	21 50       	subi	r18, 0x01	; 1
     494:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     496:	d1 f7       	brne	.-12     	; 0x48c <__stack+0x2d>
     498:	f5 01       	movw	r30, r10
     49a:	80 81       	ld	r24, Z
     49c:	82 60       	ori	r24, 0x02	; 2
     49e:	80 83       	st	Z, r24
     4a0:	96 01       	movw	r18, r12
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <__stack+0x45>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4a8:	21 50       	subi	r18, 0x01	; 1
     4aa:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ac:	d1 f7       	brne	.-12     	; 0x4a2 <__stack+0x43>
				}

			if(sweeptype==4){
     4ae:	80 91 98 01 	lds	r24, 0x0198
     4b2:	84 30       	cpi	r24, 0x04	; 4
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <__stack+0x59>
     4b6:	2f c0       	rjmp	.+94     	; 0x516 <__stack+0xb7>
				putstring("500Hz sweep 10Hz lépéssel ");
     4b8:	84 eb       	ldi	r24, 0xB4	; 180
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	4b d2       	rcall	.+1174   	; 0x954 <putstring>
				LEFT_btn();
     4be:	f5 01       	movw	r30, r10
     4c0:	80 81       	ld	r24, Z
     4c2:	8d 7f       	andi	r24, 0xFD	; 253
     4c4:	80 83       	st	Z, r24
     4c6:	96 01       	movw	r18, r12
     4c8:	ce 01       	movw	r24, r28
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <__stack+0x6b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ce:	21 50       	subi	r18, 0x01	; 1
     4d0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d2:	d1 f7       	brne	.-12     	; 0x4c8 <__stack+0x69>
     4d4:	f5 01       	movw	r30, r10
     4d6:	80 81       	ld	r24, Z
     4d8:	82 60       	ori	r24, 0x02	; 2
     4da:	80 83       	st	Z, r24
     4dc:	96 01       	movw	r18, r12
     4de:	ce 01       	movw	r24, r28
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <__stack+0x81>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4e4:	21 50       	subi	r18, 0x01	; 1
     4e6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4e8:	d1 f7       	brne	.-12     	; 0x4de <__stack+0x7f>
				LEFT_btn();
     4ea:	f5 01       	movw	r30, r10
     4ec:	80 81       	ld	r24, Z
     4ee:	8d 7f       	andi	r24, 0xFD	; 253
     4f0:	80 83       	st	Z, r24
     4f2:	96 01       	movw	r18, r12
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 97       	sbiw	r24, 0x01	; 1
     4f8:	f1 f7       	brne	.-4      	; 0x4f6 <__stack+0x97>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4fa:	21 50       	subi	r18, 0x01	; 1
     4fc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4fe:	d1 f7       	brne	.-12     	; 0x4f4 <__stack+0x95>
     500:	f5 01       	movw	r30, r10
     502:	80 81       	ld	r24, Z
     504:	82 60       	ori	r24, 0x02	; 2
     506:	80 83       	st	Z, r24
     508:	96 01       	movw	r18, r12
     50a:	ce 01       	movw	r24, r28
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	f1 f7       	brne	.-4      	; 0x50c <__stack+0xad>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     510:	21 50       	subi	r18, 0x01	; 1
     512:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     514:	d1 f7       	brne	.-12     	; 0x50a <__stack+0xab>
				}

			if(sweeptype==5){
     516:	80 91 98 01 	lds	r24, 0x0198
     51a:	85 30       	cpi	r24, 0x05	; 5
     51c:	09 f0       	breq	.+2      	; 0x520 <__stack+0xc1>
     51e:	2f c0       	rjmp	.+94     	; 0x57e <__stack+0x11f>
				putstring("1kHz sweep 10Hz lépéssel ");
     520:	8f ec       	ldi	r24, 0xCF	; 207
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	17 d2       	rcall	.+1070   	; 0x954 <putstring>
				LEFT_btn();
     526:	f5 01       	movw	r30, r10
     528:	80 81       	ld	r24, Z
     52a:	8d 7f       	andi	r24, 0xFD	; 253
     52c:	80 83       	st	Z, r24
     52e:	96 01       	movw	r18, r12
     530:	ce 01       	movw	r24, r28
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <__stack+0xd3>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     536:	21 50       	subi	r18, 0x01	; 1
     538:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     53a:	d1 f7       	brne	.-12     	; 0x530 <__stack+0xd1>
     53c:	f5 01       	movw	r30, r10
     53e:	80 81       	ld	r24, Z
     540:	82 60       	ori	r24, 0x02	; 2
     542:	80 83       	st	Z, r24
     544:	96 01       	movw	r18, r12
     546:	ce 01       	movw	r24, r28
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <__stack+0xe9>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     54c:	21 50       	subi	r18, 0x01	; 1
     54e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     550:	d1 f7       	brne	.-12     	; 0x546 <__stack+0xe7>
				LEFT_btn();
     552:	f5 01       	movw	r30, r10
     554:	80 81       	ld	r24, Z
     556:	8d 7f       	andi	r24, 0xFD	; 253
     558:	80 83       	st	Z, r24
     55a:	96 01       	movw	r18, r12
     55c:	ce 01       	movw	r24, r28
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <__stack+0xff>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     562:	21 50       	subi	r18, 0x01	; 1
     564:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     566:	d1 f7       	brne	.-12     	; 0x55c <__stack+0xfd>
     568:	f5 01       	movw	r30, r10
     56a:	80 81       	ld	r24, Z
     56c:	82 60       	ori	r24, 0x02	; 2
     56e:	80 83       	st	Z, r24
     570:	96 01       	movw	r18, r12
     572:	ce 01       	movw	r24, r28
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <__stack+0x115>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     578:	21 50       	subi	r18, 0x01	; 1
     57a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57c:	d1 f7       	brne	.-12     	; 0x572 <__stack+0x113>
				}

			if(sweeptype==6){
     57e:	80 91 98 01 	lds	r24, 0x0198
     582:	86 30       	cpi	r24, 0x06	; 6
     584:	09 f0       	breq	.+2      	; 0x588 <__stack+0x129>
     586:	b2 c1       	rjmp	.+868    	; 0x8ec <__stack+0x48d>
				putstring("2kHz sweep 10Hz lépéssel ");
     588:	89 ee       	ldi	r24, 0xE9	; 233
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	e3 d1       	rcall	.+966    	; 0x954 <putstring>
				LEFT_btn();
     58e:	f5 01       	movw	r30, r10
     590:	80 81       	ld	r24, Z
     592:	8d 7f       	andi	r24, 0xFD	; 253
     594:	80 83       	st	Z, r24
     596:	96 01       	movw	r18, r12
     598:	ce 01       	movw	r24, r28
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <__stack+0x13b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     59e:	21 50       	subi	r18, 0x01	; 1
     5a0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a2:	d1 f7       	brne	.-12     	; 0x598 <__stack+0x139>
     5a4:	f5 01       	movw	r30, r10
     5a6:	80 81       	ld	r24, Z
     5a8:	82 60       	ori	r24, 0x02	; 2
     5aa:	80 83       	st	Z, r24
     5ac:	96 01       	movw	r18, r12
     5ae:	ce 01       	movw	r24, r28
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <__stack+0x151>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5b4:	21 50       	subi	r18, 0x01	; 1
     5b6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5b8:	d1 f7       	brne	.-12     	; 0x5ae <__stack+0x14f>
				LEFT_btn();
     5ba:	f5 01       	movw	r30, r10
     5bc:	80 81       	ld	r24, Z
     5be:	8d 7f       	andi	r24, 0xFD	; 253
     5c0:	80 83       	st	Z, r24
     5c2:	96 01       	movw	r18, r12
     5c4:	ce 01       	movw	r24, r28
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <__stack+0x167>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ca:	21 50       	subi	r18, 0x01	; 1
     5cc:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ce:	d1 f7       	brne	.-12     	; 0x5c4 <__stack+0x165>
     5d0:	f5 01       	movw	r30, r10
     5d2:	80 81       	ld	r24, Z
     5d4:	82 60       	ori	r24, 0x02	; 2
     5d6:	80 83       	st	Z, r24
     5d8:	96 01       	movw	r18, r12
     5da:	ce 01       	movw	r24, r28
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	f1 f7       	brne	.-4      	; 0x5dc <__stack+0x17d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e0:	21 50       	subi	r18, 0x01	; 1
     5e2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5e4:	d1 f7       	brne	.-12     	; 0x5da <__stack+0x17b>
     5e6:	82 c1       	rjmp	.+772    	; 0x8ec <__stack+0x48d>
				}

			
			while(measure_running){

				if(sweeptype==1){
     5e8:	80 91 98 01 	lds	r24, 0x0198
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	09 f0       	breq	.+2      	; 0x5f2 <__stack+0x193>
     5f0:	3a c0       	rjmp	.+116    	; 0x666 <__stack+0x207>
					for(sweepcounter=0;sweepcounter<50;sweepcounter++){
     5f2:	10 92 9b 01 	sts	0x019B, r1
     5f6:	10 92 9a 01 	sts	0x019A, r1
						EncoderUp();
     5fa:	eb d5       	rcall	.+3030   	; 0x11d2 <EncoderUp>
     5fc:	c8 01       	movw	r24, r16
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <__stack+0x19f>

			
			while(measure_running){

				if(sweeptype==1){
					for(sweepcounter=0;sweepcounter<50;sweepcounter++){
     602:	80 91 9a 01 	lds	r24, 0x019A
     606:	90 91 9b 01 	lds	r25, 0x019B
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	90 93 9b 01 	sts	0x019B, r25
     610:	80 93 9a 01 	sts	0x019A, r24
     614:	c2 97       	sbiw	r24, 0x32	; 50
     616:	8c f3       	brlt	.-30     	; 0x5fa <__stack+0x19b>
						EncoderUp();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
     618:	10 92 9b 01 	sts	0x019B, r1
     61c:	10 92 9a 01 	sts	0x019A, r1
						EncoderDown();
     620:	fa d4       	rcall	.+2548   	; 0x1016 <EncoderDown>
     622:	c8 01       	movw	r24, r16
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <__stack+0x1c5>
				if(sweeptype==1){
					for(sweepcounter=0;sweepcounter<50;sweepcounter++){
						EncoderUp();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
     628:	80 91 9a 01 	lds	r24, 0x019A
     62c:	90 91 9b 01 	lds	r25, 0x019B
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	90 93 9b 01 	sts	0x019B, r25
     636:	80 93 9a 01 	sts	0x019A, r24
     63a:	84 36       	cpi	r24, 0x64	; 100
     63c:	91 05       	cpc	r25, r1
     63e:	84 f3       	brlt	.-32     	; 0x620 <__stack+0x1c1>
						EncoderDown();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<50;sweepcounter++){
     640:	10 92 9b 01 	sts	0x019B, r1
     644:	10 92 9a 01 	sts	0x019A, r1
						EncoderUp();
     648:	c4 d5       	rcall	.+2952   	; 0x11d2 <EncoderUp>
     64a:	c8 01       	movw	r24, r16
     64c:	01 97       	sbiw	r24, 0x01	; 1
     64e:	f1 f7       	brne	.-4      	; 0x64c <__stack+0x1ed>
						}
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
						EncoderDown();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<50;sweepcounter++){
     650:	80 91 9a 01 	lds	r24, 0x019A
     654:	90 91 9b 01 	lds	r25, 0x019B
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	90 93 9b 01 	sts	0x019B, r25
     65e:	80 93 9a 01 	sts	0x019A, r24
     662:	c2 97       	sbiw	r24, 0x32	; 50
     664:	8c f3       	brlt	.-30     	; 0x648 <__stack+0x1e9>
						EncoderUp();
						_delay_ms(10);
						}
					}

				if(sweeptype==2){
     666:	80 91 98 01 	lds	r24, 0x0198
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	09 f0       	breq	.+2      	; 0x670 <__stack+0x211>
     66e:	3c c0       	rjmp	.+120    	; 0x6e8 <__stack+0x289>
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
     670:	10 92 9b 01 	sts	0x019B, r1
     674:	10 92 9a 01 	sts	0x019A, r1
						EncoderUp();
     678:	ac d5       	rcall	.+2904   	; 0x11d2 <EncoderUp>
     67a:	c8 01       	movw	r24, r16
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <__stack+0x21d>
						_delay_ms(10);
						}
					}

				if(sweeptype==2){
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
     680:	80 91 9a 01 	lds	r24, 0x019A
     684:	90 91 9b 01 	lds	r25, 0x019B
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	90 93 9b 01 	sts	0x019B, r25
     68e:	80 93 9a 01 	sts	0x019A, r24
     692:	84 36       	cpi	r24, 0x64	; 100
     694:	91 05       	cpc	r25, r1
     696:	84 f3       	brlt	.-32     	; 0x678 <__stack+0x219>
						EncoderUp();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<200;sweepcounter++){
     698:	10 92 9b 01 	sts	0x019B, r1
     69c:	10 92 9a 01 	sts	0x019A, r1
						EncoderDown();
     6a0:	ba d4       	rcall	.+2420   	; 0x1016 <EncoderDown>
     6a2:	c8 01       	movw	r24, r16
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <__stack+0x245>
				if(sweeptype==2){
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
						EncoderUp();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<200;sweepcounter++){
     6a8:	80 91 9a 01 	lds	r24, 0x019A
     6ac:	90 91 9b 01 	lds	r25, 0x019B
     6b0:	01 96       	adiw	r24, 0x01	; 1
     6b2:	90 93 9b 01 	sts	0x019B, r25
     6b6:	80 93 9a 01 	sts	0x019A, r24
     6ba:	88 3c       	cpi	r24, 0xC8	; 200
     6bc:	91 05       	cpc	r25, r1
     6be:	84 f3       	brlt	.-32     	; 0x6a0 <__stack+0x241>
						EncoderDown();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
     6c0:	10 92 9b 01 	sts	0x019B, r1
     6c4:	10 92 9a 01 	sts	0x019A, r1
						EncoderUp();
     6c8:	84 d5       	rcall	.+2824   	; 0x11d2 <EncoderUp>
     6ca:	c8 01       	movw	r24, r16
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <__stack+0x26d>
						}
					for(sweepcounter=0;sweepcounter<200;sweepcounter++){
						EncoderDown();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
     6d0:	80 91 9a 01 	lds	r24, 0x019A
     6d4:	90 91 9b 01 	lds	r25, 0x019B
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	90 93 9b 01 	sts	0x019B, r25
     6de:	80 93 9a 01 	sts	0x019A, r24
     6e2:	84 36       	cpi	r24, 0x64	; 100
     6e4:	91 05       	cpc	r25, r1
     6e6:	84 f3       	brlt	.-32     	; 0x6c8 <__stack+0x269>
						EncoderUp();
						_delay_ms(10);
						}
					}

				if(sweeptype==3){
     6e8:	80 91 98 01 	lds	r24, 0x0198
     6ec:	83 30       	cpi	r24, 0x03	; 3
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <__stack+0x293>
     6f0:	3c c0       	rjmp	.+120    	; 0x76a <__stack+0x30b>
					for(sweepcounter=0;sweepcounter<250;sweepcounter++){
     6f2:	10 92 9b 01 	sts	0x019B, r1
     6f6:	10 92 9a 01 	sts	0x019A, r1
						EncoderUp();
     6fa:	6b d5       	rcall	.+2774   	; 0x11d2 <EncoderUp>
     6fc:	c8 01       	movw	r24, r16
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <__stack+0x29f>
						_delay_ms(10);
						}
					}

				if(sweeptype==3){
					for(sweepcounter=0;sweepcounter<250;sweepcounter++){
     702:	80 91 9a 01 	lds	r24, 0x019A
     706:	90 91 9b 01 	lds	r25, 0x019B
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	90 93 9b 01 	sts	0x019B, r25
     710:	80 93 9a 01 	sts	0x019A, r24
     714:	8a 3f       	cpi	r24, 0xFA	; 250
     716:	91 05       	cpc	r25, r1
     718:	84 f3       	brlt	.-32     	; 0x6fa <__stack+0x29b>
						EncoderUp();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<500;sweepcounter++){
     71a:	10 92 9b 01 	sts	0x019B, r1
     71e:	10 92 9a 01 	sts	0x019A, r1
						EncoderDown();
     722:	79 d4       	rcall	.+2290   	; 0x1016 <EncoderDown>
     724:	c8 01       	movw	r24, r16
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <__stack+0x2c7>
				if(sweeptype==3){
					for(sweepcounter=0;sweepcounter<250;sweepcounter++){
						EncoderUp();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<500;sweepcounter++){
     72a:	80 91 9a 01 	lds	r24, 0x019A
     72e:	90 91 9b 01 	lds	r25, 0x019B
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	90 93 9b 01 	sts	0x019B, r25
     738:	80 93 9a 01 	sts	0x019A, r24
     73c:	84 5f       	subi	r24, 0xF4	; 244
     73e:	91 40       	sbci	r25, 0x01	; 1
     740:	84 f3       	brlt	.-32     	; 0x722 <__stack+0x2c3>
						EncoderDown();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<250;sweepcounter++){
     742:	10 92 9b 01 	sts	0x019B, r1
     746:	10 92 9a 01 	sts	0x019A, r1
						EncoderUp();
     74a:	43 d5       	rcall	.+2694   	; 0x11d2 <EncoderUp>
     74c:	c8 01       	movw	r24, r16
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <__stack+0x2ef>
						}
					for(sweepcounter=0;sweepcounter<500;sweepcounter++){
						EncoderDown();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<250;sweepcounter++){
     752:	80 91 9a 01 	lds	r24, 0x019A
     756:	90 91 9b 01 	lds	r25, 0x019B
     75a:	01 96       	adiw	r24, 0x01	; 1
     75c:	90 93 9b 01 	sts	0x019B, r25
     760:	80 93 9a 01 	sts	0x019A, r24
     764:	8a 3f       	cpi	r24, 0xFA	; 250
     766:	91 05       	cpc	r25, r1
     768:	84 f3       	brlt	.-32     	; 0x74a <__stack+0x2eb>
						EncoderUp();
						_delay_ms(10);
						}
					}

				if(sweeptype==4){
     76a:	80 91 98 01 	lds	r24, 0x0198
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	09 f0       	breq	.+2      	; 0x774 <__stack+0x315>
     772:	3a c0       	rjmp	.+116    	; 0x7e8 <__stack+0x389>
					for(sweepcounter=0;sweepcounter<50;sweepcounter++){
     774:	10 92 9b 01 	sts	0x019B, r1
     778:	10 92 9a 01 	sts	0x019A, r1
						EncoderUp();
     77c:	2a d5       	rcall	.+2644   	; 0x11d2 <EncoderUp>
     77e:	c8 01       	movw	r24, r16
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <__stack+0x321>
						_delay_ms(10);
						}
					}

				if(sweeptype==4){
					for(sweepcounter=0;sweepcounter<50;sweepcounter++){
     784:	80 91 9a 01 	lds	r24, 0x019A
     788:	90 91 9b 01 	lds	r25, 0x019B
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	90 93 9b 01 	sts	0x019B, r25
     792:	80 93 9a 01 	sts	0x019A, r24
     796:	c2 97       	sbiw	r24, 0x32	; 50
     798:	8c f3       	brlt	.-30     	; 0x77c <__stack+0x31d>
						EncoderUp();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
     79a:	10 92 9b 01 	sts	0x019B, r1
     79e:	10 92 9a 01 	sts	0x019A, r1
						EncoderDown();
     7a2:	39 d4       	rcall	.+2162   	; 0x1016 <EncoderDown>
     7a4:	c8 01       	movw	r24, r16
     7a6:	01 97       	sbiw	r24, 0x01	; 1
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <__stack+0x347>
				if(sweeptype==4){
					for(sweepcounter=0;sweepcounter<50;sweepcounter++){
						EncoderUp();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
     7aa:	80 91 9a 01 	lds	r24, 0x019A
     7ae:	90 91 9b 01 	lds	r25, 0x019B
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	90 93 9b 01 	sts	0x019B, r25
     7b8:	80 93 9a 01 	sts	0x019A, r24
     7bc:	84 36       	cpi	r24, 0x64	; 100
     7be:	91 05       	cpc	r25, r1
     7c0:	84 f3       	brlt	.-32     	; 0x7a2 <__stack+0x343>
						EncoderDown();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<50;sweepcounter++){
     7c2:	10 92 9b 01 	sts	0x019B, r1
     7c6:	10 92 9a 01 	sts	0x019A, r1
						EncoderUp();
     7ca:	03 d5       	rcall	.+2566   	; 0x11d2 <EncoderUp>
     7cc:	c8 01       	movw	r24, r16
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <__stack+0x36f>
						}
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
						EncoderDown();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<50;sweepcounter++){
     7d2:	80 91 9a 01 	lds	r24, 0x019A
     7d6:	90 91 9b 01 	lds	r25, 0x019B
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	90 93 9b 01 	sts	0x019B, r25
     7e0:	80 93 9a 01 	sts	0x019A, r24
     7e4:	c2 97       	sbiw	r24, 0x32	; 50
     7e6:	8c f3       	brlt	.-30     	; 0x7ca <__stack+0x36b>
						EncoderUp();
						_delay_ms(10);
						}
					}

				if(sweeptype==5){
     7e8:	80 91 98 01 	lds	r24, 0x0198
     7ec:	85 30       	cpi	r24, 0x05	; 5
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <__stack+0x393>
     7f0:	3c c0       	rjmp	.+120    	; 0x86a <__stack+0x40b>
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
     7f2:	10 92 9b 01 	sts	0x019B, r1
     7f6:	10 92 9a 01 	sts	0x019A, r1
						EncoderUp();
     7fa:	eb d4       	rcall	.+2518   	; 0x11d2 <EncoderUp>
     7fc:	c8 01       	movw	r24, r16
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <__stack+0x39f>
						_delay_ms(10);
						}
					}

				if(sweeptype==5){
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
     802:	80 91 9a 01 	lds	r24, 0x019A
     806:	90 91 9b 01 	lds	r25, 0x019B
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	90 93 9b 01 	sts	0x019B, r25
     810:	80 93 9a 01 	sts	0x019A, r24
     814:	84 36       	cpi	r24, 0x64	; 100
     816:	91 05       	cpc	r25, r1
     818:	84 f3       	brlt	.-32     	; 0x7fa <__stack+0x39b>
						EncoderUp();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<200;sweepcounter++){
     81a:	10 92 9b 01 	sts	0x019B, r1
     81e:	10 92 9a 01 	sts	0x019A, r1
						EncoderDown();
     822:	f9 d3       	rcall	.+2034   	; 0x1016 <EncoderDown>
     824:	c8 01       	movw	r24, r16
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <__stack+0x3c7>
				if(sweeptype==5){
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
						EncoderUp();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<200;sweepcounter++){
     82a:	80 91 9a 01 	lds	r24, 0x019A
     82e:	90 91 9b 01 	lds	r25, 0x019B
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	90 93 9b 01 	sts	0x019B, r25
     838:	80 93 9a 01 	sts	0x019A, r24
     83c:	88 3c       	cpi	r24, 0xC8	; 200
     83e:	91 05       	cpc	r25, r1
     840:	84 f3       	brlt	.-32     	; 0x822 <__stack+0x3c3>
						EncoderDown();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
     842:	10 92 9b 01 	sts	0x019B, r1
     846:	10 92 9a 01 	sts	0x019A, r1
						EncoderUp();
     84a:	c3 d4       	rcall	.+2438   	; 0x11d2 <EncoderUp>
     84c:	c8 01       	movw	r24, r16
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <__stack+0x3ef>
						}
					for(sweepcounter=0;sweepcounter<200;sweepcounter++){
						EncoderDown();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<100;sweepcounter++){
     852:	80 91 9a 01 	lds	r24, 0x019A
     856:	90 91 9b 01 	lds	r25, 0x019B
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	90 93 9b 01 	sts	0x019B, r25
     860:	80 93 9a 01 	sts	0x019A, r24
     864:	84 36       	cpi	r24, 0x64	; 100
     866:	91 05       	cpc	r25, r1
     868:	84 f3       	brlt	.-32     	; 0x84a <__stack+0x3eb>
						EncoderUp();
						_delay_ms(10);
						}
					}

				if(sweeptype==6){
     86a:	80 91 98 01 	lds	r24, 0x0198
     86e:	86 30       	cpi	r24, 0x06	; 6
     870:	09 f0       	breq	.+2      	; 0x874 <__stack+0x415>
     872:	3c c0       	rjmp	.+120    	; 0x8ec <__stack+0x48d>
					for(sweepcounter=0;sweepcounter<200;sweepcounter++){
     874:	10 92 9b 01 	sts	0x019B, r1
     878:	10 92 9a 01 	sts	0x019A, r1
						EncoderUp();
     87c:	aa d4       	rcall	.+2388   	; 0x11d2 <EncoderUp>
     87e:	c8 01       	movw	r24, r16
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <__stack+0x421>
						_delay_ms(10);
						}
					}

				if(sweeptype==6){
					for(sweepcounter=0;sweepcounter<200;sweepcounter++){
     884:	80 91 9a 01 	lds	r24, 0x019A
     888:	90 91 9b 01 	lds	r25, 0x019B
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	90 93 9b 01 	sts	0x019B, r25
     892:	80 93 9a 01 	sts	0x019A, r24
     896:	88 3c       	cpi	r24, 0xC8	; 200
     898:	91 05       	cpc	r25, r1
     89a:	84 f3       	brlt	.-32     	; 0x87c <__stack+0x41d>
						EncoderUp();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<400;sweepcounter++){
     89c:	10 92 9b 01 	sts	0x019B, r1
     8a0:	10 92 9a 01 	sts	0x019A, r1
						EncoderDown();
     8a4:	b8 d3       	rcall	.+1904   	; 0x1016 <EncoderDown>
     8a6:	c8 01       	movw	r24, r16
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <__stack+0x449>
				if(sweeptype==6){
					for(sweepcounter=0;sweepcounter<200;sweepcounter++){
						EncoderUp();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<400;sweepcounter++){
     8ac:	80 91 9a 01 	lds	r24, 0x019A
     8b0:	90 91 9b 01 	lds	r25, 0x019B
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	90 93 9b 01 	sts	0x019B, r25
     8ba:	80 93 9a 01 	sts	0x019A, r24
     8be:	80 59       	subi	r24, 0x90	; 144
     8c0:	91 40       	sbci	r25, 0x01	; 1
     8c2:	84 f3       	brlt	.-32     	; 0x8a4 <__stack+0x445>
						EncoderDown();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<200;sweepcounter++){
     8c4:	10 92 9b 01 	sts	0x019B, r1
     8c8:	10 92 9a 01 	sts	0x019A, r1
						EncoderUp();
     8cc:	82 d4       	rcall	.+2308   	; 0x11d2 <EncoderUp>
     8ce:	c8 01       	movw	r24, r16
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <__stack+0x471>
						}
					for(sweepcounter=0;sweepcounter<400;sweepcounter++){
						EncoderDown();
						_delay_ms(10);
						}
					for(sweepcounter=0;sweepcounter<200;sweepcounter++){
     8d4:	80 91 9a 01 	lds	r24, 0x019A
     8d8:	90 91 9b 01 	lds	r25, 0x019B
     8dc:	01 96       	adiw	r24, 0x01	; 1
     8de:	90 93 9b 01 	sts	0x019B, r25
     8e2:	80 93 9a 01 	sts	0x019A, r24
     8e6:	88 3c       	cpi	r24, 0xC8	; 200
     8e8:	91 05       	cpc	r25, r1
     8ea:	84 f3       	brlt	.-32     	; 0x8cc <__stack+0x46d>
				LEFT_btn();
				LEFT_btn();
				}

			
			while(measure_running){
     8ec:	80 91 99 01 	lds	r24, 0x0199
     8f0:	88 23       	and	r24, r24
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <__stack+0x497>
     8f4:	79 ce       	rjmp	.-782    	; 0x5e8 <__stack+0x189>
				
			}

			

			LED_OFF();
     8f6:	f5 01       	movw	r30, r10
     8f8:	80 81       	ld	r24, Z
     8fa:	8b 7f       	andi	r24, 0xFB	; 251
     8fc:	80 83       	st	Z, r24
			start=0;
     8fe:	10 92 9c 01 	sts	0x019C, r1
			BEEP();
     902:	f4 01       	movw	r30, r8
     904:	80 81       	ld	r24, Z
     906:	81 60       	ori	r24, 0x01	; 1
     908:	80 83       	st	Z, r24
     90a:	20 e1       	ldi	r18, 0x10	; 16
     90c:	37 e2       	ldi	r19, 0x27	; 39
     90e:	ce 01       	movw	r24, r28
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <__stack+0x4b1>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     914:	21 50       	subi	r18, 0x01	; 1
     916:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     918:	d1 f7       	brne	.-12     	; 0x90e <__stack+0x4af>
     91a:	f4 01       	movw	r30, r8
     91c:	80 81       	ld	r24, Z
     91e:	8e 7f       	andi	r24, 0xFE	; 254
     920:	80 83       	st	Z, r24
     922:	4c cc       	rjmp	.-1896   	; 0x1bc <main+0x98>

00000924 <USART_Init>:

//*******uart_init******************************************************
void USART_Init( unsigned int ubrr)
	{
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
     924:	e0 e4       	ldi	r30, 0x40	; 64
     926:	f0 e0       	ldi	r31, 0x00	; 0
     928:	90 83       	st	Z, r25
	UBRRL = (unsigned char)ubrr;
     92a:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN)| (1 << RXCIE) ;
     92c:	88 e9       	ldi	r24, 0x98	; 152
     92e:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
     930:	86 e8       	ldi	r24, 0x86	; 134
     932:	80 83       	st	Z, r24
	}
     934:	08 95       	ret

00000936 <USART_Transmit>:

//********uart_transmit******************************************************
void USART_Transmit( unsigned char data )
	{
     936:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
     938:	eb e2       	ldi	r30, 0x2B	; 43
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	85 ff       	sbrs	r24, 5
     940:	fd cf       	rjmp	.-6      	; 0x93c <USART_Transmit+0x6>
	/* Put data into buffer, sends the data */
	UDR = data;
     942:	9c b9       	out	0x0c, r25	; 12
	}
     944:	08 95       	ret

00000946 <UART_Receive>:


//**********uart_receive**********************************************
char UART_Receive() // Ez a fuggveny a beerkezo adatokat kiolvassa az UDR regiszter bejovo pufferebol
{
  while(!(UCSRA & (1<<RXC)))  // Varakozas amig nincs uj bejovo adat
     946:	eb e2       	ldi	r30, 0x2B	; 43
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	88 23       	and	r24, r24
     94e:	ec f7       	brge	.-6      	; 0x94a <UART_Receive+0x4>
  {
     //  Varakozas
  }
  //Most mar van beerkezett adat, amit kiolvasunk a pufferbol
  return UDR;
     950:	8c b1       	in	r24, 0x0c	; 12
}
     952:	08 95       	ret

00000954 <putstring>:



//***********uart_string************************** putstring("hello");******
void putstring(const char *ptr)
{
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	ec 01       	movw	r28, r24
  while(*ptr)
     95a:	88 81       	ld	r24, Y
     95c:	88 23       	and	r24, r24
     95e:	29 f0       	breq	.+10     	; 0x96a <putstring+0x16>
  {
   USART_Transmit( *(ptr++));  
     960:	21 96       	adiw	r28, 0x01	; 1
     962:	e9 df       	rcall	.-46     	; 0x936 <USART_Transmit>


//***********uart_string************************** putstring("hello");******
void putstring(const char *ptr)
{
  while(*ptr)
     964:	88 81       	ld	r24, Y
     966:	88 23       	and	r24, r24
     968:	d9 f7       	brne	.-10     	; 0x960 <putstring+0xc>
  {
   USART_Transmit( *(ptr++));  
  }
}
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <__vector_11>:



//******uart_int**********************************************
ISR(USART_RXC_vect)
{
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	0f 92       	push	r0
     978:	11 24       	eor	r1, r1
     97a:	2f 93       	push	r18
     97c:	3f 93       	push	r19
     97e:	4f 93       	push	r20
     980:	5f 93       	push	r21
     982:	6f 93       	push	r22
     984:	7f 93       	push	r23
     986:	8f 93       	push	r24
     988:	9f 93       	push	r25
     98a:	af 93       	push	r26
     98c:	bf 93       	push	r27
     98e:	ef 93       	push	r30
     990:	ff 93       	push	r31

// call from console.c
Incoming_char( UART_Receive() );
     992:	d9 df       	rcall	.-78     	; 0x946 <UART_Receive>
     994:	1f d3       	rcall	.+1598   	; 0xfd4 <Incoming_char>



}
     996:	ff 91       	pop	r31
     998:	ef 91       	pop	r30
     99a:	bf 91       	pop	r27
     99c:	af 91       	pop	r26
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	7f 91       	pop	r23
     9a4:	6f 91       	pop	r22
     9a6:	5f 91       	pop	r21
     9a8:	4f 91       	pop	r20
     9aa:	3f 91       	pop	r19
     9ac:	2f 91       	pop	r18
     9ae:	0f 90       	pop	r0
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	0f 90       	pop	r0
     9b4:	1f 90       	pop	r1
     9b6:	18 95       	reti

000009b8 <putnum>:
  }
}

//***********uart_num****************** putnum(1023)**************************
void putnum(unsigned int i)
{
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	df 93       	push	r29
     9be:	cf 93       	push	r28
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
     9c4:	27 97       	sbiw	r28, 0x07	; 7
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
unsigned char c[7]; 
itoa(i, c, 10); 
     9d0:	8e 01       	movw	r16, r28
     9d2:	0f 5f       	subi	r16, 0xFF	; 255
     9d4:	1f 4f       	sbci	r17, 0xFF	; 255
     9d6:	b8 01       	movw	r22, r16
     9d8:	4a e0       	ldi	r20, 0x0A	; 10
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	57 d4       	rcall	.+2222   	; 0x128c <itoa>
putstring(c);
     9de:	c8 01       	movw	r24, r16
     9e0:	b9 df       	rcall	.-142    	; 0x954 <putstring>
}
     9e2:	27 96       	adiw	r28, 0x07	; 7
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	cf 91       	pop	r28
     9f0:	df 91       	pop	r29
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	08 95       	ret

000009f8 <Konfig10bitADC>:
#include "adc.h"

//*********konfig_uart************************************************
void Konfig10bitADC()        // ADC konfiguralas (beallitas)
{
	ADMUX |= (1<<REFS0);    // Vcc mint referencia
     9f8:	e7 e2       	ldi	r30, 0x27	; 39
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	80 64       	ori	r24, 0x40	; 64
     a00:	80 83       	st	Z, r24
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);    // ADC engedelyezese, ADC eloosztas = 8 (125 KHz)
     a02:	83 e8       	ldi	r24, 0x83	; 131
     a04:	86 b9       	out	0x06, r24	; 6
}
     a06:	08 95       	ret

00000a08 <Beolvas10bitADC>:


//*********uart_10bit**************************************************
unsigned int Beolvas10bitADC(unsigned char csatorna)
{
   ADMUX = (ADMUX & 0b11110000) | csatorna;   //ADC csatorna kivalasztasa
     a08:	e7 e2       	ldi	r30, 0x27	; 39
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	90 81       	ld	r25, Z
     a0e:	90 7f       	andi	r25, 0xF0	; 240
     a10:	89 2b       	or	r24, r25
     a12:	80 83       	st	Z, r24
   ADCSRA |= (1<<ADSC);    // elso ADC konverzio elinditasa
     a14:	e6 e2       	ldi	r30, 0x26	; 38
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	80 64       	ori	r24, 0x40	; 64
     a1c:	80 83       	st	Z, r24
   while (ADCSRA & (1<<ADSC));        // varas az atalakitasra
     a1e:	80 81       	ld	r24, Z
     a20:	86 fd       	sbrc	r24, 6
     a22:	fd cf       	rjmp	.-6      	; 0xa1e <Beolvas10bitADC+0x16>
   ADCSRA |= (1<<ADSC);          // masodik ADC konverzió elindítás
     a24:	e6 e2       	ldi	r30, 0x26	; 38
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	80 81       	ld	r24, Z
     a2a:	80 64       	ori	r24, 0x40	; 64
     a2c:	80 83       	st	Z, r24
   while (ADCSRA & (1<<ADSC));        // varas az atalakitasra
     a2e:	80 81       	ld	r24, Z
     a30:	86 fd       	sbrc	r24, 6
     a32:	fd cf       	rjmp	.-6      	; 0xa2e <Beolvas10bitADC+0x26>
   return (ADCL | (ADCH<<8));        // ADC ertek kiolvasasa
     a34:	84 b1       	in	r24, 0x04	; 4
     a36:	45 b1       	in	r20, 0x05	; 5
     a38:	34 2f       	mov	r19, r20
     a3a:	20 e0       	ldi	r18, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	28 2b       	or	r18, r24
     a40:	39 2b       	or	r19, r25
}
     a42:	82 2f       	mov	r24, r18
     a44:	93 2f       	mov	r25, r19
     a46:	08 95       	ret

00000a48 <Console_xxx>:
}

//just for test
void Console_xxx( char ch){

    switch (xxxcounter) {
     a48:	90 91 a2 01 	lds	r25, 0x01A2
     a4c:	91 30       	cpi	r25, 0x01	; 1
     a4e:	81 f0       	breq	.+32     	; 0xa70 <Console_xxx+0x28>
     a50:	91 30       	cpi	r25, 0x01	; 1
     a52:	18 f0       	brcs	.+6      	; 0xa5a <Console_xxx+0x12>
     a54:	92 30       	cpi	r25, 0x02	; 2
     a56:	09 f5       	brne	.+66     	; 0xa9a <Console_xxx+0x52>
     a58:	16 c0       	rjmp	.+44     	; 0xa86 <Console_xxx+0x3e>
    case 0: if (ch=='x') xxxcounter++; else xxxcounter=0; break;
     a5a:	88 37       	cpi	r24, 0x78	; 120
     a5c:	31 f4       	brne	.+12     	; 0xa6a <Console_xxx+0x22>
     a5e:	80 91 a2 01 	lds	r24, 0x01A2
     a62:	8f 5f       	subi	r24, 0xFF	; 255
     a64:	80 93 a2 01 	sts	0x01A2, r24
     a68:	18 c0       	rjmp	.+48     	; 0xa9a <Console_xxx+0x52>
     a6a:	10 92 a2 01 	sts	0x01A2, r1
     a6e:	15 c0       	rjmp	.+42     	; 0xa9a <Console_xxx+0x52>
    case 1: if (ch=='x') xxxcounter++; else xxxcounter=0; break;
     a70:	88 37       	cpi	r24, 0x78	; 120
     a72:	31 f4       	brne	.+12     	; 0xa80 <Console_xxx+0x38>
     a74:	80 91 a2 01 	lds	r24, 0x01A2
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 93 a2 01 	sts	0x01A2, r24
     a7e:	0d c0       	rjmp	.+26     	; 0xa9a <Console_xxx+0x52>
     a80:	10 92 a2 01 	sts	0x01A2, r1
     a84:	0a c0       	rjmp	.+20     	; 0xa9a <Console_xxx+0x52>
    case 2: if (ch=='x') xxxcounter++; else xxxcounter=0; break;
     a86:	88 37       	cpi	r24, 0x78	; 120
     a88:	31 f4       	brne	.+12     	; 0xa96 <Console_xxx+0x4e>
     a8a:	80 91 a2 01 	lds	r24, 0x01A2
     a8e:	8f 5f       	subi	r24, 0xFF	; 255
     a90:	80 93 a2 01 	sts	0x01A2, r24
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <Console_xxx+0x52>
     a96:	10 92 a2 01 	sts	0x01A2, r1

    }

	if (xxxcounter ==3){
     a9a:	80 91 a2 01 	lds	r24, 0x01A2
     a9e:	83 30       	cpi	r24, 0x03	; 3
     aa0:	19 f5       	brne	.+70     	; 0xae8 <Console_xxx+0xa0>
		putstring("xxx jott ");
     aa2:	85 e0       	ldi	r24, 0x05	; 5
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	56 df       	rcall	.-340    	; 0x954 <putstring>

		//EncoderDown();

		//LEFT_btn()	;

		RIGHT_btn();
     aa8:	e2 e3       	ldi	r30, 0x32	; 50
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	80 81       	ld	r24, Z
     aae:	87 7f       	andi	r24, 0xF7	; 247
     ab0:	80 83       	st	Z, r24
     ab2:	20 ed       	ldi	r18, 0xD0	; 208
     ab4:	37 e0       	ldi	r19, 0x07	; 7
     ab6:	48 ec       	ldi	r20, 0xC8	; 200
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	ca 01       	movw	r24, r20
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	f1 f7       	brne	.-4      	; 0xabc <Console_xxx+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac0:	21 50       	subi	r18, 0x01	; 1
     ac2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ac4:	d1 f7       	brne	.-12     	; 0xaba <Console_xxx+0x72>
     ac6:	e2 e3       	ldi	r30, 0x32	; 50
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	88 60       	ori	r24, 0x08	; 8
     ace:	80 83       	st	Z, r24
     ad0:	20 ed       	ldi	r18, 0xD0	; 208
     ad2:	37 e0       	ldi	r19, 0x07	; 7
     ad4:	48 ec       	ldi	r20, 0xC8	; 200
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	ca 01       	movw	r24, r20
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <Console_xxx+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ade:	21 50       	subi	r18, 0x01	; 1
     ae0:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ae2:	d1 f7       	brne	.-12     	; 0xad8 <Console_xxx+0x90>

		
		xxxcounter=0;
     ae4:	10 92 a2 01 	sts	0x01A2, r1
     ae8:	08 95       	ret

00000aea <Console_SetFreq>:
		maxcounter=0;
	}

}

void Console_SetFreq( char ch){
     aea:	98 2f       	mov	r25, r24

    switch (freqcounter) {
     aec:	80 91 a1 01 	lds	r24, 0x01A1
     af0:	e8 2f       	mov	r30, r24
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	ec 30       	cpi	r30, 0x0C	; 12
     af6:	f1 05       	cpc	r31, r1
     af8:	08 f0       	brcs	.+2      	; 0xafc <Console_SetFreq+0x12>
     afa:	ce c0       	rjmp	.+412    	; 0xc98 <Console_SetFreq+0x1ae>
     afc:	ed 5e       	subi	r30, 0xED	; 237
     afe:	ff 4f       	sbci	r31, 0xFF	; 255
     b00:	09 94       	ijmp
    case 0: if (ch=='f') freqcounter++; else freqcounter=0; break;
     b02:	96 36       	cpi	r25, 0x66	; 102
     b04:	31 f4       	brne	.+12     	; 0xb12 <Console_SetFreq+0x28>
     b06:	80 91 a1 01 	lds	r24, 0x01A1
     b0a:	8f 5f       	subi	r24, 0xFF	; 255
     b0c:	80 93 a1 01 	sts	0x01A1, r24
     b10:	c3 c0       	rjmp	.+390    	; 0xc98 <Console_SetFreq+0x1ae>
     b12:	10 92 a1 01 	sts	0x01A1, r1
     b16:	c0 c0       	rjmp	.+384    	; 0xc98 <Console_SetFreq+0x1ae>
    case 1: if (ch=='r') freqcounter++; else freqcounter=0; break;
     b18:	92 37       	cpi	r25, 0x72	; 114
     b1a:	31 f4       	brne	.+12     	; 0xb28 <Console_SetFreq+0x3e>
     b1c:	80 91 a1 01 	lds	r24, 0x01A1
     b20:	8f 5f       	subi	r24, 0xFF	; 255
     b22:	80 93 a1 01 	sts	0x01A1, r24
     b26:	b8 c0       	rjmp	.+368    	; 0xc98 <Console_SetFreq+0x1ae>
     b28:	10 92 a1 01 	sts	0x01A1, r1
     b2c:	b5 c0       	rjmp	.+362    	; 0xc98 <Console_SetFreq+0x1ae>
    case 2: if (ch=='e') freqcounter++; else freqcounter=0; break;
     b2e:	95 36       	cpi	r25, 0x65	; 101
     b30:	31 f4       	brne	.+12     	; 0xb3e <Console_SetFreq+0x54>
     b32:	80 91 a1 01 	lds	r24, 0x01A1
     b36:	8f 5f       	subi	r24, 0xFF	; 255
     b38:	80 93 a1 01 	sts	0x01A1, r24
     b3c:	ad c0       	rjmp	.+346    	; 0xc98 <Console_SetFreq+0x1ae>
     b3e:	10 92 a1 01 	sts	0x01A1, r1
     b42:	aa c0       	rjmp	.+340    	; 0xc98 <Console_SetFreq+0x1ae>
	case 3: if (ch=='q') freqcounter++; else freqcounter=0; break;
     b44:	91 37       	cpi	r25, 0x71	; 113
     b46:	31 f4       	brne	.+12     	; 0xb54 <Console_SetFreq+0x6a>
     b48:	80 91 a1 01 	lds	r24, 0x01A1
     b4c:	8f 5f       	subi	r24, 0xFF	; 255
     b4e:	80 93 a1 01 	sts	0x01A1, r24
     b52:	a2 c0       	rjmp	.+324    	; 0xc98 <Console_SetFreq+0x1ae>
     b54:	10 92 a1 01 	sts	0x01A1, r1
     b58:	9f c0       	rjmp	.+318    	; 0xc98 <Console_SetFreq+0x1ae>
    case 4: if (ch>47 && ch<58) { freqcounter++; numbers[0]= ch-48; } else freqcounter=0; break;
     b5a:	89 2f       	mov	r24, r25
     b5c:	80 53       	subi	r24, 0x30	; 48
     b5e:	8a 30       	cpi	r24, 0x0A	; 10
     b60:	68 f4       	brcc	.+26     	; 0xb7c <Console_SetFreq+0x92>
     b62:	80 91 a1 01 	lds	r24, 0x01A1
     b66:	8f 5f       	subi	r24, 0xFF	; 255
     b68:	80 93 a1 01 	sts	0x01A1, r24
     b6c:	89 2f       	mov	r24, r25
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	c0 97       	sbiw	r24, 0x30	; 48
     b72:	90 93 a8 01 	sts	0x01A8, r25
     b76:	80 93 a7 01 	sts	0x01A7, r24
     b7a:	8e c0       	rjmp	.+284    	; 0xc98 <Console_SetFreq+0x1ae>
     b7c:	10 92 a1 01 	sts	0x01A1, r1
     b80:	8b c0       	rjmp	.+278    	; 0xc98 <Console_SetFreq+0x1ae>
	case 5: if (ch>47 && ch<58) { freqcounter++; numbers[1]= ch-48; } else freqcounter=0; break;
     b82:	89 2f       	mov	r24, r25
     b84:	80 53       	subi	r24, 0x30	; 48
     b86:	8a 30       	cpi	r24, 0x0A	; 10
     b88:	68 f4       	brcc	.+26     	; 0xba4 <Console_SetFreq+0xba>
     b8a:	80 91 a1 01 	lds	r24, 0x01A1
     b8e:	8f 5f       	subi	r24, 0xFF	; 255
     b90:	80 93 a1 01 	sts	0x01A1, r24
     b94:	89 2f       	mov	r24, r25
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	c0 97       	sbiw	r24, 0x30	; 48
     b9a:	90 93 aa 01 	sts	0x01AA, r25
     b9e:	80 93 a9 01 	sts	0x01A9, r24
     ba2:	7a c0       	rjmp	.+244    	; 0xc98 <Console_SetFreq+0x1ae>
     ba4:	10 92 a1 01 	sts	0x01A1, r1
     ba8:	77 c0       	rjmp	.+238    	; 0xc98 <Console_SetFreq+0x1ae>
	case 6: if (ch>47 && ch<58) { freqcounter++; numbers[2]= ch-48; } else freqcounter=0; break;
     baa:	89 2f       	mov	r24, r25
     bac:	80 53       	subi	r24, 0x30	; 48
     bae:	8a 30       	cpi	r24, 0x0A	; 10
     bb0:	68 f4       	brcc	.+26     	; 0xbcc <Console_SetFreq+0xe2>
     bb2:	80 91 a1 01 	lds	r24, 0x01A1
     bb6:	8f 5f       	subi	r24, 0xFF	; 255
     bb8:	80 93 a1 01 	sts	0x01A1, r24
     bbc:	89 2f       	mov	r24, r25
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	c0 97       	sbiw	r24, 0x30	; 48
     bc2:	90 93 ac 01 	sts	0x01AC, r25
     bc6:	80 93 ab 01 	sts	0x01AB, r24
     bca:	66 c0       	rjmp	.+204    	; 0xc98 <Console_SetFreq+0x1ae>
     bcc:	10 92 a1 01 	sts	0x01A1, r1
     bd0:	63 c0       	rjmp	.+198    	; 0xc98 <Console_SetFreq+0x1ae>
	case 7: if (ch>47 && ch<58) { freqcounter++; numbers[3]= ch-48; } else freqcounter=0; break;
     bd2:	89 2f       	mov	r24, r25
     bd4:	80 53       	subi	r24, 0x30	; 48
     bd6:	8a 30       	cpi	r24, 0x0A	; 10
     bd8:	68 f4       	brcc	.+26     	; 0xbf4 <Console_SetFreq+0x10a>
     bda:	80 91 a1 01 	lds	r24, 0x01A1
     bde:	8f 5f       	subi	r24, 0xFF	; 255
     be0:	80 93 a1 01 	sts	0x01A1, r24
     be4:	89 2f       	mov	r24, r25
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	c0 97       	sbiw	r24, 0x30	; 48
     bea:	90 93 ae 01 	sts	0x01AE, r25
     bee:	80 93 ad 01 	sts	0x01AD, r24
     bf2:	52 c0       	rjmp	.+164    	; 0xc98 <Console_SetFreq+0x1ae>
     bf4:	10 92 a1 01 	sts	0x01A1, r1
     bf8:	4f c0       	rjmp	.+158    	; 0xc98 <Console_SetFreq+0x1ae>
	case 8: if (ch>47 && ch<58) { freqcounter++; numbers[4]= ch-48; } else freqcounter=0; break;
     bfa:	89 2f       	mov	r24, r25
     bfc:	80 53       	subi	r24, 0x30	; 48
     bfe:	8a 30       	cpi	r24, 0x0A	; 10
     c00:	68 f4       	brcc	.+26     	; 0xc1c <Console_SetFreq+0x132>
     c02:	80 91 a1 01 	lds	r24, 0x01A1
     c06:	8f 5f       	subi	r24, 0xFF	; 255
     c08:	80 93 a1 01 	sts	0x01A1, r24
     c0c:	89 2f       	mov	r24, r25
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	c0 97       	sbiw	r24, 0x30	; 48
     c12:	90 93 b0 01 	sts	0x01B0, r25
     c16:	80 93 af 01 	sts	0x01AF, r24
     c1a:	3e c0       	rjmp	.+124    	; 0xc98 <Console_SetFreq+0x1ae>
     c1c:	10 92 a1 01 	sts	0x01A1, r1
     c20:	3b c0       	rjmp	.+118    	; 0xc98 <Console_SetFreq+0x1ae>
	case 9: if (ch>47 && ch<58) { freqcounter++; numbers[5]= ch-48; } else freqcounter=0; break;
     c22:	89 2f       	mov	r24, r25
     c24:	80 53       	subi	r24, 0x30	; 48
     c26:	8a 30       	cpi	r24, 0x0A	; 10
     c28:	68 f4       	brcc	.+26     	; 0xc44 <Console_SetFreq+0x15a>
     c2a:	80 91 a1 01 	lds	r24, 0x01A1
     c2e:	8f 5f       	subi	r24, 0xFF	; 255
     c30:	80 93 a1 01 	sts	0x01A1, r24
     c34:	89 2f       	mov	r24, r25
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	c0 97       	sbiw	r24, 0x30	; 48
     c3a:	90 93 b2 01 	sts	0x01B2, r25
     c3e:	80 93 b1 01 	sts	0x01B1, r24
     c42:	2a c0       	rjmp	.+84     	; 0xc98 <Console_SetFreq+0x1ae>
     c44:	10 92 a1 01 	sts	0x01A1, r1
     c48:	27 c0       	rjmp	.+78     	; 0xc98 <Console_SetFreq+0x1ae>
	case 10: if (ch>47 && ch<58) { freqcounter++; numbers[6]= ch-48; } else freqcounter=0; break;
     c4a:	89 2f       	mov	r24, r25
     c4c:	80 53       	subi	r24, 0x30	; 48
     c4e:	8a 30       	cpi	r24, 0x0A	; 10
     c50:	68 f4       	brcc	.+26     	; 0xc6c <Console_SetFreq+0x182>
     c52:	80 91 a1 01 	lds	r24, 0x01A1
     c56:	8f 5f       	subi	r24, 0xFF	; 255
     c58:	80 93 a1 01 	sts	0x01A1, r24
     c5c:	89 2f       	mov	r24, r25
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	c0 97       	sbiw	r24, 0x30	; 48
     c62:	90 93 b4 01 	sts	0x01B4, r25
     c66:	80 93 b3 01 	sts	0x01B3, r24
     c6a:	16 c0       	rjmp	.+44     	; 0xc98 <Console_SetFreq+0x1ae>
     c6c:	10 92 a1 01 	sts	0x01A1, r1
     c70:	13 c0       	rjmp	.+38     	; 0xc98 <Console_SetFreq+0x1ae>
	case 11: if (ch>47 && ch<58) { freqcounter++; numbers[7]= ch-48; } else freqcounter=0; break;
     c72:	89 2f       	mov	r24, r25
     c74:	80 53       	subi	r24, 0x30	; 48
     c76:	8a 30       	cpi	r24, 0x0A	; 10
     c78:	68 f4       	brcc	.+26     	; 0xc94 <Console_SetFreq+0x1aa>
     c7a:	80 91 a1 01 	lds	r24, 0x01A1
     c7e:	8f 5f       	subi	r24, 0xFF	; 255
     c80:	80 93 a1 01 	sts	0x01A1, r24
     c84:	89 2f       	mov	r24, r25
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	c0 97       	sbiw	r24, 0x30	; 48
     c8a:	90 93 b6 01 	sts	0x01B6, r25
     c8e:	80 93 b5 01 	sts	0x01B5, r24
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <Console_SetFreq+0x1ae>
     c94:	10 92 a1 01 	sts	0x01A1, r1
    }

	if (freqcounter ==12){
     c98:	80 91 a1 01 	lds	r24, 0x01A1
     c9c:	8c 30       	cpi	r24, 0x0C	; 12
     c9e:	41 f4       	brne	.+16     	; 0xcb0 <Console_SetFreq+0x1c6>
		putstring("freq jott ");
     ca0:	8f e0       	ldi	r24, 0x0F	; 15
     ca2:	91 e0       	ldi	r25, 0x01	; 1
     ca4:	57 de       	rcall	.-850    	; 0x954 <putstring>
		DDS_SetFreq(numbers);
     ca6:	87 ea       	ldi	r24, 0xA7	; 167
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	c5 d2       	rcall	.+1418   	; 0x1236 <DDS_SetFreq>
		freqcounter=0;
     cac:	10 92 a1 01 	sts	0x01A1, r1
     cb0:	08 95       	ret

00000cb2 <Console_SetMax>:

}

void Console_SetMax( char ch){

    switch (maxcounter) {
     cb2:	90 91 a0 01 	lds	r25, 0x01A0
     cb6:	92 30       	cpi	r25, 0x02	; 2
     cb8:	31 f1       	breq	.+76     	; 0xd06 <Console_SetMax+0x54>
     cba:	93 30       	cpi	r25, 0x03	; 3
     cbc:	30 f4       	brcc	.+12     	; 0xcca <Console_SetMax+0x18>
     cbe:	99 23       	and	r25, r25
     cc0:	61 f0       	breq	.+24     	; 0xcda <Console_SetMax+0x28>
     cc2:	91 30       	cpi	r25, 0x01	; 1
     cc4:	09 f0       	breq	.+2      	; 0xcc8 <Console_SetMax+0x16>
     cc6:	56 c0       	rjmp	.+172    	; 0xd74 <Console_SetMax+0xc2>
     cc8:	13 c0       	rjmp	.+38     	; 0xcf0 <Console_SetMax+0x3e>
     cca:	94 30       	cpi	r25, 0x04	; 4
     ccc:	b1 f1       	breq	.+108    	; 0xd3a <Console_SetMax+0x88>
     cce:	94 30       	cpi	r25, 0x04	; 4
     cd0:	28 f1       	brcs	.+74     	; 0xd1c <Console_SetMax+0x6a>
     cd2:	95 30       	cpi	r25, 0x05	; 5
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <Console_SetMax+0x26>
     cd6:	4e c0       	rjmp	.+156    	; 0xd74 <Console_SetMax+0xc2>
     cd8:	3f c0       	rjmp	.+126    	; 0xd58 <Console_SetMax+0xa6>
    case 0: if (ch=='m') maxcounter++; else maxcounter=0; break;
     cda:	8d 36       	cpi	r24, 0x6D	; 109
     cdc:	31 f4       	brne	.+12     	; 0xcea <Console_SetMax+0x38>
     cde:	80 91 a0 01 	lds	r24, 0x01A0
     ce2:	8f 5f       	subi	r24, 0xFF	; 255
     ce4:	80 93 a0 01 	sts	0x01A0, r24
     ce8:	45 c0       	rjmp	.+138    	; 0xd74 <Console_SetMax+0xc2>
     cea:	10 92 a0 01 	sts	0x01A0, r1
     cee:	42 c0       	rjmp	.+132    	; 0xd74 <Console_SetMax+0xc2>
    case 1: if (ch=='a') maxcounter++; else maxcounter=0; break;
     cf0:	81 36       	cpi	r24, 0x61	; 97
     cf2:	31 f4       	brne	.+12     	; 0xd00 <Console_SetMax+0x4e>
     cf4:	80 91 a0 01 	lds	r24, 0x01A0
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	80 93 a0 01 	sts	0x01A0, r24
     cfe:	3a c0       	rjmp	.+116    	; 0xd74 <Console_SetMax+0xc2>
     d00:	10 92 a0 01 	sts	0x01A0, r1
     d04:	37 c0       	rjmp	.+110    	; 0xd74 <Console_SetMax+0xc2>
    case 2: if (ch=='x') maxcounter++; else maxcounter=0; break;
     d06:	88 37       	cpi	r24, 0x78	; 120
     d08:	31 f4       	brne	.+12     	; 0xd16 <Console_SetMax+0x64>
     d0a:	80 91 a0 01 	lds	r24, 0x01A0
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	80 93 a0 01 	sts	0x01A0, r24
     d14:	2f c0       	rjmp	.+94     	; 0xd74 <Console_SetMax+0xc2>
     d16:	10 92 a0 01 	sts	0x01A0, r1
     d1a:	2c c0       	rjmp	.+88     	; 0xd74 <Console_SetMax+0xc2>
    case 3: if (ch>47 && ch<58) { maxcounter++; temp_szazas= ch-48; } else maxcounter=0; break;
     d1c:	98 2f       	mov	r25, r24
     d1e:	90 53       	subi	r25, 0x30	; 48
     d20:	9a 30       	cpi	r25, 0x0A	; 10
     d22:	40 f4       	brcc	.+16     	; 0xd34 <Console_SetMax+0x82>
     d24:	80 91 a0 01 	lds	r24, 0x01A0
     d28:	8f 5f       	subi	r24, 0xFF	; 255
     d2a:	80 93 a0 01 	sts	0x01A0, r24
     d2e:	90 93 a5 01 	sts	0x01A5, r25
     d32:	20 c0       	rjmp	.+64     	; 0xd74 <Console_SetMax+0xc2>
     d34:	10 92 a0 01 	sts	0x01A0, r1
     d38:	1d c0       	rjmp	.+58     	; 0xd74 <Console_SetMax+0xc2>
	case 4: if (ch>47 && ch<58) { maxcounter++; temp_tizes= ch-48; } else maxcounter=0; break;
     d3a:	98 2f       	mov	r25, r24
     d3c:	90 53       	subi	r25, 0x30	; 48
     d3e:	9a 30       	cpi	r25, 0x0A	; 10
     d40:	40 f4       	brcc	.+16     	; 0xd52 <Console_SetMax+0xa0>
     d42:	80 91 a0 01 	lds	r24, 0x01A0
     d46:	8f 5f       	subi	r24, 0xFF	; 255
     d48:	80 93 a0 01 	sts	0x01A0, r24
     d4c:	90 93 a4 01 	sts	0x01A4, r25
     d50:	11 c0       	rjmp	.+34     	; 0xd74 <Console_SetMax+0xc2>
     d52:	10 92 a0 01 	sts	0x01A0, r1
     d56:	0e c0       	rjmp	.+28     	; 0xd74 <Console_SetMax+0xc2>
	case 5: if (ch>47 && ch<58) { maxcounter++; temp_egyes= ch-48; } else maxcounter=0; break;
     d58:	98 2f       	mov	r25, r24
     d5a:	90 53       	subi	r25, 0x30	; 48
     d5c:	9a 30       	cpi	r25, 0x0A	; 10
     d5e:	40 f4       	brcc	.+16     	; 0xd70 <Console_SetMax+0xbe>
     d60:	80 91 a0 01 	lds	r24, 0x01A0
     d64:	8f 5f       	subi	r24, 0xFF	; 255
     d66:	80 93 a0 01 	sts	0x01A0, r24
     d6a:	90 93 a3 01 	sts	0x01A3, r25
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <Console_SetMax+0xc2>
     d70:	10 92 a0 01 	sts	0x01A0, r1
    }

	if (maxcounter ==6){
     d74:	80 91 a0 01 	lds	r24, 0x01A0
     d78:	86 30       	cpi	r24, 0x06	; 6
     d7a:	c1 f4       	brne	.+48     	; 0xdac <Console_SetMax+0xfa>
		putstring("max jott ");
     d7c:	8a e1       	ldi	r24, 0x1A	; 26
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	e9 dd       	rcall	.-1070   	; 0x954 <putstring>
		putnum(100*temp_szazas + 10*temp_tizes + temp_egyes);
     d82:	80 91 a5 01 	lds	r24, 0x01A5
     d86:	20 91 a4 01 	lds	r18, 0x01A4
     d8a:	50 91 a3 01 	lds	r21, 0x01A3
     d8e:	44 e6       	ldi	r20, 0x64	; 100
     d90:	84 9f       	mul	r24, r20
     d92:	c0 01       	movw	r24, r0
     d94:	11 24       	eor	r1, r1
     d96:	4a e0       	ldi	r20, 0x0A	; 10
     d98:	24 9f       	mul	r18, r20
     d9a:	90 01       	movw	r18, r0
     d9c:	11 24       	eor	r1, r1
     d9e:	82 0f       	add	r24, r18
     da0:	93 1f       	adc	r25, r19
     da2:	85 0f       	add	r24, r21
     da4:	91 1d       	adc	r25, r1
     da6:	08 de       	rcall	.-1008   	; 0x9b8 <putnum>
		maxcounter=0;
     da8:	10 92 a0 01 	sts	0x01A0, r1
     dac:	08 95       	ret

00000dae <Console_SetMin>:

}

void Console_SetMin( char ch){

    switch (mincounter) {
     dae:	90 91 9f 01 	lds	r25, 0x019F
     db2:	92 30       	cpi	r25, 0x02	; 2
     db4:	31 f1       	breq	.+76     	; 0xe02 <Console_SetMin+0x54>
     db6:	93 30       	cpi	r25, 0x03	; 3
     db8:	30 f4       	brcc	.+12     	; 0xdc6 <Console_SetMin+0x18>
     dba:	99 23       	and	r25, r25
     dbc:	61 f0       	breq	.+24     	; 0xdd6 <Console_SetMin+0x28>
     dbe:	91 30       	cpi	r25, 0x01	; 1
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <Console_SetMin+0x16>
     dc2:	56 c0       	rjmp	.+172    	; 0xe70 <Console_SetMin+0xc2>
     dc4:	13 c0       	rjmp	.+38     	; 0xdec <Console_SetMin+0x3e>
     dc6:	94 30       	cpi	r25, 0x04	; 4
     dc8:	b1 f1       	breq	.+108    	; 0xe36 <Console_SetMin+0x88>
     dca:	94 30       	cpi	r25, 0x04	; 4
     dcc:	28 f1       	brcs	.+74     	; 0xe18 <Console_SetMin+0x6a>
     dce:	95 30       	cpi	r25, 0x05	; 5
     dd0:	09 f0       	breq	.+2      	; 0xdd4 <Console_SetMin+0x26>
     dd2:	4e c0       	rjmp	.+156    	; 0xe70 <Console_SetMin+0xc2>
     dd4:	3f c0       	rjmp	.+126    	; 0xe54 <Console_SetMin+0xa6>
    case 0: if (ch=='m') mincounter++; else mincounter=0; break;
     dd6:	8d 36       	cpi	r24, 0x6D	; 109
     dd8:	31 f4       	brne	.+12     	; 0xde6 <Console_SetMin+0x38>
     dda:	80 91 9f 01 	lds	r24, 0x019F
     dde:	8f 5f       	subi	r24, 0xFF	; 255
     de0:	80 93 9f 01 	sts	0x019F, r24
     de4:	45 c0       	rjmp	.+138    	; 0xe70 <Console_SetMin+0xc2>
     de6:	10 92 9f 01 	sts	0x019F, r1
     dea:	42 c0       	rjmp	.+132    	; 0xe70 <Console_SetMin+0xc2>
    case 1: if (ch=='i') mincounter++; else mincounter=0; break;
     dec:	89 36       	cpi	r24, 0x69	; 105
     dee:	31 f4       	brne	.+12     	; 0xdfc <Console_SetMin+0x4e>
     df0:	80 91 9f 01 	lds	r24, 0x019F
     df4:	8f 5f       	subi	r24, 0xFF	; 255
     df6:	80 93 9f 01 	sts	0x019F, r24
     dfa:	3a c0       	rjmp	.+116    	; 0xe70 <Console_SetMin+0xc2>
     dfc:	10 92 9f 01 	sts	0x019F, r1
     e00:	37 c0       	rjmp	.+110    	; 0xe70 <Console_SetMin+0xc2>
    case 2: if (ch=='n') mincounter++; else mincounter=0; break;
     e02:	8e 36       	cpi	r24, 0x6E	; 110
     e04:	31 f4       	brne	.+12     	; 0xe12 <Console_SetMin+0x64>
     e06:	80 91 9f 01 	lds	r24, 0x019F
     e0a:	8f 5f       	subi	r24, 0xFF	; 255
     e0c:	80 93 9f 01 	sts	0x019F, r24
     e10:	2f c0       	rjmp	.+94     	; 0xe70 <Console_SetMin+0xc2>
     e12:	10 92 9f 01 	sts	0x019F, r1
     e16:	2c c0       	rjmp	.+88     	; 0xe70 <Console_SetMin+0xc2>
    case 3: if (ch>47 && ch<58) { mincounter++; temp_szazas= ch-48;; } else mincounter=0; break;
     e18:	98 2f       	mov	r25, r24
     e1a:	90 53       	subi	r25, 0x30	; 48
     e1c:	9a 30       	cpi	r25, 0x0A	; 10
     e1e:	40 f4       	brcc	.+16     	; 0xe30 <Console_SetMin+0x82>
     e20:	80 91 9f 01 	lds	r24, 0x019F
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	80 93 9f 01 	sts	0x019F, r24
     e2a:	90 93 a5 01 	sts	0x01A5, r25
     e2e:	20 c0       	rjmp	.+64     	; 0xe70 <Console_SetMin+0xc2>
     e30:	10 92 9f 01 	sts	0x019F, r1
     e34:	1d c0       	rjmp	.+58     	; 0xe70 <Console_SetMin+0xc2>
	case 4: if (ch>47 && ch<58) { mincounter++; temp_tizes= ch-48; } else mincounter=0; break;
     e36:	98 2f       	mov	r25, r24
     e38:	90 53       	subi	r25, 0x30	; 48
     e3a:	9a 30       	cpi	r25, 0x0A	; 10
     e3c:	40 f4       	brcc	.+16     	; 0xe4e <Console_SetMin+0xa0>
     e3e:	80 91 9f 01 	lds	r24, 0x019F
     e42:	8f 5f       	subi	r24, 0xFF	; 255
     e44:	80 93 9f 01 	sts	0x019F, r24
     e48:	90 93 a4 01 	sts	0x01A4, r25
     e4c:	11 c0       	rjmp	.+34     	; 0xe70 <Console_SetMin+0xc2>
     e4e:	10 92 9f 01 	sts	0x019F, r1
     e52:	0e c0       	rjmp	.+28     	; 0xe70 <Console_SetMin+0xc2>
	case 5: if (ch>47 && ch<58) { mincounter++; temp_egyes= ch-48; } else mincounter=0; break;
     e54:	98 2f       	mov	r25, r24
     e56:	90 53       	subi	r25, 0x30	; 48
     e58:	9a 30       	cpi	r25, 0x0A	; 10
     e5a:	40 f4       	brcc	.+16     	; 0xe6c <Console_SetMin+0xbe>
     e5c:	80 91 9f 01 	lds	r24, 0x019F
     e60:	8f 5f       	subi	r24, 0xFF	; 255
     e62:	80 93 9f 01 	sts	0x019F, r24
     e66:	90 93 a3 01 	sts	0x01A3, r25
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <Console_SetMin+0xc2>
     e6c:	10 92 9f 01 	sts	0x019F, r1
    }

	if (mincounter ==6){
     e70:	80 91 9f 01 	lds	r24, 0x019F
     e74:	86 30       	cpi	r24, 0x06	; 6
     e76:	c1 f4       	brne	.+48     	; 0xea8 <Console_SetMin+0xfa>
		putstring("min jott ");
     e78:	84 e2       	ldi	r24, 0x24	; 36
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	6b dd       	rcall	.-1322   	; 0x954 <putstring>
		putnum(100*temp_szazas + 10*temp_tizes + temp_egyes);
     e7e:	80 91 a5 01 	lds	r24, 0x01A5
     e82:	20 91 a4 01 	lds	r18, 0x01A4
     e86:	50 91 a3 01 	lds	r21, 0x01A3
     e8a:	44 e6       	ldi	r20, 0x64	; 100
     e8c:	84 9f       	mul	r24, r20
     e8e:	c0 01       	movw	r24, r0
     e90:	11 24       	eor	r1, r1
     e92:	4a e0       	ldi	r20, 0x0A	; 10
     e94:	24 9f       	mul	r18, r20
     e96:	90 01       	movw	r18, r0
     e98:	11 24       	eor	r1, r1
     e9a:	82 0f       	add	r24, r18
     e9c:	93 1f       	adc	r25, r19
     e9e:	85 0f       	add	r24, r21
     ea0:	91 1d       	adc	r25, r1
     ea2:	8a dd       	rcall	.-1260   	; 0x9b8 <putnum>
		mincounter=0;
     ea4:	10 92 9f 01 	sts	0x019F, r1
     ea8:	08 95       	ret

00000eaa <Console_reset>:

}

void Console_reset( char ch){

    switch (resetcounter) {
     eaa:	90 91 9d 01 	lds	r25, 0x019D
     eae:	92 30       	cpi	r25, 0x02	; 2
     eb0:	11 f1       	breq	.+68     	; 0xef6 <Console_reset+0x4c>
     eb2:	93 30       	cpi	r25, 0x03	; 3
     eb4:	28 f4       	brcc	.+10     	; 0xec0 <Console_reset+0x16>
     eb6:	99 23       	and	r25, r25
     eb8:	41 f0       	breq	.+16     	; 0xeca <Console_reset+0x20>
     eba:	91 30       	cpi	r25, 0x01	; 1
     ebc:	e1 f5       	brne	.+120    	; 0xf36 <Console_reset+0x8c>
     ebe:	10 c0       	rjmp	.+32     	; 0xee0 <Console_reset+0x36>
     ec0:	93 30       	cpi	r25, 0x03	; 3
     ec2:	21 f1       	breq	.+72     	; 0xf0c <Console_reset+0x62>
     ec4:	94 30       	cpi	r25, 0x04	; 4
     ec6:	b9 f5       	brne	.+110    	; 0xf36 <Console_reset+0x8c>
     ec8:	2c c0       	rjmp	.+88     	; 0xf22 <Console_reset+0x78>
    case 0: if (ch=='r') resetcounter++; else resetcounter=0; break;
     eca:	82 37       	cpi	r24, 0x72	; 114
     ecc:	31 f4       	brne	.+12     	; 0xeda <Console_reset+0x30>
     ece:	80 91 9d 01 	lds	r24, 0x019D
     ed2:	8f 5f       	subi	r24, 0xFF	; 255
     ed4:	80 93 9d 01 	sts	0x019D, r24
     ed8:	2e c0       	rjmp	.+92     	; 0xf36 <Console_reset+0x8c>
     eda:	10 92 9d 01 	sts	0x019D, r1
     ede:	2b c0       	rjmp	.+86     	; 0xf36 <Console_reset+0x8c>
    case 1: if (ch=='e') resetcounter++; else resetcounter=0; break;
     ee0:	85 36       	cpi	r24, 0x65	; 101
     ee2:	31 f4       	brne	.+12     	; 0xef0 <Console_reset+0x46>
     ee4:	80 91 9d 01 	lds	r24, 0x019D
     ee8:	8f 5f       	subi	r24, 0xFF	; 255
     eea:	80 93 9d 01 	sts	0x019D, r24
     eee:	23 c0       	rjmp	.+70     	; 0xf36 <Console_reset+0x8c>
     ef0:	10 92 9d 01 	sts	0x019D, r1
     ef4:	20 c0       	rjmp	.+64     	; 0xf36 <Console_reset+0x8c>
    case 2: if (ch=='s') resetcounter++; else resetcounter=0; break;
     ef6:	83 37       	cpi	r24, 0x73	; 115
     ef8:	31 f4       	brne	.+12     	; 0xf06 <Console_reset+0x5c>
     efa:	80 91 9d 01 	lds	r24, 0x019D
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	80 93 9d 01 	sts	0x019D, r24
     f04:	18 c0       	rjmp	.+48     	; 0xf36 <Console_reset+0x8c>
     f06:	10 92 9d 01 	sts	0x019D, r1
     f0a:	15 c0       	rjmp	.+42     	; 0xf36 <Console_reset+0x8c>
    case 3: if (ch=='e') resetcounter++; else resetcounter=0; break;
     f0c:	85 36       	cpi	r24, 0x65	; 101
     f0e:	31 f4       	brne	.+12     	; 0xf1c <Console_reset+0x72>
     f10:	80 91 9d 01 	lds	r24, 0x019D
     f14:	8f 5f       	subi	r24, 0xFF	; 255
     f16:	80 93 9d 01 	sts	0x019D, r24
     f1a:	0d c0       	rjmp	.+26     	; 0xf36 <Console_reset+0x8c>
     f1c:	10 92 9d 01 	sts	0x019D, r1
     f20:	0a c0       	rjmp	.+20     	; 0xf36 <Console_reset+0x8c>
    case 4: if (ch=='t') resetcounter++; else resetcounter=0; break;
     f22:	84 37       	cpi	r24, 0x74	; 116
     f24:	31 f4       	brne	.+12     	; 0xf32 <Console_reset+0x88>
     f26:	80 91 9d 01 	lds	r24, 0x019D
     f2a:	8f 5f       	subi	r24, 0xFF	; 255
     f2c:	80 93 9d 01 	sts	0x019D, r24
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <Console_reset+0x8c>
     f32:	10 92 9d 01 	sts	0x019D, r1
    }

	if (resetcounter ==5){
     f36:	80 91 9d 01 	lds	r24, 0x019D
     f3a:	85 30       	cpi	r24, 0x05	; 5
     f3c:	31 f4       	brne	.+12     	; 0xf4a <Console_reset+0xa0>
		DDS_reset();
     f3e:	9d d0       	rcall	.+314    	; 0x107a <DDS_reset>
		putstring("reset jott ");
     f40:	8e e2       	ldi	r24, 0x2E	; 46
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	07 dd       	rcall	.-1522   	; 0x954 <putstring>
		resetcounter=0;
     f46:	10 92 9d 01 	sts	0x019D, r1
     f4a:	08 95       	ret

00000f4c <Console_help>:
		USART_Transmit(  '\r' );
}

void Console_help( char ch){

    switch (helpcounter) {
     f4c:	90 91 9e 01 	lds	r25, 0x019E
     f50:	91 30       	cpi	r25, 0x01	; 1
     f52:	91 f0       	breq	.+36     	; 0xf78 <Console_help+0x2c>
     f54:	91 30       	cpi	r25, 0x01	; 1
     f56:	28 f0       	brcs	.+10     	; 0xf62 <Console_help+0x16>
     f58:	92 30       	cpi	r25, 0x02	; 2
     f5a:	c9 f0       	breq	.+50     	; 0xf8e <Console_help+0x42>
     f5c:	93 30       	cpi	r25, 0x03	; 3
     f5e:	61 f5       	brne	.+88     	; 0xfb8 <Console_help+0x6c>
     f60:	21 c0       	rjmp	.+66     	; 0xfa4 <Console_help+0x58>
    case 0: if (ch=='h') helpcounter++; else helpcounter=0; break;
     f62:	88 36       	cpi	r24, 0x68	; 104
     f64:	31 f4       	brne	.+12     	; 0xf72 <Console_help+0x26>
     f66:	80 91 9e 01 	lds	r24, 0x019E
     f6a:	8f 5f       	subi	r24, 0xFF	; 255
     f6c:	80 93 9e 01 	sts	0x019E, r24
     f70:	23 c0       	rjmp	.+70     	; 0xfb8 <Console_help+0x6c>
     f72:	10 92 9e 01 	sts	0x019E, r1
     f76:	20 c0       	rjmp	.+64     	; 0xfb8 <Console_help+0x6c>
    case 1: if (ch=='e') helpcounter++; else helpcounter=0; break;
     f78:	85 36       	cpi	r24, 0x65	; 101
     f7a:	31 f4       	brne	.+12     	; 0xf88 <Console_help+0x3c>
     f7c:	80 91 9e 01 	lds	r24, 0x019E
     f80:	8f 5f       	subi	r24, 0xFF	; 255
     f82:	80 93 9e 01 	sts	0x019E, r24
     f86:	18 c0       	rjmp	.+48     	; 0xfb8 <Console_help+0x6c>
     f88:	10 92 9e 01 	sts	0x019E, r1
     f8c:	15 c0       	rjmp	.+42     	; 0xfb8 <Console_help+0x6c>
    case 2: if (ch=='l') helpcounter++; else helpcounter=0; break;
     f8e:	8c 36       	cpi	r24, 0x6C	; 108
     f90:	31 f4       	brne	.+12     	; 0xf9e <Console_help+0x52>
     f92:	80 91 9e 01 	lds	r24, 0x019E
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	80 93 9e 01 	sts	0x019E, r24
     f9c:	0d c0       	rjmp	.+26     	; 0xfb8 <Console_help+0x6c>
     f9e:	10 92 9e 01 	sts	0x019E, r1
     fa2:	0a c0       	rjmp	.+20     	; 0xfb8 <Console_help+0x6c>
    case 3: if (ch=='p') helpcounter++; else helpcounter=0; break;
     fa4:	80 37       	cpi	r24, 0x70	; 112
     fa6:	31 f4       	brne	.+12     	; 0xfb4 <Console_help+0x68>
     fa8:	80 91 9e 01 	lds	r24, 0x019E
     fac:	8f 5f       	subi	r24, 0xFF	; 255
     fae:	80 93 9e 01 	sts	0x019E, r24
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <Console_help+0x6c>
     fb4:	10 92 9e 01 	sts	0x019E, r1
  
    }

	if (helpcounter ==4){
     fb8:	80 91 9e 01 	lds	r24, 0x019E
     fbc:	84 30       	cpi	r24, 0x04	; 4
     fbe:	49 f4       	brne	.+18     	; 0xfd2 <Console_help+0x86>
		putstring("help reset minXXX maxXXX freqXXXXXXXX");
     fc0:	8a e3       	ldi	r24, 0x3A	; 58
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	c7 dc       	rcall	.-1650   	; 0x954 <putstring>
		USART_Transmit(  '\n' );
     fc6:	8a e0       	ldi	r24, 0x0A	; 10
     fc8:	b6 dc       	rcall	.-1684   	; 0x936 <USART_Transmit>
		USART_Transmit(  '\r' );
     fca:	8d e0       	ldi	r24, 0x0D	; 13
     fcc:	b4 dc       	rcall	.-1688   	; 0x936 <USART_Transmit>
		helpcounter=0;
     fce:	10 92 9e 01 	sts	0x019E, r1
     fd2:	08 95       	ret

00000fd4 <Incoming_char>:

}


//****************************************************************************************************
void Incoming_char(char c){
     fd4:	1f 93       	push	r17
     fd6:	18 2f       	mov	r17, r24

		Console_reset(c);
     fd8:	68 df       	rcall	.-304    	; 0xeaa <Console_reset>
		Console_help(c);
     fda:	81 2f       	mov	r24, r17
     fdc:	b7 df       	rcall	.-146    	; 0xf4c <Console_help>
		Console_SetMin(c);
     fde:	81 2f       	mov	r24, r17
     fe0:	e6 de       	rcall	.-564    	; 0xdae <Console_SetMin>
		Console_SetMax(c);
     fe2:	81 2f       	mov	r24, r17
     fe4:	66 de       	rcall	.-820    	; 0xcb2 <Console_SetMax>
		Console_SetFreq(c);
     fe6:	81 2f       	mov	r24, r17
     fe8:	80 dd       	rcall	.-1280   	; 0xaea <Console_SetFreq>
		
		Console_xxx(c);
     fea:	81 2f       	mov	r24, r17
     fec:	2d dd       	rcall	.-1446   	; 0xa48 <Console_xxx>

	
}
     fee:	1f 91       	pop	r17
     ff0:	08 95       	ret

00000ff2 <InitMessage>:
char *numbers[16];



void InitMessage(){
		putstring("DDS generator driver v_");
     ff2:	80 e6       	ldi	r24, 0x60	; 96
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	ae dc       	rcall	.-1700   	; 0x954 <putstring>
		putnum(10);
     ff8:	8a e0       	ldi	r24, 0x0A	; 10
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	dd dc       	rcall	.-1606   	; 0x9b8 <putnum>
		USART_Transmit(  '\n' );
     ffe:	8a e0       	ldi	r24, 0x0A	; 10
    1000:	9a dc       	rcall	.-1740   	; 0x936 <USART_Transmit>
		USART_Transmit(  '\r' );
    1002:	8d e0       	ldi	r24, 0x0D	; 13
    1004:	98 dc       	rcall	.-1744   	; 0x936 <USART_Transmit>
		putstring("Type help for command list");
    1006:	88 e7       	ldi	r24, 0x78	; 120
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	a4 dc       	rcall	.-1720   	; 0x954 <putstring>
		USART_Transmit(  '\n' );
    100c:	8a e0       	ldi	r24, 0x0A	; 10
    100e:	93 dc       	rcall	.-1754   	; 0x936 <USART_Transmit>
		USART_Transmit(  '\r' );
    1010:	8d e0       	ldi	r24, 0x0D	; 13
    1012:	91 dc       	rcall	.-1758   	; 0x936 <USART_Transmit>
}
    1014:	08 95       	ret

00001016 <EncoderDown>:
}


void EncoderDown(void){

	PORTD|=(0b01000000);
    1016:	e2 e3       	ldi	r30, 0x32	; 50
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	80 64       	ori	r24, 0x40	; 64
    101e:	80 83       	st	Z, r24
	PORTD|=(0b10000000);
    1020:	80 81       	ld	r24, Z
    1022:	80 68       	ori	r24, 0x80	; 128
    1024:	80 83       	st	Z, r24
    1026:	28 ec       	ldi	r18, 0xC8	; 200
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	c9 01       	movw	r24, r18
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <EncoderDown+0x16>
	time;
	PORTD&=~(0b01000000);
    1030:	80 81       	ld	r24, Z
    1032:	8f 7b       	andi	r24, 0xBF	; 191
    1034:	80 83       	st	Z, r24
	PORTD|=(0b10000000);
    1036:	80 81       	ld	r24, Z
    1038:	80 68       	ori	r24, 0x80	; 128
    103a:	80 83       	st	Z, r24
    103c:	c9 01       	movw	r24, r18
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <EncoderDown+0x28>
	time;
	PORTD&=~(0b01000000);
    1042:	80 81       	ld	r24, Z
    1044:	8f 7b       	andi	r24, 0xBF	; 191
    1046:	80 83       	st	Z, r24
	PORTD&=~(0b10000000);
    1048:	80 81       	ld	r24, Z
    104a:	8f 77       	andi	r24, 0x7F	; 127
    104c:	80 83       	st	Z, r24
    104e:	c9 01       	movw	r24, r18
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	f1 f7       	brne	.-4      	; 0x1050 <EncoderDown+0x3a>
	time;
	PORTD|=(0b01000000);
    1054:	80 81       	ld	r24, Z
    1056:	80 64       	ori	r24, 0x40	; 64
    1058:	80 83       	st	Z, r24
	PORTD&=~(0b10000000);
    105a:	80 81       	ld	r24, Z
    105c:	8f 77       	andi	r24, 0x7F	; 127
    105e:	80 83       	st	Z, r24
    1060:	c9 01       	movw	r24, r18
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <EncoderDown+0x4c>
	time;
	PORTD|=(0b01000000);
    1066:	80 81       	ld	r24, Z
    1068:	80 64       	ori	r24, 0x40	; 64
    106a:	80 83       	st	Z, r24
	PORTD|=(0b10000000);
    106c:	80 81       	ld	r24, Z
    106e:	80 68       	ori	r24, 0x80	; 128
    1070:	80 83       	st	Z, r24
    1072:	c9 01       	movw	r24, r18
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <EncoderDown+0x5e>
	time;

}
    1078:	08 95       	ret

0000107a <DDS_reset>:
#define time _delay_us(100)
volatile char encoder_state=0;

void DDS_reset(void){
	
	RESET_btn();
    107a:	e8 e3       	ldi	r30, 0x38	; 56
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	8e 7f       	andi	r24, 0xFE	; 254
    1082:	80 83       	st	Z, r24
    1084:	20 ed       	ldi	r18, 0xD0	; 208
    1086:	37 e0       	ldi	r19, 0x07	; 7
    1088:	48 ec       	ldi	r20, 0xC8	; 200
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	ca 01       	movw	r24, r20
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <DDS_reset+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1092:	21 50       	subi	r18, 0x01	; 1
    1094:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1096:	d1 f7       	brne	.-12     	; 0x108c <DDS_reset+0x12>
    1098:	e8 e3       	ldi	r30, 0x38	; 56
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	81 60       	ori	r24, 0x01	; 1
    10a0:	80 83       	st	Z, r24
    10a2:	20 ed       	ldi	r18, 0xD0	; 208
    10a4:	37 e0       	ldi	r19, 0x07	; 7
    10a6:	48 ec       	ldi	r20, 0xC8	; 200
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	ca 01       	movw	r24, r20
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <DDS_reset+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b0:	21 50       	subi	r18, 0x01	; 1
    10b2:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b4:	d1 f7       	brne	.-12     	; 0x10aa <DDS_reset+0x30>
    10b6:	20 e2       	ldi	r18, 0x20	; 32
    10b8:	3e e4       	ldi	r19, 0x4E	; 78
    10ba:	48 ec       	ldi	r20, 0xC8	; 200
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	ca 01       	movw	r24, r20
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	f1 f7       	brne	.-4      	; 0x10c0 <DDS_reset+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c4:	21 50       	subi	r18, 0x01	; 1
    10c6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c8:	d1 f7       	brne	.-12     	; 0x10be <DDS_reset+0x44>
	_delay_ms(2000);

	LEFT_btn();
    10ca:	e8 e3       	ldi	r30, 0x38	; 56
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	8d 7f       	andi	r24, 0xFD	; 253
    10d2:	80 83       	st	Z, r24
    10d4:	20 ed       	ldi	r18, 0xD0	; 208
    10d6:	37 e0       	ldi	r19, 0x07	; 7
    10d8:	48 ec       	ldi	r20, 0xC8	; 200
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	ca 01       	movw	r24, r20
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <DDS_reset+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e2:	21 50       	subi	r18, 0x01	; 1
    10e4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e6:	d1 f7       	brne	.-12     	; 0x10dc <DDS_reset+0x62>
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	82 60       	ori	r24, 0x02	; 2
    10f0:	80 83       	st	Z, r24
    10f2:	20 ed       	ldi	r18, 0xD0	; 208
    10f4:	37 e0       	ldi	r19, 0x07	; 7
    10f6:	48 ec       	ldi	r20, 0xC8	; 200
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	ca 01       	movw	r24, r20
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <DDS_reset+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1100:	21 50       	subi	r18, 0x01	; 1
    1102:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1104:	d1 f7       	brne	.-12     	; 0x10fa <DDS_reset+0x80>
	LEFT_btn();
    1106:	e8 e3       	ldi	r30, 0x38	; 56
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8d 7f       	andi	r24, 0xFD	; 253
    110e:	80 83       	st	Z, r24
    1110:	20 ed       	ldi	r18, 0xD0	; 208
    1112:	37 e0       	ldi	r19, 0x07	; 7
    1114:	48 ec       	ldi	r20, 0xC8	; 200
    1116:	50 e0       	ldi	r21, 0x00	; 0
    1118:	ca 01       	movw	r24, r20
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <DDS_reset+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    111e:	21 50       	subi	r18, 0x01	; 1
    1120:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1122:	d1 f7       	brne	.-12     	; 0x1118 <DDS_reset+0x9e>
    1124:	e8 e3       	ldi	r30, 0x38	; 56
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	82 60       	ori	r24, 0x02	; 2
    112c:	80 83       	st	Z, r24
    112e:	20 ed       	ldi	r18, 0xD0	; 208
    1130:	37 e0       	ldi	r19, 0x07	; 7
    1132:	48 ec       	ldi	r20, 0xC8	; 200
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	ca 01       	movw	r24, r20
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <DDS_reset+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113c:	21 50       	subi	r18, 0x01	; 1
    113e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1140:	d1 f7       	brne	.-12     	; 0x1136 <DDS_reset+0xbc>
	LEFT_btn();
    1142:	e8 e3       	ldi	r30, 0x38	; 56
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8d 7f       	andi	r24, 0xFD	; 253
    114a:	80 83       	st	Z, r24
    114c:	20 ed       	ldi	r18, 0xD0	; 208
    114e:	37 e0       	ldi	r19, 0x07	; 7
    1150:	48 ec       	ldi	r20, 0xC8	; 200
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	ca 01       	movw	r24, r20
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <DDS_reset+0xdc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115a:	21 50       	subi	r18, 0x01	; 1
    115c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115e:	d1 f7       	brne	.-12     	; 0x1154 <DDS_reset+0xda>
    1160:	e8 e3       	ldi	r30, 0x38	; 56
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	82 60       	ori	r24, 0x02	; 2
    1168:	80 83       	st	Z, r24
    116a:	20 ed       	ldi	r18, 0xD0	; 208
    116c:	37 e0       	ldi	r19, 0x07	; 7
    116e:	48 ec       	ldi	r20, 0xC8	; 200
    1170:	50 e0       	ldi	r21, 0x00	; 0
    1172:	ca 01       	movw	r24, r20
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <DDS_reset+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1178:	21 50       	subi	r18, 0x01	; 1
    117a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117c:	d1 f7       	brne	.-12     	; 0x1172 <DDS_reset+0xf8>
	LEFT_btn();
    117e:	e8 e3       	ldi	r30, 0x38	; 56
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8d 7f       	andi	r24, 0xFD	; 253
    1186:	80 83       	st	Z, r24
    1188:	20 ed       	ldi	r18, 0xD0	; 208
    118a:	37 e0       	ldi	r19, 0x07	; 7
    118c:	48 ec       	ldi	r20, 0xC8	; 200
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	ca 01       	movw	r24, r20
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	f1 f7       	brne	.-4      	; 0x1192 <DDS_reset+0x118>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1196:	21 50       	subi	r18, 0x01	; 1
    1198:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119a:	d1 f7       	brne	.-12     	; 0x1190 <DDS_reset+0x116>
    119c:	e8 e3       	ldi	r30, 0x38	; 56
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	82 60       	ori	r24, 0x02	; 2
    11a4:	80 83       	st	Z, r24
    11a6:	20 ed       	ldi	r18, 0xD0	; 208
    11a8:	37 e0       	ldi	r19, 0x07	; 7
    11aa:	48 ec       	ldi	r20, 0xC8	; 200
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	ca 01       	movw	r24, r20
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <DDS_reset+0x136>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b4:	21 50       	subi	r18, 0x01	; 1
    11b6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	d1 f7       	brne	.-12     	; 0x11ae <DDS_reset+0x134>
    11ba:	28 ee       	ldi	r18, 0xE8	; 232
    11bc:	33 e0       	ldi	r19, 0x03	; 3
    11be:	48 ec       	ldi	r20, 0xC8	; 200
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	ca 01       	movw	r24, r20
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <DDS_reset+0x14a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c8:	21 50       	subi	r18, 0x01	; 1
    11ca:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11cc:	d1 f7       	brne	.-12     	; 0x11c2 <DDS_reset+0x148>
	_delay_ms(100);
	EncoderDown();
    11ce:	23 df       	rcall	.-442    	; 0x1016 <EncoderDown>

}
    11d0:	08 95       	ret

000011d2 <EncoderUp>:

}

void EncoderUp(void){

	PORTD|=(0b01000000);
    11d2:	e2 e3       	ldi	r30, 0x32	; 50
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 64       	ori	r24, 0x40	; 64
    11da:	80 83       	st	Z, r24
	PORTD|=(0b10000000);
    11dc:	80 81       	ld	r24, Z
    11de:	80 68       	ori	r24, 0x80	; 128
    11e0:	80 83       	st	Z, r24
    11e2:	28 ec       	ldi	r18, 0xC8	; 200
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	c9 01       	movw	r24, r18
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <EncoderUp+0x16>
	time;
	PORTD|=(0b01000000);
    11ec:	80 81       	ld	r24, Z
    11ee:	80 64       	ori	r24, 0x40	; 64
    11f0:	80 83       	st	Z, r24
	PORTD&=~(0b10000000);
    11f2:	80 81       	ld	r24, Z
    11f4:	8f 77       	andi	r24, 0x7F	; 127
    11f6:	80 83       	st	Z, r24
    11f8:	c9 01       	movw	r24, r18
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <EncoderUp+0x28>
	time;
	PORTD&=~(0b01000000);
    11fe:	80 81       	ld	r24, Z
    1200:	8f 7b       	andi	r24, 0xBF	; 191
    1202:	80 83       	st	Z, r24
	PORTD&=~(0b10000000);
    1204:	80 81       	ld	r24, Z
    1206:	8f 77       	andi	r24, 0x7F	; 127
    1208:	80 83       	st	Z, r24
    120a:	c9 01       	movw	r24, r18
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <EncoderUp+0x3a>
	time;
	PORTD&=~(0b01000000);
    1210:	80 81       	ld	r24, Z
    1212:	8f 7b       	andi	r24, 0xBF	; 191
    1214:	80 83       	st	Z, r24
	PORTD|=(0b10000000);
    1216:	80 81       	ld	r24, Z
    1218:	80 68       	ori	r24, 0x80	; 128
    121a:	80 83       	st	Z, r24
    121c:	c9 01       	movw	r24, r18
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <EncoderUp+0x4c>
	time;
	PORTD|=(0b01000000);
    1222:	80 81       	ld	r24, Z
    1224:	80 64       	ori	r24, 0x40	; 64
    1226:	80 83       	st	Z, r24
	PORTD|=(0b10000000);
    1228:	80 81       	ld	r24, Z
    122a:	80 68       	ori	r24, 0x80	; 128
    122c:	80 83       	st	Z, r24
    122e:	c9 01       	movw	r24, r18
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <EncoderUp+0x5e>
	time;

}
    1234:	08 95       	ret

00001236 <DDS_SetFreq>:
}

void DDS_SetFreq(char *numbers){
	
	char i=0;
	putnum(666);
    1236:	8a e9       	ldi	r24, 0x9A	; 154
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	be db       	rcall	.-2180   	; 0x9b8 <putnum>
	for(i=0;i<numbers[6];i++) putnum(4);

	for(i=0;i<numbers[8];i++) putnum(5);
*/

}
    123c:	08 95       	ret

0000123e <__udivmodhi4>:
    123e:	aa 1b       	sub	r26, r26
    1240:	bb 1b       	sub	r27, r27
    1242:	51 e1       	ldi	r21, 0x11	; 17
    1244:	07 c0       	rjmp	.+14     	; 0x1254 <__udivmodhi4_ep>

00001246 <__udivmodhi4_loop>:
    1246:	aa 1f       	adc	r26, r26
    1248:	bb 1f       	adc	r27, r27
    124a:	a6 17       	cp	r26, r22
    124c:	b7 07       	cpc	r27, r23
    124e:	10 f0       	brcs	.+4      	; 0x1254 <__udivmodhi4_ep>
    1250:	a6 1b       	sub	r26, r22
    1252:	b7 0b       	sbc	r27, r23

00001254 <__udivmodhi4_ep>:
    1254:	88 1f       	adc	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	5a 95       	dec	r21
    125a:	a9 f7       	brne	.-22     	; 0x1246 <__udivmodhi4_loop>
    125c:	80 95       	com	r24
    125e:	90 95       	com	r25
    1260:	bc 01       	movw	r22, r24
    1262:	cd 01       	movw	r24, r26
    1264:	08 95       	ret

00001266 <__divmodhi4>:
    1266:	97 fb       	bst	r25, 7
    1268:	09 2e       	mov	r0, r25
    126a:	07 26       	eor	r0, r23
    126c:	0a d0       	rcall	.+20     	; 0x1282 <__divmodhi4_neg1>
    126e:	77 fd       	sbrc	r23, 7
    1270:	04 d0       	rcall	.+8      	; 0x127a <__divmodhi4_neg2>
    1272:	e5 df       	rcall	.-54     	; 0x123e <__udivmodhi4>
    1274:	06 d0       	rcall	.+12     	; 0x1282 <__divmodhi4_neg1>
    1276:	00 20       	and	r0, r0
    1278:	1a f4       	brpl	.+6      	; 0x1280 <__divmodhi4_exit>

0000127a <__divmodhi4_neg2>:
    127a:	70 95       	com	r23
    127c:	61 95       	neg	r22
    127e:	7f 4f       	sbci	r23, 0xFF	; 255

00001280 <__divmodhi4_exit>:
    1280:	08 95       	ret

00001282 <__divmodhi4_neg1>:
    1282:	f6 f7       	brtc	.-4      	; 0x1280 <__divmodhi4_exit>
    1284:	90 95       	com	r25
    1286:	81 95       	neg	r24
    1288:	9f 4f       	sbci	r25, 0xFF	; 255
    128a:	08 95       	ret

0000128c <itoa>:
    128c:	fb 01       	movw	r30, r22
    128e:	9f 01       	movw	r18, r30
    1290:	e8 94       	clt
    1292:	42 30       	cpi	r20, 0x02	; 2
    1294:	bc f0       	brlt	.+46     	; 0x12c4 <itoa+0x38>
    1296:	45 32       	cpi	r20, 0x25	; 37
    1298:	ac f4       	brge	.+42     	; 0x12c4 <itoa+0x38>
    129a:	4a 30       	cpi	r20, 0x0A	; 10
    129c:	29 f4       	brne	.+10     	; 0x12a8 <itoa+0x1c>
    129e:	97 fb       	bst	r25, 7
    12a0:	1e f4       	brtc	.+6      	; 0x12a8 <itoa+0x1c>
    12a2:	90 95       	com	r25
    12a4:	81 95       	neg	r24
    12a6:	9f 4f       	sbci	r25, 0xFF	; 255
    12a8:	64 2f       	mov	r22, r20
    12aa:	77 27       	eor	r23, r23
    12ac:	c8 df       	rcall	.-112    	; 0x123e <__udivmodhi4>
    12ae:	80 5d       	subi	r24, 0xD0	; 208
    12b0:	8a 33       	cpi	r24, 0x3A	; 58
    12b2:	0c f0       	brlt	.+2      	; 0x12b6 <itoa+0x2a>
    12b4:	89 5d       	subi	r24, 0xD9	; 217
    12b6:	81 93       	st	Z+, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	a9 f7       	brne	.-22     	; 0x12a8 <itoa+0x1c>
    12be:	16 f4       	brtc	.+4      	; 0x12c4 <itoa+0x38>
    12c0:	5d e2       	ldi	r21, 0x2D	; 45
    12c2:	51 93       	st	Z+, r21
    12c4:	10 82       	st	Z, r1
    12c6:	c9 01       	movw	r24, r18
    12c8:	00 c0       	rjmp	.+0      	; 0x12ca <strrev>

000012ca <strrev>:
    12ca:	dc 01       	movw	r26, r24
    12cc:	fc 01       	movw	r30, r24
    12ce:	67 2f       	mov	r22, r23
    12d0:	71 91       	ld	r23, Z+
    12d2:	77 23       	and	r23, r23
    12d4:	e1 f7       	brne	.-8      	; 0x12ce <strrev+0x4>
    12d6:	32 97       	sbiw	r30, 0x02	; 2
    12d8:	04 c0       	rjmp	.+8      	; 0x12e2 <strrev+0x18>
    12da:	7c 91       	ld	r23, X
    12dc:	6d 93       	st	X+, r22
    12de:	70 83       	st	Z, r23
    12e0:	62 91       	ld	r22, -Z
    12e2:	ae 17       	cp	r26, r30
    12e4:	bf 07       	cpc	r27, r31
    12e6:	c8 f3       	brcs	.-14     	; 0x12da <strrev+0x10>
    12e8:	08 95       	ret

000012ea <_exit>:
    12ea:	f8 94       	cli

000012ec <__stop_program>:
    12ec:	ff cf       	rjmp	.-2      	; 0x12ec <__stop_program>
