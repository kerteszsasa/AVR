
weller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000482  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000482  000004f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000ad  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007b6  00000000  00000000  000005fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002c0  00000000  00000000  00000db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000637  00000000  00000000  00001071  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  000016a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000192  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000046e  00000000  00000000  000018ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e8       	ldi	r30, 0x82	; 130
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a8 37       	cpi	r26, 0x78	; 120
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	1a d0       	rcall	.+52     	; 0x7e <main>
  4a:	19 c2       	rjmp	.+1074   	; 0x47e <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <Konfig10bitADC>:
#define on() PORTC|=4
#define off() PORTC&=~4

void Konfig10bitADC()    // ADC konfiguralas (beallitas)
{
    ADMUX |= 0;//(1<<REFS0)|(1<<REFS1);    // 2.56V mint referencia
  4e:	87 b1       	in	r24, 0x07	; 7
  50:	87 b9       	out	0x07, r24	; 7
    ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);  // ADC engedelyezese, ADC eloosztas = 8 (125 KHz)
  52:	83 e8       	ldi	r24, 0x83	; 131
  54:	86 b9       	out	0x06, r24	; 6
}
  56:	08 95       	ret

00000058 <Beolvas10bitADC>:
 
unsigned int Beolvas10bitADC(unsigned char csatorna)
{
	ADMUX = (ADMUX & 0b11110000) | csatorna;    //ADC csatorna kivalasztasa
  58:	97 b1       	in	r25, 0x07	; 7
  5a:	90 7f       	andi	r25, 0xF0	; 240
  5c:	98 2b       	or	r25, r24
  5e:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= (1<<ADSC);    // ADC konverzio elinditasa
  60:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));    // varas az atalakitasra
  62:	36 99       	sbic	0x06, 6	; 6
  64:	fe cf       	rjmp	.-4      	; 0x62 <Beolvas10bitADC+0xa>
	ADCSRA |= (1<<ADSC);         // konverzió elindítás
  66:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1<<ADSC));    // varas az atalakitasra
  68:	36 99       	sbic	0x06, 6	; 6
  6a:	fe cf       	rjmp	.-4      	; 0x68 <Beolvas10bitADC+0x10>
	return (ADCL | (ADCH<<8));    // ADC ertek kiolvasasa
  6c:	24 b1       	in	r18, 0x04	; 4
  6e:	45 b1       	in	r20, 0x05	; 5
  70:	94 2f       	mov	r25, r20
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	30 e0       	ldi	r19, 0x00	; 0
  76:	28 2b       	or	r18, r24
  78:	39 2b       	or	r19, r25
}
  7a:	c9 01       	movw	r24, r18
  7c:	08 95       	ret

0000007e <main>:

void main()
{
  7e:	af 92       	push	r10
  80:	bf 92       	push	r11
  82:	cf 92       	push	r12
  84:	df 92       	push	r13
  86:	ef 92       	push	r14
  88:	ff 92       	push	r15
  8a:	0f 93       	push	r16
  8c:	1f 93       	push	r17
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29


//output led
DDRC=4;
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	84 bb       	out	0x14, r24	; 20
#define on() PORTC|=4
#define off() PORTC&=~4

void Konfig10bitADC()    // ADC konfiguralas (beallitas)
{
    ADMUX |= 0;//(1<<REFS0)|(1<<REFS1);    // 2.56V mint referencia
  96:	87 b1       	in	r24, 0x07	; 7
  98:	87 b9       	out	0x07, r24	; 7
    ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);  // ADC engedelyezese, ADC eloosztas = 8 (125 KHz)
  9a:	83 e8       	ldi	r24, 0x83	; 131
  9c:	86 b9       	out	0x06, r24	; 6
	unsigned long gettemp=0;


	//Initialize LCD module
//	InitLCD(LS_BLINK|LS_ULINE);
		InitLCD(0);
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	ee d0       	rcall	.+476    	; 0x27e <InitLCD>

	//Clear the screen
	LCDClear();
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	c4 d0       	rcall	.+392    	; 0x230 <LCDByte>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a8:	c9 e1       	ldi	r28, 0x19	; 25
  aa:	d0 e0       	ldi	r29, 0x00	; 0

	//LCDWriteString("SET128C TEMP255C");
	
	while(1){

		settemp=Beolvas10bitADC(pot);
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	d4 df       	rcall	.-88     	; 0x58 <Beolvas10bitADC>
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b0 e0       	ldi	r27, 0x00	; 0
		settemp*=5;
		*/


		
		settemp/=23;
  b4:	bc 01       	movw	r22, r24
  b6:	cd 01       	movw	r24, r26
  b8:	27 e1       	ldi	r18, 0x17	; 23
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	a8 d1       	rcall	.+848    	; 0x412 <__udivmodsi4>
  c2:	b9 01       	movw	r22, r18
  c4:	ca 01       	movw	r24, r20
		settemp++;
  c6:	6f 5f       	subi	r22, 0xFF	; 255
  c8:	7f 4f       	sbci	r23, 0xFF	; 255
  ca:	8f 4f       	sbci	r24, 0xFF	; 255
  cc:	9f 4f       	sbci	r25, 0xFF	; 255
	
		settemp*=10;
  ce:	2a e0       	ldi	r18, 0x0A	; 10
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	6b d1       	rcall	.+726    	; 0x3ae <__mulsi3>
  d8:	5b 01       	movw	r10, r22
  da:	6c 01       	movw	r12, r24
	//	_delay_ms(1000);
		//gettemp=( Beolvas10bitADC(temp)-740 )*30/21 + 150;
		//gettemp=( Beolvas10bitADC(temp)-600 )*42/35 + 30;
		//gettemp=Beolvas10bitADC(temp);

		gettemp=Beolvas10bitADC(temp);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	bc df       	rcall	.-136    	; 0x58 <Beolvas10bitADC>
  e0:	a0 e0       	ldi	r26, 0x00	; 0
  e2:	b0 e0       	ldi	r27, 0x00	; 0

	

	//	gettemp/=4;

		gettemp*=125;
  e4:	bc 01       	movw	r22, r24
  e6:	cd 01       	movw	r24, r26
  e8:	2d e7       	ldi	r18, 0x7D	; 125
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	5e d1       	rcall	.+700    	; 0x3ae <__mulsi3>
		gettemp/=512;
  f2:	29 e0       	ldi	r18, 0x09	; 9
  f4:	96 95       	lsr	r25
  f6:	87 95       	ror	r24
  f8:	77 95       	ror	r23
  fa:	67 95       	ror	r22
  fc:	2a 95       	dec	r18
  fe:	d1 f7       	brne	.-12     	; 0xf4 <main+0x76>

		//most visszaadja a bemenõ fesz értékét

		gettemp*=25;
 100:	29 e1       	ldi	r18, 0x19	; 25
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	52 d1       	rcall	.+676    	; 0x3ae <__mulsi3>

		// most már ellenállás értéket ad vissza 40mA áramnál

		gettemp/=10;
 10a:	2a e0       	ldi	r18, 0x0A	; 10
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	50 e0       	ldi	r21, 0x00	; 0
 112:	7f d1       	rcall	.+766    	; 0x412 <__udivmodsi4>
 114:	b9 01       	movw	r22, r18
 116:	ca 01       	movw	r24, r20
		gettemp-=209;
 118:	61 5d       	subi	r22, 0xD1	; 209
 11a:	70 40       	sbci	r23, 0x00	; 0
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0

			gettemp*=124;
 120:	2c e7       	ldi	r18, 0x7C	; 124
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	42 d1       	rcall	.+644    	; 0x3ae <__mulsi3>
			gettemp/=100;
 12a:	24 e6       	ldi	r18, 0x64	; 100
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	6f d1       	rcall	.+734    	; 0x412 <__udivmodsi4>
 134:	79 01       	movw	r14, r18
 136:	8a 01       	movw	r16, r20


		LCDClear();
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	79 d0       	rcall	.+242    	; 0x230 <LCDByte>

		LCDWriteString("Set");
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c5 d0       	rcall	.+394    	; 0x2ce <LCDWriteString>
		LCDWriteIntXY(3,0,settemp,3);
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	2a d1       	rcall	.+596    	; 0x39e <LCDGotoXY>
 14a:	c5 01       	movw	r24, r10
 14c:	63 e0       	ldi	r22, 0x03	; 3
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	cb d0       	rcall	.+406    	; 0x2e8 <LCDWriteInt>
		LCDWriteString("C ");
 152:	84 e6       	ldi	r24, 0x64	; 100
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	bb d0       	rcall	.+374    	; 0x2ce <LCDWriteString>
		
		if(gettemp == 512){
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	e8 16       	cp	r14, r24
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	f8 06       	cpc	r15, r24
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	08 07       	cpc	r16, r24
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	18 07       	cpc	r17, r24
 168:	19 f4       	brne	.+6      	; 0x170 <main+0xf2>
			LCDWriteString("NO IRON");
 16a:	87 e6       	ldi	r24, 0x67	; 103
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0c c0       	rjmp	.+24     	; 0x188 <main+0x10a>
			}
		else{

			LCDWriteString("Temp");
 170:	8f e6       	ldi	r24, 0x6F	; 111
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	ac d0       	rcall	.+344    	; 0x2ce <LCDWriteString>
			LCDWriteIntXY(12,0,gettemp,3);
 176:	8c e0       	ldi	r24, 0x0C	; 12
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	11 d1       	rcall	.+546    	; 0x39e <LCDGotoXY>
 17c:	c7 01       	movw	r24, r14
 17e:	63 e0       	ldi	r22, 0x03	; 3
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	b2 d0       	rcall	.+356    	; 0x2e8 <LCDWriteInt>
			LCDWriteString("C");
 184:	84 e7       	ldi	r24, 0x74	; 116
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	a2 d0       	rcall	.+324    	; 0x2ce <LCDWriteString>
		}
			

			if(settemp > gettemp+0) on();
 18a:	ea 14       	cp	r14, r10
 18c:	fb 04       	cpc	r15, r11
 18e:	0c 05       	cpc	r16, r12
 190:	1d 05       	cpc	r17, r13
 192:	10 f4       	brcc	.+4      	; 0x198 <main+0x11a>
 194:	aa 9a       	sbi	0x15, 2	; 21
 196:	01 c0       	rjmp	.+2      	; 0x19a <main+0x11c>

			if(settemp <= gettemp) off();
 198:	aa 98       	cbi	0x15, 2	; 21



			LCDWriteStringXY(0,1,"");
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	ff d0       	rcall	.+510    	; 0x39e <LCDGotoXY>
 1a0:	86 e7       	ldi	r24, 0x76	; 118
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	94 d0       	rcall	.+296    	; 0x2ce <LCDWriteString>
			//LCDData(255);
			//LCDData(255);

		barlength=settemp/28;
 1a6:	c6 01       	movw	r24, r12
 1a8:	b5 01       	movw	r22, r10
 1aa:	2c e1       	ldi	r18, 0x1C	; 28
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	2f d1       	rcall	.+606    	; 0x412 <__udivmodsi4>
 1b4:	79 01       	movw	r14, r18
 1b6:	00 e0       	ldi	r16, 0x00	; 0
 1b8:	10 e0       	ldi	r17, 0x00	; 0
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <main+0x148>

			for(barindex=0;barindex<barlength;barindex++){
			LCDData(255);
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	37 d0       	rcall	.+110    	; 0x230 <LCDByte>
			//LCDData(255);
			//LCDData(255);

		barlength=settemp/28;

			for(barindex=0;barindex<barlength;barindex++){
 1c2:	0f 5f       	subi	r16, 0xFF	; 255
 1c4:	1f 4f       	sbci	r17, 0xFF	; 255
 1c6:	0e 15       	cp	r16, r14
 1c8:	1f 05       	cpc	r17, r15
 1ca:	c4 f3       	brlt	.-16     	; 0x1bc <main+0x13e>
 1cc:	88 e8       	ldi	r24, 0x88	; 136
 1ce:	93 e1       	ldi	r25, 0x13	; 19
 1d0:	fe 01       	movw	r30, r28
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x154>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d8:	d9 f7       	brne	.-10     	; 0x1d0 <main+0x152>
 1da:	68 cf       	rjmp	.-304    	; 0xac <main+0x2e>

000001dc <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 1dc:	87 b3       	in	r24, 0x17	; 23
 1de:	80 7f       	andi	r24, 0xF0	; 240
 1e0:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
 1e2:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
 1e4:	95 98       	cbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	97 9a       	sbi	0x12, 7	; 18
 1f0:	82 2f       	mov	r24, r18
 1f2:	8a 95       	dec	r24
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 1f6:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 1f8:	82 95       	swap	r24
 1fa:	80 7f       	andi	r24, 0xF0	; 240
 1fc:	92 2f       	mov	r25, r18
 1fe:	9a 95       	dec	r25
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 202:	97 98       	cbi	0x12, 7	; 18
 204:	92 2f       	mov	r25, r18
 206:	9a 95       	dec	r25
 208:	f1 f7       	brne	.-4      	; 0x206 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 20a:	97 9a       	sbi	0x12, 7	; 18
 20c:	92 2f       	mov	r25, r18
 20e:	9a 95       	dec	r25
 210:	f1 f7       	brne	.-4      	; 0x20e <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 212:	96 b3       	in	r25, 0x16	; 22
 214:	92 2f       	mov	r25, r18
 216:	9a 95       	dec	r25
 218:	f1 f7       	brne	.-4      	; 0x216 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 21a:	97 98       	cbi	0x12, 7	; 18
 21c:	92 2f       	mov	r25, r18
 21e:	9a 95       	dec	r25
 220:	f1 f7       	brne	.-4      	; 0x21e <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 222:	87 fd       	sbrc	r24, 7
 224:	e4 cf       	rjmp	.-56     	; 0x1ee <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 226:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 228:	87 b3       	in	r24, 0x17	; 23
 22a:	8f 60       	ori	r24, 0x0F	; 15
 22c:	87 bb       	out	0x17, r24	; 23

}
 22e:	08 95       	ret

00000230 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 230:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 232:	66 23       	and	r22, r22
 234:	11 f4       	brne	.+4      	; 0x23a <LCDByte+0xa>
	CLEAR_RS();
 236:	95 98       	cbi	0x12, 5	; 18
 238:	01 c0       	rjmp	.+2      	; 0x23c <LCDByte+0xc>
else
	SET_RS();
 23a:	95 9a       	sbi	0x12, 5	; 18
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	82 2f       	mov	r24, r18
 240:	8a 95       	dec	r24
 242:	f1 f7       	brne	.-4      	; 0x240 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 244:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 246:	88 b3       	in	r24, 0x18	; 24
 248:	93 2f       	mov	r25, r19
 24a:	92 95       	swap	r25
 24c:	9f 70       	andi	r25, 0x0F	; 15
 24e:	80 7f       	andi	r24, 0xF0	; 240
 250:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 252:	98 bb       	out	0x18, r25	; 24
 254:	82 2f       	mov	r24, r18
 256:	8a 95       	dec	r24
 258:	f1 f7       	brne	.-4      	; 0x256 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 25a:	97 98       	cbi	0x12, 7	; 18
 25c:	82 2f       	mov	r24, r18
 25e:	8a 95       	dec	r24
 260:	f1 f7       	brne	.-4      	; 0x25e <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 262:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 264:	88 b3       	in	r24, 0x18	; 24
 266:	3f 70       	andi	r19, 0x0F	; 15
 268:	80 7f       	andi	r24, 0xF0	; 240
 26a:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 26c:	88 bb       	out	0x18, r24	; 24
 26e:	82 2f       	mov	r24, r18
 270:	8a 95       	dec	r24
 272:	f1 f7       	brne	.-4      	; 0x270 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 274:	97 98       	cbi	0x12, 7	; 18
 276:	2a 95       	dec	r18
 278:	f1 f7       	brne	.-4      	; 0x276 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 27a:	b0 df       	rcall	.-160    	; 0x1dc <LCDBusyLoop>
}
 27c:	08 95       	ret

0000027e <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 27e:	1f 93       	push	r17
 280:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 282:	8c e4       	ldi	r24, 0x4C	; 76
 284:	9d e1       	ldi	r25, 0x1D	; 29
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 28a:	87 b3       	in	r24, 0x17	; 23
 28c:	8f 60       	ori	r24, 0x0F	; 15
 28e:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
 290:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 292:	8d 9a       	sbi	0x11, 5	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 294:	8e 9a       	sbi	0x11, 6	; 17

	LCD_DATA_PORT&=0XF0;
 296:	88 b3       	in	r24, 0x18	; 24
 298:	80 7f       	andi	r24, 0xF0	; 240
 29a:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
 29c:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 29e:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 2a0:	95 98       	cbi	0x12, 5	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	98 2f       	mov	r25, r24
 2a6:	9a 95       	dec	r25
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 2aa:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 2ac:	c1 9a       	sbi	0x18, 1	; 24
 2ae:	98 2f       	mov	r25, r24
 2b0:	9a 95       	dec	r25
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 2b4:	97 98       	cbi	0x12, 7	; 18
 2b6:	8a 95       	dec	r24
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 2ba:	90 df       	rcall	.-224    	; 0x1dc <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 2bc:	81 2f       	mov	r24, r17
 2be:	8c 60       	ori	r24, 0x0C	; 12
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	b6 df       	rcall	.-148    	; 0x230 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 2c4:	88 e2       	ldi	r24, 0x28	; 40
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	b3 df       	rcall	.-154    	; 0x230 <LCDByte>
}
 2ca:	1f 91       	pop	r17
 2cc:	08 95       	ret

000002ce <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ec 01       	movw	r28, r24
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <LCDWriteString+0xe>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	ab df       	rcall	.-170    	; 0x230 <LCDByte>
	msg++;
 2da:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 2dc:	88 81       	ld	r24, Y
 2de:	88 23       	and	r24, r24
 2e0:	d1 f7       	brne	.-12     	; 0x2d6 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 2e8:	ef 92       	push	r14
 2ea:	ff 92       	push	r15
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	df 93       	push	r29
 2f2:	cf 93       	push	r28
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <LCDWriteInt+0xe>
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <LCDWriteInt+0x10>
 2f8:	0f 92       	push	r0
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	9c 01       	movw	r18, r24
 300:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 302:	fe 01       	movw	r30, r28
 304:	31 96       	adiw	r30, 0x01	; 1
 306:	85 e0       	ldi	r24, 0x05	; 5
 308:	df 01       	movw	r26, r30
 30a:	1d 92       	st	X+, r1
 30c:	8a 95       	dec	r24
 30e:	e9 f7       	brne	.-6      	; 0x30a <LCDWriteInt+0x22>
 310:	fe 01       	movw	r30, r28
 312:	35 96       	adiw	r30, 0x05	; 5
 314:	0b c0       	rjmp	.+22     	; 0x32c <LCDWriteInt+0x44>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 316:	c9 01       	movw	r24, r18
 318:	6a e0       	ldi	r22, 0x0A	; 10
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	67 d0       	rcall	.+206    	; 0x3ec <__divmodhi4>
 31e:	80 83       	st	Z, r24
	val=val/10;
 320:	c9 01       	movw	r24, r18
 322:	6a e0       	ldi	r22, 0x0A	; 10
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	62 d0       	rcall	.+196    	; 0x3ec <__divmodhi4>
 328:	9b 01       	movw	r18, r22
 32a:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 32c:	21 15       	cp	r18, r1
 32e:	31 05       	cpc	r19, r1
 330:	91 f7       	brne	.-28     	; 0x316 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 332:	bf ef       	ldi	r27, 0xFF	; 255
 334:	0f 3f       	cpi	r16, 0xFF	; 255
 336:	1b 07       	cpc	r17, r27
 338:	79 f4       	brne	.+30     	; 0x358 <LCDWriteInt+0x70>
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 33e:	ae 01       	movw	r20, r28
 340:	4f 5f       	subi	r20, 0xFF	; 255
 342:	5f 4f       	sbci	r21, 0xFF	; 255
 344:	02 c0       	rjmp	.+4      	; 0x34a <LCDWriteInt+0x62>
 346:	2f 5f       	subi	r18, 0xFF	; 255
 348:	3f 4f       	sbci	r19, 0xFF	; 255
 34a:	fa 01       	movw	r30, r20
 34c:	e2 0f       	add	r30, r18
 34e:	f3 1f       	adc	r31, r19
 350:	80 81       	ld	r24, Z
 352:	88 23       	and	r24, r24
 354:	c1 f3       	breq	.-16     	; 0x346 <LCDWriteInt+0x5e>
 356:	04 c0       	rjmp	.+8      	; 0x360 <LCDWriteInt+0x78>
	else
		j=5-field_length;
 358:	25 e0       	ldi	r18, 0x05	; 5
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	20 1b       	sub	r18, r16
 35e:	31 0b       	sbc	r19, r17
 360:	7e 01       	movw	r14, r28
 362:	08 94       	sec
 364:	e1 1c       	adc	r14, r1
 366:	f1 1c       	adc	r15, r1
 368:	e2 0e       	add	r14, r18
 36a:	f3 1e       	adc	r15, r19
 36c:	89 01       	movw	r16, r18
 36e:	08 c0       	rjmp	.+16     	; 0x380 <LCDWriteInt+0x98>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 370:	f7 01       	movw	r30, r14
 372:	81 91       	ld	r24, Z+
 374:	7f 01       	movw	r14, r30
 376:	80 5d       	subi	r24, 0xD0	; 208
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	5a df       	rcall	.-332    	; 0x230 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 37c:	0f 5f       	subi	r16, 0xFF	; 255
 37e:	1f 4f       	sbci	r17, 0xFF	; 255
 380:	05 30       	cpi	r16, 0x05	; 5
 382:	11 05       	cpc	r17, r1
 384:	ac f3       	brlt	.-22     	; 0x370 <LCDWriteInt+0x88>
	{
	LCDData(48+str[i]);
	}
}
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	cf 91       	pop	r28
 392:	df 91       	pop	r29
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	ff 90       	pop	r15
 39a:	ef 90       	pop	r14
 39c:	08 95       	ret

0000039e <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 39e:	88 32       	cpi	r24, 0x28	; 40
 3a0:	28 f4       	brcc	.+10     	; 0x3ac <LCDGotoXY+0xe>
 {
  if(y) x|=0b01000000;
 3a2:	61 11       	cpse	r22, r1
 3a4:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 3a6:	80 68       	ori	r24, 0x80	; 128
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	42 df       	rcall	.-380    	; 0x230 <LCDByte>
 3ac:	08 95       	ret

000003ae <__mulsi3>:
 3ae:	62 9f       	mul	r22, r18
 3b0:	d0 01       	movw	r26, r0
 3b2:	73 9f       	mul	r23, r19
 3b4:	f0 01       	movw	r30, r0
 3b6:	82 9f       	mul	r24, r18
 3b8:	e0 0d       	add	r30, r0
 3ba:	f1 1d       	adc	r31, r1
 3bc:	64 9f       	mul	r22, r20
 3be:	e0 0d       	add	r30, r0
 3c0:	f1 1d       	adc	r31, r1
 3c2:	92 9f       	mul	r25, r18
 3c4:	f0 0d       	add	r31, r0
 3c6:	83 9f       	mul	r24, r19
 3c8:	f0 0d       	add	r31, r0
 3ca:	74 9f       	mul	r23, r20
 3cc:	f0 0d       	add	r31, r0
 3ce:	65 9f       	mul	r22, r21
 3d0:	f0 0d       	add	r31, r0
 3d2:	99 27       	eor	r25, r25
 3d4:	72 9f       	mul	r23, r18
 3d6:	b0 0d       	add	r27, r0
 3d8:	e1 1d       	adc	r30, r1
 3da:	f9 1f       	adc	r31, r25
 3dc:	63 9f       	mul	r22, r19
 3de:	b0 0d       	add	r27, r0
 3e0:	e1 1d       	adc	r30, r1
 3e2:	f9 1f       	adc	r31, r25
 3e4:	bd 01       	movw	r22, r26
 3e6:	cf 01       	movw	r24, r30
 3e8:	11 24       	eor	r1, r1
 3ea:	08 95       	ret

000003ec <__divmodhi4>:
 3ec:	97 fb       	bst	r25, 7
 3ee:	09 2e       	mov	r0, r25
 3f0:	07 26       	eor	r0, r23
 3f2:	0a d0       	rcall	.+20     	; 0x408 <__divmodhi4_neg1>
 3f4:	77 fd       	sbrc	r23, 7
 3f6:	04 d0       	rcall	.+8      	; 0x400 <__divmodhi4_neg2>
 3f8:	2e d0       	rcall	.+92     	; 0x456 <__udivmodhi4>
 3fa:	06 d0       	rcall	.+12     	; 0x408 <__divmodhi4_neg1>
 3fc:	00 20       	and	r0, r0
 3fe:	1a f4       	brpl	.+6      	; 0x406 <__divmodhi4_exit>

00000400 <__divmodhi4_neg2>:
 400:	70 95       	com	r23
 402:	61 95       	neg	r22
 404:	7f 4f       	sbci	r23, 0xFF	; 255

00000406 <__divmodhi4_exit>:
 406:	08 95       	ret

00000408 <__divmodhi4_neg1>:
 408:	f6 f7       	brtc	.-4      	; 0x406 <__divmodhi4_exit>
 40a:	90 95       	com	r25
 40c:	81 95       	neg	r24
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	08 95       	ret

00000412 <__udivmodsi4>:
 412:	a1 e2       	ldi	r26, 0x21	; 33
 414:	1a 2e       	mov	r1, r26
 416:	aa 1b       	sub	r26, r26
 418:	bb 1b       	sub	r27, r27
 41a:	fd 01       	movw	r30, r26
 41c:	0d c0       	rjmp	.+26     	; 0x438 <__udivmodsi4_ep>

0000041e <__udivmodsi4_loop>:
 41e:	aa 1f       	adc	r26, r26
 420:	bb 1f       	adc	r27, r27
 422:	ee 1f       	adc	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	a2 17       	cp	r26, r18
 428:	b3 07       	cpc	r27, r19
 42a:	e4 07       	cpc	r30, r20
 42c:	f5 07       	cpc	r31, r21
 42e:	20 f0       	brcs	.+8      	; 0x438 <__udivmodsi4_ep>
 430:	a2 1b       	sub	r26, r18
 432:	b3 0b       	sbc	r27, r19
 434:	e4 0b       	sbc	r30, r20
 436:	f5 0b       	sbc	r31, r21

00000438 <__udivmodsi4_ep>:
 438:	66 1f       	adc	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	88 1f       	adc	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	1a 94       	dec	r1
 442:	69 f7       	brne	.-38     	; 0x41e <__udivmodsi4_loop>
 444:	60 95       	com	r22
 446:	70 95       	com	r23
 448:	80 95       	com	r24
 44a:	90 95       	com	r25
 44c:	9b 01       	movw	r18, r22
 44e:	ac 01       	movw	r20, r24
 450:	bd 01       	movw	r22, r26
 452:	cf 01       	movw	r24, r30
 454:	08 95       	ret

00000456 <__udivmodhi4>:
 456:	aa 1b       	sub	r26, r26
 458:	bb 1b       	sub	r27, r27
 45a:	51 e1       	ldi	r21, 0x11	; 17
 45c:	07 c0       	rjmp	.+14     	; 0x46c <__udivmodhi4_ep>

0000045e <__udivmodhi4_loop>:
 45e:	aa 1f       	adc	r26, r26
 460:	bb 1f       	adc	r27, r27
 462:	a6 17       	cp	r26, r22
 464:	b7 07       	cpc	r27, r23
 466:	10 f0       	brcs	.+4      	; 0x46c <__udivmodhi4_ep>
 468:	a6 1b       	sub	r26, r22
 46a:	b7 0b       	sbc	r27, r23

0000046c <__udivmodhi4_ep>:
 46c:	88 1f       	adc	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	5a 95       	dec	r21
 472:	a9 f7       	brne	.-22     	; 0x45e <__udivmodhi4_loop>
 474:	80 95       	com	r24
 476:	90 95       	com	r25
 478:	bc 01       	movw	r22, r24
 47a:	cd 01       	movw	r24, r26
 47c:	08 95       	ret

0000047e <_exit>:
 47e:	f8 94       	cli

00000480 <__stop_program>:
 480:	ff cf       	rjmp	.-2      	; 0x480 <__stop_program>
