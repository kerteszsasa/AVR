
IR_proximity_mega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001d6  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000060  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000195  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f3  00000000  00000000  000003eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001e0  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000fc  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__vector_10>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e6       	ldi	r30, 0x62	; 98
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  c6:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initTimr2>:
#define OUT_2_PIN				4
#define OUT_2_delay_sec 		1


void initTimr2(){
	ASSR =0x08; // ASSR enables clocking From 32kCrystal
  ce:	88 e0       	ldi	r24, 0x08	; 8
  d0:	80 bf       	out	0x30, r24	; 48

	TCNT2 =0x00; //zero the timer register
  d2:	14 bc       	out	0x24, r1	; 36

	TCCR2 = (1<<CS22 ) | (0<<CS21) | (1<<CS20 ); //1028 prescaler
  d4:	85 e0       	ldi	r24, 0x05	; 5
  d6:	85 bd       	out	0x25, r24	; 37

	TIMSK = 1<<TOIE2; //timer overflow interrupt enable
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	87 bf       	out	0x37, r24	; 55
}
  dc:	08 95       	ret

000000de <portinit>:


/********************************/
void portinit(){
	OUT_1_DIR |=(1<<OUT_1_PIN);
  de:	a0 9a       	sbi	0x14, 0	; 20
	OUT_2_DIR |=(1<<OUT_2_PIN);
  e0:	8c 9a       	sbi	0x11, 4	; 17
}
  e2:	08 95       	ret

000000e4 <__vector_10>:


//**********************
ISR (TIMER2_OVF_vect ){
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
	counter1++;
  f2:	80 91 00 01 	lds	r24, 0x0100
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 00 01 	sts	0x0100, r24
	counter2++;
  fc:	80 91 01 01 	lds	r24, 0x0101
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 01 01 	sts	0x0101, r24

	if (counter1 == OUT_1_delay_sec){
 106:	80 91 00 01 	lds	r24, 0x0100
 10a:	8c 33       	cpi	r24, 0x3C	; 60
 10c:	31 f4       	brne	.+12     	; 0x11a <__vector_10+0x36>
		OUT_1_PORT^=(1<<OUT_1_PIN);
 10e:	85 b3       	in	r24, 0x15	; 21
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	89 27       	eor	r24, r25
 114:	85 bb       	out	0x15, r24	; 21
		//_delay_ms(100);
		counter1 =0;
 116:	10 92 00 01 	sts	0x0100, r1
	}

	if (counter2 == OUT_2_delay_sec){
 11a:	80 91 01 01 	lds	r24, 0x0101
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	31 f4       	brne	.+12     	; 0x12e <__vector_10+0x4a>
		OUT_2_PORT^=(1<<OUT_2_PIN);
 122:	82 b3       	in	r24, 0x12	; 18
 124:	90 e1       	ldi	r25, 0x10	; 16
 126:	89 27       	eor	r24, r25
 128:	82 bb       	out	0x12, r24	; 18
		//_delay_ms(100);
		counter2 =0;
 12a:	10 92 01 01 	sts	0x0101, r1
	}
}
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <main>:
 //portinit();
 //DDRB=0b00000010; // The DDRXn bit must be ‘1’
 //PORTB=0b00000010;
// initTimr2();
// sei();
 DDRB=0b00000010; // The DDRXn bit must be ‘1’
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	87 bb       	out	0x17, r24	; 23
 PORTB=0b00000010;
 140:	88 bb       	out	0x18, r24	; 24

 while(1){


 PORTB=0b00000010;
 142:	62 e0       	ldi	r22, 0x02	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 144:	4a ef       	ldi	r20, 0xFA	; 250
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	28 ea       	ldi	r18, 0xA8	; 168
 14a:	31 e6       	ldi	r19, 0x61	; 97
 14c:	68 bb       	out	0x18, r22	; 24
 14e:	ca 01       	movw	r24, r20
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x14>
 _delay_ms(1);
  PORTB=0b00000000;
 154:	18 ba       	out	0x18, r1	; 24
 156:	c9 01       	movw	r24, r18
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x1c>
 15c:	f7 cf       	rjmp	.-18     	; 0x14c <main+0x10>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
