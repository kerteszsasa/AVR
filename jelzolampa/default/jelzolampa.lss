
jelzolampa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000026c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000047  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000051a  00000000  00000000  000002d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000019b  00000000  00000000  000007ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000030d  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000c98  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000103  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003a3  00000000  00000000  00000deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  0000118e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a2 36       	cpi	r26, 0x62	; 98
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	27 d0       	rcall	.+78     	; 0x8a <main>
  3c:	db c0       	rjmp	.+438    	; 0x1f4 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <delay>:

int state=0;


//*******************************************
void delay(int time){
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  44:	44 ef       	ldi	r20, 0xF4	; 244
  46:	51 e0       	ldi	r21, 0x01	; 1
  48:	05 c0       	rjmp	.+10     	; 0x54 <delay+0x14>
  4a:	fa 01       	movw	r30, r20
  4c:	31 97       	sbiw	r30, 0x01	; 1
  4e:	f1 f7       	brne	.-4      	; 0x4c <delay+0xc>
	for(int i=0;i<time;i++){
  50:	2f 5f       	subi	r18, 0xFF	; 255
  52:	3f 4f       	sbci	r19, 0xFF	; 255
  54:	28 17       	cp	r18, r24
  56:	39 07       	cpc	r19, r25
  58:	c4 f3       	brlt	.-16     	; 0x4a <delay+0xa>
		_delay_us(250);
	}
}
  5a:	08 95       	ret

0000005c <AD_init>:

//*******************************************
void AD_init(){
	    DIDR0 = (1<<ADC1D);
  5c:	84 e0       	ldi	r24, 0x04	; 4
  5e:	84 bb       	out	0x14, r24	; 20
    ADMUX = (0<<REFS1)
  60:	17 b8       	out	0x07, r1	; 7
          | (0<<REFS0)    //Vcc mint referencia
          | (0<<ADLAR);
    ADCSRA = (1<<ADEN)    //adc enable
  62:	80 e8       	ldi	r24, 0x80	; 128
  64:	86 b9       	out	0x06, r24	; 6
           | (0<<ADPS2)
           | (0<<ADPS1)
           | (0<<ADPS0); //elõosztó 128as
    ADCSRB = 0x00;
  66:	13 b8       	out	0x03, r1	; 3
}
  68:	08 95       	ret

0000006a <ReadADC>:

//********************************************
uint16_t ReadADC(uint8_t channel) {
 
 
    ADMUX = (ADMUX & 0b11110000) | channel;    //csat. kiválaszt
  6a:	97 b1       	in	r25, 0x07	; 7
  6c:	90 7f       	andi	r25, 0xF0	; 240
  6e:	98 2b       	or	r25, r24
  70:	97 b9       	out	0x07, r25	; 7
    ADCSRA |= (1<<ADSC);    //start
  72:	36 9a       	sbi	0x06, 6	; 6
    while(ADCSRA & (1<<ADSC));//várok amíg átalakít
  74:	36 99       	sbic	0x06, 6	; 6
  76:	fe cf       	rjmp	.-4      	; 0x74 <ReadADC+0xa>
    return (ADCL | (ADCH<<8));//adc kiolvasás
  78:	24 b1       	in	r18, 0x04	; 4
  7a:	45 b1       	in	r20, 0x05	; 5
  7c:	94 2f       	mov	r25, r20
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	28 2b       	or	r18, r24
  84:	39 2b       	or	r19, r25
}
  86:	c9 01       	movw	r24, r18
  88:	08 95       	ret

0000008a <main>:

//********************************************
int main()
{
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
	//set pin directions
	DDRB=0b00000111;
  8e:	87 e0       	ldi	r24, 0x07	; 7
  90:	87 bb       	out	0x17, r24	; 23
	}
}

//*******************************************
void AD_init(){
	    DIDR0 = (1<<ADC1D);
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	84 bb       	out	0x14, r24	; 20
    ADMUX = (0<<REFS1)
  96:	17 b8       	out	0x07, r1	; 7
          | (0<<REFS0)    //Vcc mint referencia
          | (0<<ADLAR);
    ADCSRA = (1<<ADEN)    //adc enable
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	86 b9       	out	0x06, r24	; 6
           | (0<<ADPS2)
           | (0<<ADPS1)
           | (0<<ADPS0); //elõosztó 128as
    ADCSRB = 0x00;
  9c:	13 b8       	out	0x03, r1	; 3
  9e:	c4 ef       	ldi	r28, 0xF4	; 244
  a0:	d1 e0       	ldi	r29, 0x01	; 1
	DDRB=0b00000111;
	AD_init();

    while(1){
		//normál mûködés
		if(PINB & 0b00010000){
  a2:	b4 9b       	sbis	0x16, 4	; 22
  a4:	72 c0       	rjmp	.+228    	; 0x18a <__stack+0x2b>
			switch (state) {
  a6:	80 91 60 00 	lds	r24, 0x0060
  aa:	90 91 61 00 	lds	r25, 0x0061
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	91 05       	cpc	r25, r1
  b2:	01 f1       	breq	.+64     	; 0xf4 <main+0x6a>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	91 05       	cpc	r25, r1
  b8:	1c f4       	brge	.+6      	; 0xc0 <main+0x36>
  ba:	89 2b       	or	r24, r25
  bc:	39 f0       	breq	.+14     	; 0xcc <main+0x42>
  be:	f1 cf       	rjmp	.-30     	; 0xa2 <main+0x18>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	91 05       	cpc	r25, r1
  c4:	61 f1       	breq	.+88     	; 0x11e <main+0x94>
  c6:	03 97       	sbiw	r24, 0x03	; 3
  c8:	61 f7       	brne	.-40     	; 0xa2 <main+0x18>
  ca:	46 c0       	rjmp	.+140    	; 0x158 <main+0xce>

			    case 0:{	//P
					r_on();
  cc:	c2 9a       	sbi	0x18, 2	; 24
					y_off();
  ce:	c1 98       	cbi	0x18, 1	; 24
					g_off();
  d0:	c0 98       	cbi	0x18, 0	; 24
					delay(30*ReadADC(3));
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	ca df       	rcall	.-108    	; 0x6a <ReadADC>
  d6:	6e e1       	ldi	r22, 0x1E	; 30
  d8:	70 e0       	ldi	r23, 0x00	; 0
  da:	7a d0       	rcall	.+244    	; 0x1d0 <__mulhi3>
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	05 c0       	rjmp	.+10     	; 0xec <main+0x62>
  e2:	fe 01       	movw	r30, r28
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x5a>
int state=0;


//*******************************************
void delay(int time){
	for(int i=0;i<time;i++){
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	28 17       	cp	r18, r24
  ee:	39 07       	cpc	r19, r25
  f0:	c4 f3       	brlt	.-16     	; 0xe2 <main+0x58>
  f2:	28 c0       	rjmp	.+80     	; 0x144 <main+0xba>
					delay(30*ReadADC(3));
					state++;
					break;
				}
			    case 1:{	//PS
					r_on();
  f4:	c2 9a       	sbi	0x18, 2	; 24
					y_on();
  f6:	c1 9a       	sbi	0x18, 1	; 24
					g_off();
  f8:	c0 98       	cbi	0x18, 0	; 24
					delay(4*ReadADC(3));
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	b6 df       	rcall	.-148    	; 0x6a <ReadADC>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	05 c0       	rjmp	.+10     	; 0x116 <main+0x8c>
 10c:	fe 01       	movw	r30, r28
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x84>
int state=0;


//*******************************************
void delay(int time){
	for(int i=0;i<time;i++){
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	28 17       	cp	r18, r24
 118:	39 07       	cpc	r19, r25
 11a:	c4 f3       	brlt	.-16     	; 0x10c <main+0x82>
 11c:	13 c0       	rjmp	.+38     	; 0x144 <main+0xba>
					delay(4*ReadADC(3));
					state++;
					break;
				}
				case 2:{	//Z
					r_off();
 11e:	c2 98       	cbi	0x18, 2	; 24
					y_off();
 120:	c1 98       	cbi	0x18, 1	; 24
					g_on();
 122:	c0 9a       	sbi	0x18, 0	; 24
					delay(30*ReadADC(3));
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	a1 df       	rcall	.-190    	; 0x6a <ReadADC>
 128:	6e e1       	ldi	r22, 0x1E	; 30
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	51 d0       	rcall	.+162    	; 0x1d0 <__mulhi3>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	05 c0       	rjmp	.+10     	; 0x13e <main+0xb4>
 134:	fe 01       	movw	r30, r28
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <main+0xac>
int state=0;


//*******************************************
void delay(int time){
	for(int i=0;i<time;i++){
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	28 17       	cp	r18, r24
 140:	39 07       	cpc	r19, r25
 142:	c4 f3       	brlt	.-16     	; 0x134 <main+0xaa>
				case 2:{	//Z
					r_off();
					y_off();
					g_on();
					delay(30*ReadADC(3));
					state++;
 144:	80 91 60 00 	lds	r24, 0x0060
 148:	90 91 61 00 	lds	r25, 0x0061
 14c:	01 96       	adiw	r24, 0x01	; 1
 14e:	90 93 61 00 	sts	0x0061, r25
 152:	80 93 60 00 	sts	0x0060, r24
 156:	a5 cf       	rjmp	.-182    	; 0xa2 <main+0x18>
					break;
				}
				case 3:{	//s
					r_off();
 158:	c2 98       	cbi	0x18, 2	; 24
					y_on();
 15a:	c1 9a       	sbi	0x18, 1	; 24
					g_off();
 15c:	c0 98       	cbi	0x18, 0	; 24
					delay(4*ReadADC(3));
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	84 df       	rcall	.-248    	; 0x6a <ReadADC>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	05 c0       	rjmp	.+10     	; 0x17a <__stack+0x1b>
 170:	fe 01       	movw	r30, r28
 172:	31 97       	sbiw	r30, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <__stack+0x13>
int state=0;


//*******************************************
void delay(int time){
	for(int i=0;i<time;i++){
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	28 17       	cp	r18, r24
 17c:	39 07       	cpc	r19, r25
 17e:	c4 f3       	brlt	.-16     	; 0x170 <__stack+0x11>
				case 3:{	//s
					r_off();
					y_on();
					g_off();
					delay(4*ReadADC(3));
					state = 0;
 180:	10 92 61 00 	sts	0x0061, r1
 184:	10 92 60 00 	sts	0x0060, r1
 188:	8c cf       	rjmp	.-232    	; 0xa2 <main+0x18>
				}
			}
		}
		//sarga villog
		else{
			state =0;
 18a:	10 92 61 00 	sts	0x0061, r1
 18e:	10 92 60 00 	sts	0x0060, r1
			r_off();
 192:	c2 98       	cbi	0x18, 2	; 24
			g_off();
 194:	c0 98       	cbi	0x18, 0	; 24
			y_off();
 196:	c1 98       	cbi	0x18, 1	; 24
			delay(1*ReadADC(3));
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	67 df       	rcall	.-306    	; 0x6a <ReadADC>
 19c:	9c 01       	movw	r18, r24
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <__stack+0x4d>
 1a4:	fe 01       	movw	r30, r28
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <__stack+0x47>
int state=0;


//*******************************************
void delay(int time){
	for(int i=0;i<time;i++){
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	82 17       	cp	r24, r18
 1ae:	93 07       	cpc	r25, r19
 1b0:	cc f3       	brlt	.-14     	; 0x1a4 <__stack+0x45>
			r_off();
			g_off();
			y_off();
			delay(1*ReadADC(3));

			y_on();
 1b2:	c1 9a       	sbi	0x18, 1	; 24
			delay(1*ReadADC(3));
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	59 df       	rcall	.-334    	; 0x6a <ReadADC>
 1b8:	9c 01       	movw	r18, r24
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <__stack+0x69>
 1c0:	fe 01       	movw	r30, r28
 1c2:	31 97       	sbiw	r30, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <__stack+0x63>
int state=0;


//*******************************************
void delay(int time){
	for(int i=0;i<time;i++){
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	82 17       	cp	r24, r18
 1ca:	93 07       	cpc	r25, r19
 1cc:	cc f3       	brlt	.-14     	; 0x1c0 <__stack+0x61>
 1ce:	69 cf       	rjmp	.-302    	; 0xa2 <main+0x18>

000001d0 <__mulhi3>:
 1d0:	55 27       	eor	r21, r21
 1d2:	00 24       	eor	r0, r0

000001d4 <__mulhi3_loop>:
 1d4:	80 ff       	sbrs	r24, 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <__mulhi3_skip1>
 1d8:	06 0e       	add	r0, r22
 1da:	57 1f       	adc	r21, r23

000001dc <__mulhi3_skip1>:
 1dc:	66 0f       	add	r22, r22
 1de:	77 1f       	adc	r23, r23
 1e0:	61 15       	cp	r22, r1
 1e2:	71 05       	cpc	r23, r1
 1e4:	21 f0       	breq	.+8      	; 0x1ee <__mulhi3_exit>
 1e6:	96 95       	lsr	r25
 1e8:	87 95       	ror	r24
 1ea:	00 97       	sbiw	r24, 0x00	; 0
 1ec:	99 f7       	brne	.-26     	; 0x1d4 <__mulhi3_loop>

000001ee <__mulhi3_exit>:
 1ee:	95 2f       	mov	r25, r21
 1f0:	80 2d       	mov	r24, r0
 1f2:	08 95       	ret

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
