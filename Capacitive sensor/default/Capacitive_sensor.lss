
Capacitive_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001ee  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  0000028e  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000a9  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003cb  00000000  00000000  00000377  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f2  00000000  00000000  00000742  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031b  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00000c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000147  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000108  00000000  00000000  00000e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00000f3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee ee       	ldi	r30, 0xEE	; 238
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 36       	cpi	r26, 0x6E	; 110
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	2a d0       	rcall	.+84     	; 0xae <main>
  5a:	c7 c0       	rjmp	.+398    	; 0x1ea <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <getdatafromio5>:
int timer=0;
int getdatafromio5(void)
{

	int data = 0;
	DDRC|=32;
  5e:	a5 9a       	sbi	0x14, 5	; 20
	PORTC|=32;
  60:	ad 9a       	sbi	0x15, 5	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  62:	88 e0       	ldi	r24, 0x08	; 8
  64:	97 e0       	ldi	r25, 0x07	; 7
  66:	01 97       	sbiw	r24, 0x01	; 1
  68:	f1 f7       	brne	.-4      	; 0x66 <getdatafromio5+0x8>
	//_delay_ms(1);
	_delay_us(900);
	DDRC&=!32;
  6a:	84 b3       	in	r24, 0x14	; 20
  6c:	14 ba       	out	0x14, r1	; 20
	PORTC&=!32;
  6e:	85 b3       	in	r24, 0x15	; 21
  70:	15 ba       	out	0x15, r1	; 21
		PORTB=2;
  72:	82 e0       	ldi	r24, 0x02	; 2
  74:	88 bb       	out	0x18, r24	; 24
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	02 c0       	rjmp	.+4      	; 0x80 <getdatafromio5+0x22>
	while(PINC&32)
	{
	//	_delay_us(1);
		data++;
  7c:	2f 5f       	subi	r18, 0xFF	; 255
  7e:	3f 4f       	sbci	r19, 0xFF	; 255
	//_delay_ms(1);
	_delay_us(900);
	DDRC&=!32;
	PORTC&=!32;
		PORTB=2;
	while(PINC&32)
  80:	9d 99       	sbic	0x13, 5	; 19
  82:	fc cf       	rjmp	.-8      	; 0x7c <getdatafromio5+0x1e>
	{
	//	_delay_us(1);
		data++;
	}
	PORTB=0;
  84:	18 ba       	out	0x18, r1	; 24
	return data;
}
  86:	c9 01       	movw	r24, r18
  88:	08 95       	ret

0000008a <getdatafromio4>:

int getdatafromio4(void)
{
	int data = 0;
	DDRC=16;
  8a:	80 e1       	ldi	r24, 0x10	; 16
  8c:	84 bb       	out	0x14, r24	; 20
	PORTC=16;
  8e:	85 bb       	out	0x15, r24	; 21
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	9c e9       	ldi	r25, 0x9C	; 156
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <getdatafromio4+0xa>
	_delay_ms(20);
	DDRC=0;
  98:	14 ba       	out	0x14, r1	; 20
	PORTC=0;
  9a:	15 ba       	out	0x15, r1	; 21
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <getdatafromio4+0x1c>
	while(PINC&16)
	{
	//	_delay_us(1);
		data++;
  a2:	2f 5f       	subi	r18, 0xFF	; 255
  a4:	3f 4f       	sbci	r19, 0xFF	; 255
	DDRC=16;
	PORTC=16;
	_delay_ms(20);
	DDRC=0;
	PORTC=0;
	while(PINC&16)
  a6:	9c 99       	sbic	0x13, 4	; 19
  a8:	fc cf       	rjmp	.-8      	; 0xa2 <getdatafromio4+0x18>
	{
	//	_delay_us(1);
		data++;
	}
	return data;
}
  aa:	c9 01       	movw	r24, r18
  ac:	08 95       	ret

000000ae <main>:




int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29

DDRB=255;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	87 bb       	out	0x17, r24	; 23
DDRC=255;
  b6:	84 bb       	out	0x14, r24	; 20


	USART_Init ( MYUBRR );
  b8:	83 e3       	ldi	r24, 0x33	; 51
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	1a d0       	rcall	.+52     	; 0xf2 <USART_Init>
	putstring("HELLO");
  be:	80 e6       	ldi	r24, 0x60	; 96
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	26 d0       	rcall	.+76     	; 0x110 <putstring>
	USART_Transmit(  '\n' );
  c4:	8a e0       	ldi	r24, 0x0A	; 10
  c6:	1c d0       	rcall	.+56     	; 0x100 <USART_Transmit>
	USART_Transmit(  '\r' );
  c8:	8d e0       	ldi	r24, 0x0D	; 13
  ca:	1a d0       	rcall	.+52     	; 0x100 <USART_Transmit>
  cc:	c8 ec       	ldi	r28, 0xC8	; 200
  ce:	d0 e0       	ldi	r29, 0x00	; 0


	while(1)
	{

	putnum(getdatafromio5());
  d0:	c6 df       	rcall	.-116    	; 0x5e <getdatafromio5>
  d2:	28 d0       	rcall	.+80     	; 0x124 <putnum>
	putstring("    ");
  d4:	86 e6       	ldi	r24, 0x66	; 102
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	1b d0       	rcall	.+54     	; 0x110 <putstring>
	//	_delay_ms(200);
//	putnum(getdatafromio4());
	USART_Transmit(  '\n' );
  da:	8a e0       	ldi	r24, 0x0A	; 10
  dc:	11 d0       	rcall	.+34     	; 0x100 <USART_Transmit>
	USART_Transmit(  '\r' );
  de:	8d e0       	ldi	r24, 0x0D	; 13
  e0:	0f d0       	rcall	.+30     	; 0x100 <USART_Transmit>
  e2:	80 ed       	ldi	r24, 0xD0	; 208
  e4:	97 e0       	ldi	r25, 0x07	; 7
  e6:	fe 01       	movw	r30, r28
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x3a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x38>
  f0:	ef cf       	rjmp	.-34     	; 0xd0 <main+0x22>

000000f2 <USART_Init>:

//*******uart_init******************************************************
void USART_Init( unsigned int ubrr)
{
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
  f2:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
  f4:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN)| (1 << RXCIE) ;
  f6:	88 e9       	ldi	r24, 0x98	; 152
  f8:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  fa:	86 e8       	ldi	r24, 0x86	; 134
  fc:	80 bd       	out	0x20, r24	; 32
}
  fe:	08 95       	ret

00000100 <USART_Transmit>:

//********uart_transmit************************
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
 100:	5d 9b       	sbis	0x0b, 5	; 11
 102:	fe cf       	rjmp	.-4      	; 0x100 <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR = data;
 104:	8c b9       	out	0x0c, r24	; 12
}
 106:	08 95       	ret

00000108 <UART_Receive>:

//**********uart_receive**********************************************
char UART_Receive() // Ez a fuggveny a beerkezo adatokat kiolvassa az UDR regiszter bejovo pufferebol
{
  while(!(UCSRA & (1<<RXC)))  // Varakozas amig nincs uj bejovo adat
 108:	5f 9b       	sbis	0x0b, 7	; 11
 10a:	fe cf       	rjmp	.-4      	; 0x108 <UART_Receive>
  {
     //  Varakozas
  }
  //Most mar van beerkezett adat, amit kiolvasunk a pufferbol
  return UDR;
 10c:	8c b1       	in	r24, 0x0c	; 12
}
 10e:	08 95       	ret

00000110 <putstring>:



//***********uart_string************************** putstring("hello");
void putstring(const char *ptr)
{
 110:	fc 01       	movw	r30, r24
 112:	04 c0       	rjmp	.+8      	; 0x11c <putstring+0xc>

//********uart_transmit************************
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
 114:	5d 9b       	sbis	0x0b, 5	; 11
 116:	fe cf       	rjmp	.-4      	; 0x114 <putstring+0x4>
//***********uart_string************************** putstring("hello");
void putstring(const char *ptr)
{
	  while(*ptr)
	  {
	   USART_Transmit( *(ptr++));  
 118:	31 96       	adiw	r30, 0x01	; 1
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
	/* Put data into buffer, sends the data */
	UDR = data;
 11a:	8c b9       	out	0x0c, r24	; 12


//***********uart_string************************** putstring("hello");
void putstring(const char *ptr)
{
	  while(*ptr)
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	c9 f7       	brne	.-14     	; 0x114 <putstring+0x4>
	  {
	   USART_Transmit( *(ptr++));  
	  }
}
 122:	08 95       	ret

00000124 <putnum>:

//***********uart_num****************** putnum(1023)
void putnum(unsigned int i)
{
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	df 93       	push	r29
 12a:	cf 93       	push	r28
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	27 97       	sbiw	r28, 0x07	; 7
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
	unsigned char c[7]; 
	itoa(i, c, 10); 
 13c:	8e 01       	movw	r16, r28
 13e:	0f 5f       	subi	r16, 0xFF	; 255
 140:	1f 4f       	sbci	r17, 0xFF	; 255
 142:	b8 01       	movw	r22, r16
 144:	4a e0       	ldi	r20, 0x0A	; 10
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	0d d0       	rcall	.+26     	; 0x164 <itoa>
	putstring(c);
 14a:	c8 01       	movw	r24, r16
 14c:	e1 df       	rcall	.-62     	; 0x110 <putstring>
}
 14e:	27 96       	adiw	r28, 0x07	; 7
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	cf 91       	pop	r28
 15c:	df 91       	pop	r29
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <itoa>:
 164:	fb 01       	movw	r30, r22
 166:	9f 01       	movw	r18, r30
 168:	e8 94       	clt
 16a:	42 30       	cpi	r20, 0x02	; 2
 16c:	bc f0       	brlt	.+46     	; 0x19c <itoa+0x38>
 16e:	45 32       	cpi	r20, 0x25	; 37
 170:	ac f4       	brge	.+42     	; 0x19c <itoa+0x38>
 172:	4a 30       	cpi	r20, 0x0A	; 10
 174:	29 f4       	brne	.+10     	; 0x180 <itoa+0x1c>
 176:	97 fb       	bst	r25, 7
 178:	1e f4       	brtc	.+6      	; 0x180 <itoa+0x1c>
 17a:	90 95       	com	r25
 17c:	81 95       	neg	r24
 17e:	9f 4f       	sbci	r25, 0xFF	; 255
 180:	64 2f       	mov	r22, r20
 182:	77 27       	eor	r23, r23
 184:	1e d0       	rcall	.+60     	; 0x1c2 <__udivmodhi4>
 186:	80 5d       	subi	r24, 0xD0	; 208
 188:	8a 33       	cpi	r24, 0x3A	; 58
 18a:	0c f0       	brlt	.+2      	; 0x18e <itoa+0x2a>
 18c:	89 5d       	subi	r24, 0xD9	; 217
 18e:	81 93       	st	Z+, r24
 190:	cb 01       	movw	r24, r22
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	a9 f7       	brne	.-22     	; 0x180 <itoa+0x1c>
 196:	16 f4       	brtc	.+4      	; 0x19c <itoa+0x38>
 198:	5d e2       	ldi	r21, 0x2D	; 45
 19a:	51 93       	st	Z+, r21
 19c:	10 82       	st	Z, r1
 19e:	c9 01       	movw	r24, r18
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <strrev>

000001a2 <strrev>:
 1a2:	dc 01       	movw	r26, r24
 1a4:	fc 01       	movw	r30, r24
 1a6:	67 2f       	mov	r22, r23
 1a8:	71 91       	ld	r23, Z+
 1aa:	77 23       	and	r23, r23
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <strrev+0x4>
 1ae:	32 97       	sbiw	r30, 0x02	; 2
 1b0:	04 c0       	rjmp	.+8      	; 0x1ba <strrev+0x18>
 1b2:	7c 91       	ld	r23, X
 1b4:	6d 93       	st	X+, r22
 1b6:	70 83       	st	Z, r23
 1b8:	62 91       	ld	r22, -Z
 1ba:	ae 17       	cp	r26, r30
 1bc:	bf 07       	cpc	r27, r31
 1be:	c8 f3       	brcs	.-14     	; 0x1b2 <strrev+0x10>
 1c0:	08 95       	ret

000001c2 <__udivmodhi4>:
 1c2:	aa 1b       	sub	r26, r26
 1c4:	bb 1b       	sub	r27, r27
 1c6:	51 e1       	ldi	r21, 0x11	; 17
 1c8:	07 c0       	rjmp	.+14     	; 0x1d8 <__udivmodhi4_ep>

000001ca <__udivmodhi4_loop>:
 1ca:	aa 1f       	adc	r26, r26
 1cc:	bb 1f       	adc	r27, r27
 1ce:	a6 17       	cp	r26, r22
 1d0:	b7 07       	cpc	r27, r23
 1d2:	10 f0       	brcs	.+4      	; 0x1d8 <__udivmodhi4_ep>
 1d4:	a6 1b       	sub	r26, r22
 1d6:	b7 0b       	sbc	r27, r23

000001d8 <__udivmodhi4_ep>:
 1d8:	88 1f       	adc	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	5a 95       	dec	r21
 1de:	a9 f7       	brne	.-22     	; 0x1ca <__udivmodhi4_loop>
 1e0:	80 95       	com	r24
 1e2:	90 95       	com	r25
 1e4:	bc 01       	movw	r22, r24
 1e6:	cd 01       	movw	r24, r26
 1e8:	08 95       	ret

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
