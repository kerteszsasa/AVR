
servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000210  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800102  00800102  000002a6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000009d  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000412  00000000  00000000  00000363  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000196  00000000  00000000  00000775  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000321  00000000  00000000  0000090b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00000c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000135  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  00000dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00000e7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_16>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a2 e0       	ldi	r26, 0x02	; 2
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	ab 30       	cpi	r26, 0x0B	; 11
  c0:	b1 07       	cpc	r27, r17
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  c8:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <Beolvas8bitADC>:
//***************************************************
unsigned char Beolvas8bitADC(unsigned char csatorna)
   
      {
  
      ADMUX = (ADMUX & 0b11110000) | csatorna;   // ADC csatorna kivalasztasa
  d0:	97 b1       	in	r25, 0x07	; 7
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	98 2b       	or	r25, r24
  d6:	97 b9       	out	0x07, r25	; 7
      ADCSRA |= (1<<ADSC);    // ADC konverzio elinditasa
  d8:	36 9a       	sbi	0x06, 6	; 6
      while (ADCSRA & (1<<ADSC));    // varas az atalakitasra
  da:	36 99       	sbic	0x06, 6	; 6
  dc:	fe cf       	rjmp	.-4      	; 0xda <Beolvas8bitADC+0xa>
      ADCSRA |= (1<<ADSC);         // konverzió elindítás
  de:	36 9a       	sbi	0x06, 6	; 6
      while (ADCSRA & (1<<ADSC));    // varas az atalakitasra
  e0:	36 99       	sbic	0x06, 6	; 6
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <Beolvas8bitADC+0x10>
      return (ADCH);     // ADC ertek visszaadasa (csak a felso 8 bit (ADCH), az also 2 zajos bit elhagyasa)
  e4:	85 b1       	in	r24, 0x05	; 5
  
      }
  e6:	08 95       	ret

000000e8 <InitADC>:

//*********************************************
void InitADC(void)
{
ADMUX |= (1<<REFS0)|(1<<ADLAR);  
  e8:	87 b1       	in	r24, 0x07	; 7
  ea:	80 66       	ori	r24, 0x60	; 96
  ec:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
  ee:	83 e8       	ldi	r24, 0x83	; 131
  f0:	86 b9       	out	0x06, r24	; 6
}
  f2:	08 95       	ret

000000f4 <InitTIMER>:


void InitTIMER(void)
{
TCCR0=1<<CS01|1<<CS00;	//órajel 64-es elõosztás
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	83 bf       	out	0x33, r24	; 51
TIMSK=1<<TOIE0;	//timer enable
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	87 bf       	out	0x37, r24	; 55
}
  fc:	08 95       	ret

000000fe <__vector_16>:



//**************************************
ISR(TIMER0_OVF_vect){
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
timer++;
 10e:	80 91 02 01 	lds	r24, 0x0102
 112:	90 91 03 01 	lds	r25, 0x0103
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	90 93 03 01 	sts	0x0103, r25
 11c:	80 93 02 01 	sts	0x0102, r24
if(timer==450){timer=0; sec++;}
 120:	80 91 02 01 	lds	r24, 0x0102
 124:	90 91 03 01 	lds	r25, 0x0103
 128:	82 5c       	subi	r24, 0xC2	; 194
 12a:	91 40       	sbci	r25, 0x01	; 1
 12c:	49 f4       	brne	.+18     	; 0x140 <__vector_16+0x42>
 12e:	10 92 03 01 	sts	0x0103, r1
 132:	10 92 02 01 	sts	0x0102, r1
 136:	80 91 04 01 	lds	r24, 0x0104
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	80 93 04 01 	sts	0x0104, r24

//7372800/64/256/450=1s !!!
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <delay>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 150:	21 e2       	ldi	r18, 0x21	; 33
 152:	04 c0       	rjmp	.+8      	; 0x15c <delay+0xc>
 154:	92 2f       	mov	r25, r18
 156:	9a 95       	dec	r25
 158:	f1 f7       	brne	.-4      	; 0x156 <delay+0x6>
void delay(unsigned char time)
{
while(time)
	{
	_delay_us(100);
	time--;
 15a:	81 50       	subi	r24, 0x01	; 1



void delay(unsigned char time)
{
while(time)
 15c:	88 23       	and	r24, r24
 15e:	d1 f7       	brne	.-12     	; 0x154 <delay+0x4>
	{
	_delay_us(100);
	time--;
	}
}
 160:	08 95       	ret

00000162 <main>:
}


void InitTIMER(void)
{
TCCR0=1<<CS01|1<<CS00;	//órajel 64-es elõosztás
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	83 bf       	out	0x33, r24	; 51
TIMSK=1<<TOIE0;	//timer enable
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	87 bf       	out	0x37, r24	; 55
      }

//*********************************************
void InitADC(void)
{
ADMUX |= (1<<REFS0)|(1<<ADLAR);  
 16a:	87 b1       	in	r24, 0x07	; 7
 16c:	80 66       	ori	r24, 0x60	; 96
 16e:	87 b9       	out	0x07, r24	; 7
ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
 170:	83 e8       	ldi	r24, 0x83	; 131
 172:	86 b9       	out	0x06, r24	; 6
		

	}
	*/

DDRD=15;
 174:	8f e0       	ldi	r24, 0x0F	; 15
 176:	81 bb       	out	0x11, r24	; 17
 178:	20 91 05 01 	lds	r18, 0x0105
			delay(a);
		}

		if(allapot==3)
		{
			PORTD=0b00000101;
 17c:	75 e0       	ldi	r23, 0x05	; 5
 17e:	31 e2       	ldi	r19, 0x21	; 33
			delay(a);
		}

		if(allapot==2)
		{
			PORTD=0b00000110;
 180:	66 e0       	ldi	r22, 0x06	; 6
			delay(a);
		}

		if(allapot==1)
		{
			PORTD=0b00001010;
 182:	5a e0       	ldi	r21, 0x0A	; 10
		//if(PIND&32)allapot--;
		

		if(allapot==0)
		{
			PORTD=0b00001001;
 184:	49 e0       	ldi	r20, 0x09	; 9
//***************************************************
unsigned char Beolvas8bitADC(unsigned char csatorna)
   
      {
  
      ADMUX = (ADMUX & 0b11110000) | csatorna;   // ADC csatorna kivalasztasa
 186:	87 b1       	in	r24, 0x07	; 7
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	85 60       	ori	r24, 0x05	; 5
 18c:	87 b9       	out	0x07, r24	; 7
      ADCSRA |= (1<<ADSC);    // ADC konverzio elinditasa
 18e:	36 9a       	sbi	0x06, 6	; 6
      while (ADCSRA & (1<<ADSC));    // varas az atalakitasra
 190:	36 99       	sbic	0x06, 6	; 6
 192:	fe cf       	rjmp	.-4      	; 0x190 <main+0x2e>
      ADCSRA |= (1<<ADSC);         // konverzió elindítás
 194:	36 9a       	sbi	0x06, 6	; 6
      while (ADCSRA & (1<<ADSC));    // varas az atalakitasra
 196:	36 99       	sbic	0x06, 6	; 6
 198:	fe cf       	rjmp	.-4      	; 0x196 <main+0x34>
      return (ADCH);     // ADC ertek visszaadasa (csak a felso 8 bit (ADCH), az also 2 zajos bit elhagyasa)
 19a:	95 b1       	in	r25, 0x05	; 5
		
		//if(PIND&16)allapot++;
		//if(PIND&32)allapot--;
		

		if(allapot==0)
 19c:	22 23       	and	r18, r18
 19e:	49 f4       	brne	.+18     	; 0x1b2 <main+0x50>
		{
			PORTD=0b00001001;
 1a0:	42 bb       	out	0x12, r20	; 18
 1a2:	04 c0       	rjmp	.+8      	; 0x1ac <main+0x4a>
 1a4:	83 2f       	mov	r24, r19
 1a6:	8a 95       	dec	r24
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x44>
void delay(unsigned char time)
{
while(time)
	{
	_delay_us(100);
	time--;
 1aa:	91 50       	subi	r25, 0x01	; 1



void delay(unsigned char time)
{
while(time)
 1ac:	99 23       	and	r25, r25
 1ae:	d1 f7       	brne	.-12     	; 0x1a4 <main+0x42>
 1b0:	20 c0       	rjmp	.+64     	; 0x1f2 <main+0x90>
		{
			PORTD=0b00001001;
			delay(a);
		}

		if(allapot==1)
 1b2:	21 30       	cpi	r18, 0x01	; 1
 1b4:	49 f4       	brne	.+18     	; 0x1c8 <main+0x66>
		{
			PORTD=0b00001010;
 1b6:	52 bb       	out	0x12, r21	; 18
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <main+0x60>
 1ba:	83 2f       	mov	r24, r19
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x5a>
void delay(unsigned char time)
{
while(time)
	{
	_delay_us(100);
	time--;
 1c0:	91 50       	subi	r25, 0x01	; 1



void delay(unsigned char time)
{
while(time)
 1c2:	99 23       	and	r25, r25
 1c4:	d1 f7       	brne	.-12     	; 0x1ba <main+0x58>
 1c6:	15 c0       	rjmp	.+42     	; 0x1f2 <main+0x90>
		{
			PORTD=0b00001010;
			delay(a);
		}

		if(allapot==2)
 1c8:	22 30       	cpi	r18, 0x02	; 2
 1ca:	49 f4       	brne	.+18     	; 0x1de <main+0x7c>
		{
			PORTD=0b00000110;
 1cc:	62 bb       	out	0x12, r22	; 18
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <main+0x76>
 1d0:	83 2f       	mov	r24, r19
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x70>
void delay(unsigned char time)
{
while(time)
	{
	_delay_us(100);
	time--;
 1d6:	91 50       	subi	r25, 0x01	; 1



void delay(unsigned char time)
{
while(time)
 1d8:	99 23       	and	r25, r25
 1da:	d1 f7       	brne	.-12     	; 0x1d0 <main+0x6e>
 1dc:	0a c0       	rjmp	.+20     	; 0x1f2 <main+0x90>
		{
			PORTD=0b00000110;
			delay(a);
		}

		if(allapot==3)
 1de:	23 30       	cpi	r18, 0x03	; 3
 1e0:	41 f4       	brne	.+16     	; 0x1f2 <main+0x90>
		{
			PORTD=0b00000101;
 1e2:	72 bb       	out	0x12, r23	; 18
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <main+0x8c>
 1e6:	83 2f       	mov	r24, r19
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0x86>
void delay(unsigned char time)
{
while(time)
	{
	_delay_us(100);
	time--;
 1ec:	91 50       	subi	r25, 0x01	; 1



void delay(unsigned char time)
{
while(time)
 1ee:	99 23       	and	r25, r25
 1f0:	d1 f7       	brne	.-12     	; 0x1e6 <main+0x84>
		{
			PORTD=0b00000101;
			delay(a);
		}
		
		if( (~PIND)&16)allapot++;	
 1f2:	84 9b       	sbis	0x10, 4	; 16
 1f4:	2f 5f       	subi	r18, 0xFF	; 255
		if( (~PIND)&32)allapot--;
 1f6:	85 9b       	sbis	0x10, 5	; 16
 1f8:	21 50       	subi	r18, 0x01	; 1

		if(allapot==4) allapot=0;
 1fa:	24 30       	cpi	r18, 0x04	; 4
 1fc:	11 f4       	brne	.+4      	; 0x202 <main+0xa0>
 1fe:	20 e0       	ldi	r18, 0x00	; 0
 200:	c2 cf       	rjmp	.-124    	; 0x186 <main+0x24>
		if(allapot==255) allapot=3;
 202:	2f 3f       	cpi	r18, 0xFF	; 255
 204:	09 f0       	breq	.+2      	; 0x208 <main+0xa6>
 206:	bf cf       	rjmp	.-130    	; 0x186 <main+0x24>
 208:	23 e0       	ldi	r18, 0x03	; 3
 20a:	bd cf       	rjmp	.-134    	; 0x186 <main+0x24>

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
