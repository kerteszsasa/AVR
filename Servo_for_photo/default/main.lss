
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000029  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000023e  00000000  00000000  00000129  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ff  00000000  00000000  00000367  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000171  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e8  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000023  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	1e d0       	rcall	.+60     	; 0x5a <main>
  1e:	34 c0       	rjmp	.+104    	; 0x88 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <set_servo>:
#include <avr/io.h>
#include <util/delay.h>
//this include is in your 


void set_servo(char position){
  22:	8b 30       	cpi	r24, 0x0B	; 11
  24:	08 f0       	brcs	.+2      	; 0x28 <set_servo+0x6>
  26:	8a e0       	ldi	r24, 0x0A	; 10

if( position > 10) position = 10;

PORTB |=(1<<4);		//on
  28:	c4 9a       	sbi	0x18, 4	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  2a:	e0 eb       	ldi	r30, 0xB0	; 176
  2c:	f4 e0       	ldi	r31, 0x04	; 4
  2e:	31 97       	sbiw	r30, 0x01	; 1
  30:	f1 f7       	brne	.-4      	; 0x2e <set_servo+0xc>
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	30 e0       	ldi	r19, 0x00	; 0
_delay_ms(1);
int i=0;
for(i=0;i<position;i++)
  36:	48 2f       	mov	r20, r24
  38:	50 e0       	ldi	r21, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  3a:	80 ea       	ldi	r24, 0xA0	; 160
  3c:	05 c0       	rjmp	.+10     	; 0x48 <__SREG__+0x9>
  3e:	98 2f       	mov	r25, r24
  40:	9a 95       	dec	r25
  42:	f1 f7       	brne	.-4      	; 0x40 <__SREG__+0x1>
  44:	2f 5f       	subi	r18, 0xFF	; 255
  46:	3f 4f       	sbci	r19, 0xFF	; 255
  48:	24 17       	cp	r18, r20
  4a:	35 07       	cpc	r19, r21
  4c:	c4 f3       	brlt	.-16     	; 0x3e <__SP_H__>
_delay_us(100);

PORTB &= ~(1 << 4);		//off
  4e:	c4 98       	cbi	0x18, 4	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  50:	80 e6       	ldi	r24, 0x60	; 96
  52:	94 e5       	ldi	r25, 0x54	; 84
  54:	01 97       	sbiw	r24, 0x01	; 1
  56:	f1 f7       	brne	.-4      	; 0x54 <__SREG__+0x15>
_delay_ms(18);
//_delay_us(900);

}
  58:	08 95       	ret

0000005a <main>:




int main (void)
{
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
	//Set PORTC to all outputs
	DDRB = 0xFF;
  5e:	8f ef       	ldi	r24, 0xFF	; 255
  60:	87 bb       	out	0x17, r24	; 23
  62:	0f c0       	rjmp	.+30     	; 0x82 <main+0x28>
	//create an infinite loop
	while(1) {
		int j=0;

		for(j=0;j<15*50;j++){
			set_servo(9);
  64:	89 e0       	ldi	r24, 0x09	; 9
  66:	dd df       	rcall	.-70     	; 0x22 <set_servo>
	DDRB = 0xFF;
	//create an infinite loop
	while(1) {
		int j=0;

		for(j=0;j<15*50;j++){
  68:	21 96       	adiw	r28, 0x01	; 1
  6a:	82 e0       	ldi	r24, 0x02	; 2
  6c:	ce 3e       	cpi	r28, 0xEE	; 238
  6e:	d8 07       	cpc	r29, r24
  70:	cc f3       	brlt	.-14     	; 0x64 <main+0xa>
  72:	c0 e0       	ldi	r28, 0x00	; 0
  74:	d0 e0       	ldi	r29, 0x00	; 0
			set_servo(9);
		}

		for(j=0;j<50;j++){
			set_servo(10);
  76:	8a e0       	ldi	r24, 0x0A	; 10
  78:	d4 df       	rcall	.-88     	; 0x22 <set_servo>

		for(j=0;j<15*50;j++){
			set_servo(9);
		}

		for(j=0;j<50;j++){
  7a:	21 96       	adiw	r28, 0x01	; 1
  7c:	c2 33       	cpi	r28, 0x32	; 50
  7e:	d1 05       	cpc	r29, r1
  80:	d1 f7       	brne	.-12     	; 0x76 <main+0x1c>
  82:	c0 e0       	ldi	r28, 0x00	; 0
  84:	d0 e0       	ldi	r29, 0x00	; 0
  86:	f1 cf       	rjmp	.-30     	; 0x6a <main+0x10>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
